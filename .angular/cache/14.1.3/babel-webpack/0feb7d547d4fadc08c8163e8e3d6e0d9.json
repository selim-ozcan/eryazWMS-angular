{"ast":null,"code":"import _slicedToArray from \"/Users/selim/repo/eryaz/angular/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _assertThisInitialized from \"/Users/selim/repo/eryaz/angular/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/selim/repo/eryaz/angular/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/selim/repo/eryaz/angular/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/selim/repo/eryaz/angular/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/selim/repo/eryaz/angular/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _classCallCheck from \"/Users/selim/repo/eryaz/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/selim/repo/eryaz/angular/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { inject, APP_ID, Injectable, Inject, QueryList, Directive, Input, InjectionToken, Optional, EventEmitter, Output, NgModule } from '@angular/core';\nimport * as i1 from '@angular/cdk/platform';\nimport { _getFocusedElementPierceShadowDom, normalizePassiveListenerOptions, _getEventTarget, _getShadowRoot } from '@angular/cdk/platform';\nimport { Subject, Subscription, BehaviorSubject, of } from 'rxjs';\nimport { hasModifierKey, A, Z, ZERO, NINE, END, HOME, LEFT_ARROW, RIGHT_ARROW, UP_ARROW, DOWN_ARROW, TAB, ALT, CONTROL, MAC_META, META, SHIFT } from '@angular/cdk/keycodes';\nimport { tap, debounceTime, filter, map, take, skip, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { coerceBooleanProperty, coerceElement } from '@angular/cdk/coercion';\nimport * as i1$1 from '@angular/cdk/observers';\nimport { ObserversModule } from '@angular/cdk/observers';\nimport { BreakpointObserver } from '@angular/cdk/layout';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** IDs are delimited by an empty space, as per the spec. */\n\nvar ID_DELIMITER = ' ';\n/**\n * Adds the given ID to the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\n\nfunction addAriaReferencedId(el, attr, id) {\n  var ids = getAriaReferenceIds(el, attr);\n\n  if (ids.some(function (existingId) {\n    return existingId.trim() == id.trim();\n  })) {\n    return;\n  }\n\n  ids.push(id.trim());\n  el.setAttribute(attr, ids.join(ID_DELIMITER));\n}\n/**\n * Removes the given ID from the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\n\n\nfunction removeAriaReferencedId(el, attr, id) {\n  var ids = getAriaReferenceIds(el, attr);\n  var filteredIds = ids.filter(function (val) {\n    return val != id.trim();\n  });\n\n  if (filteredIds.length) {\n    el.setAttribute(attr, filteredIds.join(ID_DELIMITER));\n  } else {\n    el.removeAttribute(attr);\n  }\n}\n/**\n * Gets the list of IDs referenced by the given ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\n\n\nfunction getAriaReferenceIds(el, attr) {\n  // Get string array of all individual ids (whitespace delimited) in the attribute value\n  return (el.getAttribute(attr) || '').match(/\\S+/g) || [];\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * ID used for the body container where all messages are appended.\n * @deprecated No longer being used. To be removed.\n * @breaking-change 14.0.0\n */\n\n\nvar MESSAGES_CONTAINER_ID = 'cdk-describedby-message-container';\n/**\n * ID prefix used for each created message element.\n * @deprecated To be turned into a private variable.\n * @breaking-change 14.0.0\n */\n\nvar CDK_DESCRIBEDBY_ID_PREFIX = 'cdk-describedby-message';\n/**\n * Attribute given to each host element that is described by a message element.\n * @deprecated To be turned into a private variable.\n * @breaking-change 14.0.0\n */\n\nvar CDK_DESCRIBEDBY_HOST_ATTRIBUTE = 'cdk-describedby-host';\n/** Global incremental identifier for each registered message element. */\n\nvar nextId = 0;\n/**\n * Utility that creates visually hidden elements with a message content. Useful for elements that\n * want to use aria-describedby to further describe themselves without adding additional visual\n * content.\n */\n\nvar AriaDescriber = /*#__PURE__*/function () {\n  function AriaDescriber(_document,\n  /**\n   * @deprecated To be turned into a required parameter.\n   * @breaking-change 14.0.0\n   */\n  _platform) {\n    _classCallCheck(this, AriaDescriber);\n\n    this._platform = _platform;\n    /** Map of all registered message elements that have been placed into the document. */\n\n    this._messageRegistry = new Map();\n    /** Container for all registered messages. */\n\n    this._messagesContainer = null;\n    /** Unique ID for the service. */\n\n    this._id = \"\".concat(nextId++);\n    this._document = _document;\n    this._id = inject(APP_ID) + '-' + nextId++;\n  }\n\n  _createClass(AriaDescriber, [{\n    key: \"describe\",\n    value: function describe(hostElement, message, role) {\n      if (!this._canBeDescribed(hostElement, message)) {\n        return;\n      }\n\n      var key = getKey(message, role);\n\n      if (typeof message !== 'string') {\n        // We need to ensure that the element has an ID.\n        setMessageId(message, this._id);\n\n        this._messageRegistry.set(key, {\n          messageElement: message,\n          referenceCount: 0\n        });\n      } else if (!this._messageRegistry.has(key)) {\n        this._createMessageElement(message, role);\n      }\n\n      if (!this._isElementDescribedByMessage(hostElement, key)) {\n        this._addMessageReference(hostElement, key);\n      }\n    }\n  }, {\n    key: \"removeDescription\",\n    value: function removeDescription(hostElement, message, role) {\n      var _a;\n\n      if (!message || !this._isElementNode(hostElement)) {\n        return;\n      }\n\n      var key = getKey(message, role);\n\n      if (this._isElementDescribedByMessage(hostElement, key)) {\n        this._removeMessageReference(hostElement, key);\n      } // If the message is a string, it means that it's one that we created for the\n      // consumer so we can remove it safely, otherwise we should leave it in place.\n\n\n      if (typeof message === 'string') {\n        var registeredMessage = this._messageRegistry.get(key);\n\n        if (registeredMessage && registeredMessage.referenceCount === 0) {\n          this._deleteMessageElement(key);\n        }\n      }\n\n      if (((_a = this._messagesContainer) === null || _a === void 0 ? void 0 : _a.childNodes.length) === 0) {\n        this._messagesContainer.remove();\n\n        this._messagesContainer = null;\n      }\n    }\n    /** Unregisters all created message elements and removes the message container. */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      var _a;\n\n      var describedElements = this._document.querySelectorAll(\"[\".concat(CDK_DESCRIBEDBY_HOST_ATTRIBUTE, \"=\\\"\").concat(this._id, \"\\\"]\"));\n\n      for (var i = 0; i < describedElements.length; i++) {\n        this._removeCdkDescribedByReferenceIds(describedElements[i]);\n\n        describedElements[i].removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n      }\n\n      (_a = this._messagesContainer) === null || _a === void 0 ? void 0 : _a.remove();\n      this._messagesContainer = null;\n\n      this._messageRegistry.clear();\n    }\n    /**\n     * Creates a new element in the visually hidden message container element with the message\n     * as its content and adds it to the message registry.\n     */\n\n  }, {\n    key: \"_createMessageElement\",\n    value: function _createMessageElement(message, role) {\n      var messageElement = this._document.createElement('div');\n\n      setMessageId(messageElement, this._id);\n      messageElement.textContent = message;\n\n      if (role) {\n        messageElement.setAttribute('role', role);\n      }\n\n      this._createMessagesContainer();\n\n      this._messagesContainer.appendChild(messageElement);\n\n      this._messageRegistry.set(getKey(message, role), {\n        messageElement: messageElement,\n        referenceCount: 0\n      });\n    }\n    /** Deletes the message element from the global messages container. */\n\n  }, {\n    key: \"_deleteMessageElement\",\n    value: function _deleteMessageElement(key) {\n      var _a, _b;\n\n      (_b = (_a = this._messageRegistry.get(key)) === null || _a === void 0 ? void 0 : _a.messageElement) === null || _b === void 0 ? void 0 : _b.remove();\n\n      this._messageRegistry.delete(key);\n    }\n    /** Creates the global container for all aria-describedby messages. */\n\n  }, {\n    key: \"_createMessagesContainer\",\n    value: function _createMessagesContainer() {\n      if (this._messagesContainer) {\n        return;\n      }\n\n      var containerClassName = 'cdk-describedby-message-container';\n\n      var serverContainers = this._document.querySelectorAll(\".\".concat(containerClassName, \"[platform=\\\"server\\\"]\"));\n\n      for (var i = 0; i < serverContainers.length; i++) {\n        // When going from the server to the client, we may end up in a situation where there's\n        // already a container on the page, but we don't have a reference to it. Clear the\n        // old container so we don't get duplicates. Doing this, instead of emptying the previous\n        // container, should be slightly faster.\n        serverContainers[i].remove();\n      }\n\n      var messagesContainer = this._document.createElement('div'); // We add `visibility: hidden` in order to prevent text in this container from\n      // being searchable by the browser's Ctrl + F functionality.\n      // Screen-readers will still read the description for elements with aria-describedby even\n      // when the description element is not visible.\n\n\n      messagesContainer.style.visibility = 'hidden'; // Even though we use `visibility: hidden`, we still apply `cdk-visually-hidden` so that\n      // the description element doesn't impact page layout.\n\n      messagesContainer.classList.add(containerClassName);\n      messagesContainer.classList.add('cdk-visually-hidden'); // @breaking-change 14.0.0 Remove null check for `_platform`.\n\n      if (this._platform && !this._platform.isBrowser) {\n        messagesContainer.setAttribute('platform', 'server');\n      }\n\n      this._document.body.appendChild(messagesContainer);\n\n      this._messagesContainer = messagesContainer;\n    }\n    /** Removes all cdk-describedby messages that are hosted through the element. */\n\n  }, {\n    key: \"_removeCdkDescribedByReferenceIds\",\n    value: function _removeCdkDescribedByReferenceIds(element) {\n      // Remove all aria-describedby reference IDs that are prefixed by CDK_DESCRIBEDBY_ID_PREFIX\n      var originalReferenceIds = getAriaReferenceIds(element, 'aria-describedby').filter(function (id) {\n        return id.indexOf(CDK_DESCRIBEDBY_ID_PREFIX) != 0;\n      });\n      element.setAttribute('aria-describedby', originalReferenceIds.join(' '));\n    }\n    /**\n     * Adds a message reference to the element using aria-describedby and increments the registered\n     * message's reference count.\n     */\n\n  }, {\n    key: \"_addMessageReference\",\n    value: function _addMessageReference(element, key) {\n      var registeredMessage = this._messageRegistry.get(key); // Add the aria-describedby reference and set the\n      // describedby_host attribute to mark the element.\n\n\n      addAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n      element.setAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE, this._id);\n      registeredMessage.referenceCount++;\n    }\n    /**\n     * Removes a message reference from the element using aria-describedby\n     * and decrements the registered message's reference count.\n     */\n\n  }, {\n    key: \"_removeMessageReference\",\n    value: function _removeMessageReference(element, key) {\n      var registeredMessage = this._messageRegistry.get(key);\n\n      registeredMessage.referenceCount--;\n      removeAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n      element.removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n    }\n    /** Returns true if the element has been described by the provided message ID. */\n\n  }, {\n    key: \"_isElementDescribedByMessage\",\n    value: function _isElementDescribedByMessage(element, key) {\n      var referenceIds = getAriaReferenceIds(element, 'aria-describedby');\n\n      var registeredMessage = this._messageRegistry.get(key);\n\n      var messageId = registeredMessage && registeredMessage.messageElement.id;\n      return !!messageId && referenceIds.indexOf(messageId) != -1;\n    }\n    /** Determines whether a message can be described on a particular element. */\n\n  }, {\n    key: \"_canBeDescribed\",\n    value: function _canBeDescribed(element, message) {\n      if (!this._isElementNode(element)) {\n        return false;\n      }\n\n      if (message && typeof message === 'object') {\n        // We'd have to make some assumptions about the description element's text, if the consumer\n        // passed in an element. Assume that if an element is passed in, the consumer has verified\n        // that it can be used as a description.\n        return true;\n      }\n\n      var trimmedMessage = message == null ? '' : \"\".concat(message).trim();\n      var ariaLabel = element.getAttribute('aria-label'); // We shouldn't set descriptions if they're exactly the same as the `aria-label` of the\n      // element, because screen readers will end up reading out the same text twice in a row.\n\n      return trimmedMessage ? !ariaLabel || ariaLabel.trim() !== trimmedMessage : false;\n    }\n    /** Checks whether a node is an Element node. */\n\n  }, {\n    key: \"_isElementNode\",\n    value: function _isElementNode(element) {\n      return element.nodeType === this._document.ELEMENT_NODE;\n    }\n  }]);\n\n  return AriaDescriber;\n}();\n\nAriaDescriber.ɵfac = function AriaDescriber_Factory(t) {\n  return new (t || AriaDescriber)(i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(i1.Platform));\n};\n\nAriaDescriber.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: AriaDescriber,\n  factory: AriaDescriber.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AriaDescriber, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: i1.Platform\n    }];\n  }, null);\n})();\n/** Gets a key that can be used to look messages up in the registry. */\n\n\nfunction getKey(message, role) {\n  return typeof message === 'string' ? \"\".concat(role || '', \"/\").concat(message) : message;\n}\n/** Assigns a unique ID to an element, if it doesn't have one already. */\n\n\nfunction setMessageId(element, serviceId) {\n  if (!element.id) {\n    element.id = \"\".concat(CDK_DESCRIBEDBY_ID_PREFIX, \"-\").concat(serviceId, \"-\").concat(nextId++);\n  }\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * This class manages keyboard events for selectable lists. If you pass it a query list\n * of items, it will set the active item correctly when arrow events occur.\n */\n\n\nvar ListKeyManager = /*#__PURE__*/function () {\n  function ListKeyManager(_items) {\n    var _this = this;\n\n    _classCallCheck(this, ListKeyManager);\n\n    this._items = _items;\n    this._activeItemIndex = -1;\n    this._activeItem = null;\n    this._wrap = false;\n    this._letterKeyStream = new Subject();\n    this._typeaheadSubscription = Subscription.EMPTY;\n    this._vertical = true;\n    this._allowedModifierKeys = [];\n    this._homeAndEnd = false;\n    /**\n     * Predicate function that can be used to check whether an item should be skipped\n     * by the key manager. By default, disabled items are skipped.\n     */\n\n    this._skipPredicateFn = function (item) {\n      return item.disabled;\n    }; // Buffer for the letters that the user has pressed when the typeahead option is turned on.\n\n\n    this._pressedLetters = [];\n    /**\n     * Stream that emits any time the TAB key is pressed, so components can react\n     * when focus is shifted off of the list.\n     */\n\n    this.tabOut = new Subject();\n    /** Stream that emits whenever the active item of the list manager changes. */\n\n    this.change = new Subject(); // We allow for the items to be an array because, in some cases, the consumer may\n    // not have access to a QueryList of the items they want to manage (e.g. when the\n    // items aren't being collected via `ViewChildren` or `ContentChildren`).\n\n    if (_items instanceof QueryList) {\n      _items.changes.subscribe(function (newItems) {\n        if (_this._activeItem) {\n          var itemArray = newItems.toArray();\n          var newIndex = itemArray.indexOf(_this._activeItem);\n\n          if (newIndex > -1 && newIndex !== _this._activeItemIndex) {\n            _this._activeItemIndex = newIndex;\n          }\n        }\n      });\n    }\n  }\n  /**\n   * Sets the predicate function that determines which items should be skipped by the\n   * list key manager.\n   * @param predicate Function that determines whether the given item should be skipped.\n   */\n\n\n  _createClass(ListKeyManager, [{\n    key: \"skipPredicate\",\n    value: function skipPredicate(predicate) {\n      this._skipPredicateFn = predicate;\n      return this;\n    }\n    /**\n     * Configures wrapping mode, which determines whether the active item will wrap to\n     * the other end of list when there are no more items in the given direction.\n     * @param shouldWrap Whether the list should wrap when reaching the end.\n     */\n\n  }, {\n    key: \"withWrap\",\n    value: function withWrap() {\n      var shouldWrap = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this._wrap = shouldWrap;\n      return this;\n    }\n    /**\n     * Configures whether the key manager should be able to move the selection vertically.\n     * @param enabled Whether vertical selection should be enabled.\n     */\n\n  }, {\n    key: \"withVerticalOrientation\",\n    value: function withVerticalOrientation() {\n      var enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this._vertical = enabled;\n      return this;\n    }\n    /**\n     * Configures the key manager to move the selection horizontally.\n     * Passing in `null` will disable horizontal movement.\n     * @param direction Direction in which the selection can be moved.\n     */\n\n  }, {\n    key: \"withHorizontalOrientation\",\n    value: function withHorizontalOrientation(direction) {\n      this._horizontal = direction;\n      return this;\n    }\n    /**\n     * Modifier keys which are allowed to be held down and whose default actions will be prevented\n     * as the user is pressing the arrow keys. Defaults to not allowing any modifier keys.\n     */\n\n  }, {\n    key: \"withAllowedModifierKeys\",\n    value: function withAllowedModifierKeys(keys) {\n      this._allowedModifierKeys = keys;\n      return this;\n    }\n    /**\n     * Turns on typeahead mode which allows users to set the active item by typing.\n     * @param debounceInterval Time to wait after the last keystroke before setting the active item.\n     */\n\n  }, {\n    key: \"withTypeAhead\",\n    value: function withTypeAhead() {\n      var _this2 = this;\n\n      var debounceInterval = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 200;\n\n      if ((typeof ngDevMode === 'undefined' || ngDevMode) && this._items.length && this._items.some(function (item) {\n        return typeof item.getLabel !== 'function';\n      })) {\n        throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');\n      }\n\n      this._typeaheadSubscription.unsubscribe(); // Debounce the presses of non-navigational keys, collect the ones that correspond to letters\n      // and convert those letters back into a string. Afterwards find the first item that starts\n      // with that string and select it.\n\n\n      this._typeaheadSubscription = this._letterKeyStream.pipe(tap(function (letter) {\n        return _this2._pressedLetters.push(letter);\n      }), debounceTime(debounceInterval), filter(function () {\n        return _this2._pressedLetters.length > 0;\n      }), map(function () {\n        return _this2._pressedLetters.join('');\n      })).subscribe(function (inputString) {\n        var items = _this2._getItemsArray(); // Start at 1 because we want to start searching at the item immediately\n        // following the current active item.\n\n\n        for (var i = 1; i < items.length + 1; i++) {\n          var index = (_this2._activeItemIndex + i) % items.length;\n          var item = items[index];\n\n          if (!_this2._skipPredicateFn(item) && item.getLabel().toUpperCase().trim().indexOf(inputString) === 0) {\n            _this2.setActiveItem(index);\n\n            break;\n          }\n        }\n\n        _this2._pressedLetters = [];\n      });\n      return this;\n    }\n    /**\n     * Configures the key manager to activate the first and last items\n     * respectively when the Home or End key is pressed.\n     * @param enabled Whether pressing the Home or End key activates the first/last item.\n     */\n\n  }, {\n    key: \"withHomeAndEnd\",\n    value: function withHomeAndEnd() {\n      var enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this._homeAndEnd = enabled;\n      return this;\n    }\n  }, {\n    key: \"setActiveItem\",\n    value: function setActiveItem(item) {\n      var previousActiveItem = this._activeItem;\n      this.updateActiveItem(item);\n\n      if (this._activeItem !== previousActiveItem) {\n        this.change.next(this._activeItemIndex);\n      }\n    }\n    /**\n     * Sets the active item depending on the key event passed in.\n     * @param event Keyboard event to be used for determining which element should be active.\n     */\n\n  }, {\n    key: \"onKeydown\",\n    value: function onKeydown(event) {\n      var _this3 = this;\n\n      var keyCode = event.keyCode;\n      var modifiers = ['altKey', 'ctrlKey', 'metaKey', 'shiftKey'];\n      var isModifierAllowed = modifiers.every(function (modifier) {\n        return !event[modifier] || _this3._allowedModifierKeys.indexOf(modifier) > -1;\n      });\n\n      switch (keyCode) {\n        case TAB:\n          this.tabOut.next();\n          return;\n\n        case DOWN_ARROW:\n          if (this._vertical && isModifierAllowed) {\n            this.setNextItemActive();\n            break;\n          } else {\n            return;\n          }\n\n        case UP_ARROW:\n          if (this._vertical && isModifierAllowed) {\n            this.setPreviousItemActive();\n            break;\n          } else {\n            return;\n          }\n\n        case RIGHT_ARROW:\n          if (this._horizontal && isModifierAllowed) {\n            this._horizontal === 'rtl' ? this.setPreviousItemActive() : this.setNextItemActive();\n            break;\n          } else {\n            return;\n          }\n\n        case LEFT_ARROW:\n          if (this._horizontal && isModifierAllowed) {\n            this._horizontal === 'rtl' ? this.setNextItemActive() : this.setPreviousItemActive();\n            break;\n          } else {\n            return;\n          }\n\n        case HOME:\n          if (this._homeAndEnd && isModifierAllowed) {\n            this.setFirstItemActive();\n            break;\n          } else {\n            return;\n          }\n\n        case END:\n          if (this._homeAndEnd && isModifierAllowed) {\n            this.setLastItemActive();\n            break;\n          } else {\n            return;\n          }\n\n        default:\n          if (isModifierAllowed || hasModifierKey(event, 'shiftKey')) {\n            // Attempt to use the `event.key` which also maps it to the user's keyboard language,\n            // otherwise fall back to resolving alphanumeric characters via the keyCode.\n            if (event.key && event.key.length === 1) {\n              this._letterKeyStream.next(event.key.toLocaleUpperCase());\n            } else if (keyCode >= A && keyCode <= Z || keyCode >= ZERO && keyCode <= NINE) {\n              this._letterKeyStream.next(String.fromCharCode(keyCode));\n            }\n          } // Note that we return here, in order to avoid preventing\n          // the default action of non-navigational keys.\n\n\n          return;\n      }\n\n      this._pressedLetters = [];\n      event.preventDefault();\n    }\n    /** Index of the currently active item. */\n\n  }, {\n    key: \"activeItemIndex\",\n    get: function get() {\n      return this._activeItemIndex;\n    }\n    /** The active item. */\n\n  }, {\n    key: \"activeItem\",\n    get: function get() {\n      return this._activeItem;\n    }\n    /** Gets whether the user is currently typing into the manager using the typeahead feature. */\n\n  }, {\n    key: \"isTyping\",\n    value: function isTyping() {\n      return this._pressedLetters.length > 0;\n    }\n    /** Sets the active item to the first enabled item in the list. */\n\n  }, {\n    key: \"setFirstItemActive\",\n    value: function setFirstItemActive() {\n      this._setActiveItemByIndex(0, 1);\n    }\n    /** Sets the active item to the last enabled item in the list. */\n\n  }, {\n    key: \"setLastItemActive\",\n    value: function setLastItemActive() {\n      this._setActiveItemByIndex(this._items.length - 1, -1);\n    }\n    /** Sets the active item to the next enabled item in the list. */\n\n  }, {\n    key: \"setNextItemActive\",\n    value: function setNextItemActive() {\n      this._activeItemIndex < 0 ? this.setFirstItemActive() : this._setActiveItemByDelta(1);\n    }\n    /** Sets the active item to a previous enabled item in the list. */\n\n  }, {\n    key: \"setPreviousItemActive\",\n    value: function setPreviousItemActive() {\n      this._activeItemIndex < 0 && this._wrap ? this.setLastItemActive() : this._setActiveItemByDelta(-1);\n    }\n  }, {\n    key: \"updateActiveItem\",\n    value: function updateActiveItem(item) {\n      var itemArray = this._getItemsArray();\n\n      var index = typeof item === 'number' ? item : itemArray.indexOf(item);\n      var activeItem = itemArray[index]; // Explicitly check for `null` and `undefined` because other falsy values are valid.\n\n      this._activeItem = activeItem == null ? null : activeItem;\n      this._activeItemIndex = index;\n    }\n    /**\n     * This method sets the active item, given a list of items and the delta between the\n     * currently active item and the new active item. It will calculate differently\n     * depending on whether wrap mode is turned on.\n     */\n\n  }, {\n    key: \"_setActiveItemByDelta\",\n    value: function _setActiveItemByDelta(delta) {\n      this._wrap ? this._setActiveInWrapMode(delta) : this._setActiveInDefaultMode(delta);\n    }\n    /**\n     * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\n     * down the list until it finds an item that is not disabled, and it will wrap if it\n     * encounters either end of the list.\n     */\n\n  }, {\n    key: \"_setActiveInWrapMode\",\n    value: function _setActiveInWrapMode(delta) {\n      var items = this._getItemsArray();\n\n      for (var i = 1; i <= items.length; i++) {\n        var index = (this._activeItemIndex + delta * i + items.length) % items.length;\n        var item = items[index];\n\n        if (!this._skipPredicateFn(item)) {\n          this.setActiveItem(index);\n          return;\n        }\n      }\n    }\n    /**\n     * Sets the active item properly given the default mode. In other words, it will\n     * continue to move down the list until it finds an item that is not disabled. If\n     * it encounters either end of the list, it will stop and not wrap.\n     */\n\n  }, {\n    key: \"_setActiveInDefaultMode\",\n    value: function _setActiveInDefaultMode(delta) {\n      this._setActiveItemByIndex(this._activeItemIndex + delta, delta);\n    }\n    /**\n     * Sets the active item to the first enabled item starting at the index specified. If the\n     * item is disabled, it will move in the fallbackDelta direction until it either\n     * finds an enabled item or encounters the end of the list.\n     */\n\n  }, {\n    key: \"_setActiveItemByIndex\",\n    value: function _setActiveItemByIndex(index, fallbackDelta) {\n      var items = this._getItemsArray();\n\n      if (!items[index]) {\n        return;\n      }\n\n      while (this._skipPredicateFn(items[index])) {\n        index += fallbackDelta;\n\n        if (!items[index]) {\n          return;\n        }\n      }\n\n      this.setActiveItem(index);\n    }\n    /** Returns the items as an array. */\n\n  }, {\n    key: \"_getItemsArray\",\n    value: function _getItemsArray() {\n      return this._items instanceof QueryList ? this._items.toArray() : this._items;\n    }\n  }]);\n\n  return ListKeyManager;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar ActiveDescendantKeyManager = /*#__PURE__*/function (_ListKeyManager) {\n  _inherits(ActiveDescendantKeyManager, _ListKeyManager);\n\n  var _super = _createSuper(ActiveDescendantKeyManager);\n\n  function ActiveDescendantKeyManager() {\n    _classCallCheck(this, ActiveDescendantKeyManager);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ActiveDescendantKeyManager, [{\n    key: \"setActiveItem\",\n    value: function setActiveItem(index) {\n      if (this.activeItem) {\n        this.activeItem.setInactiveStyles();\n      }\n\n      _get(_getPrototypeOf(ActiveDescendantKeyManager.prototype), \"setActiveItem\", this).call(this, index);\n\n      if (this.activeItem) {\n        this.activeItem.setActiveStyles();\n      }\n    }\n  }]);\n\n  return ActiveDescendantKeyManager;\n}(ListKeyManager);\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar FocusKeyManager = /*#__PURE__*/function (_ListKeyManager2) {\n  _inherits(FocusKeyManager, _ListKeyManager2);\n\n  var _super2 = _createSuper(FocusKeyManager);\n\n  function FocusKeyManager() {\n    var _this4;\n\n    _classCallCheck(this, FocusKeyManager);\n\n    _this4 = _super2.apply(this, arguments);\n    _this4._origin = 'program';\n    return _this4;\n  }\n  /**\n   * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.\n   * @param origin Focus origin to be used when focusing items.\n   */\n\n\n  _createClass(FocusKeyManager, [{\n    key: \"setFocusOrigin\",\n    value: function setFocusOrigin(origin) {\n      this._origin = origin;\n      return this;\n    }\n  }, {\n    key: \"setActiveItem\",\n    value: function setActiveItem(item) {\n      _get(_getPrototypeOf(FocusKeyManager.prototype), \"setActiveItem\", this).call(this, item);\n\n      if (this.activeItem) {\n        this.activeItem.focus(this._origin);\n      }\n    }\n  }]);\n\n  return FocusKeyManager;\n}(ListKeyManager);\n/**\n * Configuration for the isFocusable method.\n */\n\n\nvar IsFocusableConfig = /*#__PURE__*/_createClass(function IsFocusableConfig() {\n  _classCallCheck(this, IsFocusableConfig);\n\n  /**\n   * Whether to count an element as focusable even if it is not currently visible.\n   */\n  this.ignoreVisibility = false;\n}); // The InteractivityChecker leans heavily on the ally.js accessibility utilities.\n// Methods like `isTabbable` are only covering specific edge-cases for the browsers which are\n// supported.\n\n/**\n * Utility for checking the interactivity of an element, such as whether is is focusable or\n * tabbable.\n */\n\n\nvar InteractivityChecker = /*#__PURE__*/function () {\n  function InteractivityChecker(_platform) {\n    _classCallCheck(this, InteractivityChecker);\n\n    this._platform = _platform;\n  }\n  /**\n   * Gets whether an element is disabled.\n   *\n   * @param element Element to be checked.\n   * @returns Whether the element is disabled.\n   */\n\n\n  _createClass(InteractivityChecker, [{\n    key: \"isDisabled\",\n    value: function isDisabled(element) {\n      // This does not capture some cases, such as a non-form control with a disabled attribute or\n      // a form control inside of a disabled form, but should capture the most common cases.\n      return element.hasAttribute('disabled');\n    }\n    /**\n     * Gets whether an element is visible for the purposes of interactivity.\n     *\n     * This will capture states like `display: none` and `visibility: hidden`, but not things like\n     * being clipped by an `overflow: hidden` parent or being outside the viewport.\n     *\n     * @returns Whether the element is visible.\n     */\n\n  }, {\n    key: \"isVisible\",\n    value: function isVisible(element) {\n      return hasGeometry(element) && getComputedStyle(element).visibility === 'visible';\n    }\n    /**\n     * Gets whether an element can be reached via Tab key.\n     * Assumes that the element has already been checked with isFocusable.\n     *\n     * @param element Element to be checked.\n     * @returns Whether the element is tabbable.\n     */\n\n  }, {\n    key: \"isTabbable\",\n    value: function isTabbable(element) {\n      // Nothing is tabbable on the server 😎\n      if (!this._platform.isBrowser) {\n        return false;\n      }\n\n      var frameElement = getFrameElement(getWindow(element));\n\n      if (frameElement) {\n        // Frame elements inherit their tabindex onto all child elements.\n        if (getTabIndexValue(frameElement) === -1) {\n          return false;\n        } // Browsers disable tabbing to an element inside of an invisible frame.\n\n\n        if (!this.isVisible(frameElement)) {\n          return false;\n        }\n      }\n\n      var nodeName = element.nodeName.toLowerCase();\n      var tabIndexValue = getTabIndexValue(element);\n\n      if (element.hasAttribute('contenteditable')) {\n        return tabIndexValue !== -1;\n      }\n\n      if (nodeName === 'iframe' || nodeName === 'object') {\n        // The frame or object's content may be tabbable depending on the content, but it's\n        // not possibly to reliably detect the content of the frames. We always consider such\n        // elements as non-tabbable.\n        return false;\n      } // In iOS, the browser only considers some specific elements as tabbable.\n\n\n      if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {\n        return false;\n      }\n\n      if (nodeName === 'audio') {\n        // Audio elements without controls enabled are never tabbable, regardless\n        // of the tabindex attribute explicitly being set.\n        if (!element.hasAttribute('controls')) {\n          return false;\n        } // Audio elements with controls are by default tabbable unless the\n        // tabindex attribute is set to `-1` explicitly.\n\n\n        return tabIndexValue !== -1;\n      }\n\n      if (nodeName === 'video') {\n        // For all video elements, if the tabindex attribute is set to `-1`, the video\n        // is not tabbable. Note: We cannot rely on the default `HTMLElement.tabIndex`\n        // property as that one is set to `-1` in Chrome, Edge and Safari v13.1. The\n        // tabindex attribute is the source of truth here.\n        if (tabIndexValue === -1) {\n          return false;\n        } // If the tabindex is explicitly set, and not `-1` (as per check before), the\n        // video element is always tabbable (regardless of whether it has controls or not).\n\n\n        if (tabIndexValue !== null) {\n          return true;\n        } // Otherwise (when no explicit tabindex is set), a video is only tabbable if it\n        // has controls enabled. Firefox is special as videos are always tabbable regardless\n        // of whether there are controls or not.\n\n\n        return this._platform.FIREFOX || element.hasAttribute('controls');\n      }\n\n      return element.tabIndex >= 0;\n    }\n    /**\n     * Gets whether an element can be focused by the user.\n     *\n     * @param element Element to be checked.\n     * @param config The config object with options to customize this method's behavior\n     * @returns Whether the element is focusable.\n     */\n\n  }, {\n    key: \"isFocusable\",\n    value: function isFocusable(element, config) {\n      // Perform checks in order of left to most expensive.\n      // Again, naive approach that does not capture many edge cases and browser quirks.\n      return isPotentiallyFocusable(element) && !this.isDisabled(element) && ((config === null || config === void 0 ? void 0 : config.ignoreVisibility) || this.isVisible(element));\n    }\n  }]);\n\n  return InteractivityChecker;\n}();\n\nInteractivityChecker.ɵfac = function InteractivityChecker_Factory(t) {\n  return new (t || InteractivityChecker)(i0.ɵɵinject(i1.Platform));\n};\n\nInteractivityChecker.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: InteractivityChecker,\n  factory: InteractivityChecker.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(InteractivityChecker, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.Platform\n    }];\n  }, null);\n})();\n/**\n * Returns the frame element from a window object. Since browsers like MS Edge throw errors if\n * the frameElement property is being accessed from a different host address, this property\n * should be accessed carefully.\n */\n\n\nfunction getFrameElement(window) {\n  try {\n    return window.frameElement;\n  } catch (_a) {\n    return null;\n  }\n}\n/** Checks whether the specified element has any geometry / rectangles. */\n\n\nfunction hasGeometry(element) {\n  // Use logic from jQuery to check for an invisible element.\n  // See https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js#L12\n  return !!(element.offsetWidth || element.offsetHeight || typeof element.getClientRects === 'function' && element.getClientRects().length);\n}\n/** Gets whether an element's  */\n\n\nfunction isNativeFormElement(element) {\n  var nodeName = element.nodeName.toLowerCase();\n  return nodeName === 'input' || nodeName === 'select' || nodeName === 'button' || nodeName === 'textarea';\n}\n/** Gets whether an element is an `<input type=\"hidden\">`. */\n\n\nfunction isHiddenInput(element) {\n  return isInputElement(element) && element.type == 'hidden';\n}\n/** Gets whether an element is an anchor that has an href attribute. */\n\n\nfunction isAnchorWithHref(element) {\n  return isAnchorElement(element) && element.hasAttribute('href');\n}\n/** Gets whether an element is an input element. */\n\n\nfunction isInputElement(element) {\n  return element.nodeName.toLowerCase() == 'input';\n}\n/** Gets whether an element is an anchor element. */\n\n\nfunction isAnchorElement(element) {\n  return element.nodeName.toLowerCase() == 'a';\n}\n/** Gets whether an element has a valid tabindex. */\n\n\nfunction hasValidTabIndex(element) {\n  if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {\n    return false;\n  }\n\n  var tabIndex = element.getAttribute('tabindex');\n  return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));\n}\n/**\n * Returns the parsed tabindex from the element attributes instead of returning the\n * evaluated tabindex from the browsers defaults.\n */\n\n\nfunction getTabIndexValue(element) {\n  if (!hasValidTabIndex(element)) {\n    return null;\n  } // See browser issue in Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054\n\n\n  var tabIndex = parseInt(element.getAttribute('tabindex') || '', 10);\n  return isNaN(tabIndex) ? -1 : tabIndex;\n}\n/** Checks whether the specified element is potentially tabbable on iOS */\n\n\nfunction isPotentiallyTabbableIOS(element) {\n  var nodeName = element.nodeName.toLowerCase();\n  var inputType = nodeName === 'input' && element.type;\n  return inputType === 'text' || inputType === 'password' || nodeName === 'select' || nodeName === 'textarea';\n}\n/**\n * Gets whether an element is potentially focusable without taking current visible/disabled state\n * into account.\n */\n\n\nfunction isPotentiallyFocusable(element) {\n  // Inputs are potentially focusable *unless* they're type=\"hidden\".\n  if (isHiddenInput(element)) {\n    return false;\n  }\n\n  return isNativeFormElement(element) || isAnchorWithHref(element) || element.hasAttribute('contenteditable') || hasValidTabIndex(element);\n}\n/** Gets the parent window of a DOM node with regards of being inside of an iframe. */\n\n\nfunction getWindow(node) {\n  // ownerDocument is null if `node` itself *is* a document.\n  return node.ownerDocument && node.ownerDocument.defaultView || window;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Class that allows for trapping focus within a DOM element.\n *\n * This class currently uses a relatively simple approach to focus trapping.\n * It assumes that the tab order is the same as DOM order, which is not necessarily true.\n * Things like `tabIndex > 0`, flex `order`, and shadow roots can cause the two to be misaligned.\n *\n * @deprecated Use `ConfigurableFocusTrap` instead.\n * @breaking-change 11.0.0\n */\n\n\nvar FocusTrap = /*#__PURE__*/function () {\n  function FocusTrap(_element, _checker, _ngZone, _document) {\n    var _this5 = this;\n\n    var deferAnchors = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n    _classCallCheck(this, FocusTrap);\n\n    this._element = _element;\n    this._checker = _checker;\n    this._ngZone = _ngZone;\n    this._document = _document;\n    this._hasAttached = false; // Event listeners for the anchors. Need to be regular functions so that we can unbind them later.\n\n    this.startAnchorListener = function () {\n      return _this5.focusLastTabbableElement();\n    };\n\n    this.endAnchorListener = function () {\n      return _this5.focusFirstTabbableElement();\n    };\n\n    this._enabled = true;\n\n    if (!deferAnchors) {\n      this.attachAnchors();\n    }\n  }\n  /** Whether the focus trap is active. */\n\n\n  _createClass(FocusTrap, [{\n    key: \"enabled\",\n    get: function get() {\n      return this._enabled;\n    },\n    set: function set(value) {\n      this._enabled = value;\n\n      if (this._startAnchor && this._endAnchor) {\n        this._toggleAnchorTabIndex(value, this._startAnchor);\n\n        this._toggleAnchorTabIndex(value, this._endAnchor);\n      }\n    }\n    /** Destroys the focus trap by cleaning up the anchors. */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var startAnchor = this._startAnchor;\n      var endAnchor = this._endAnchor;\n\n      if (startAnchor) {\n        startAnchor.removeEventListener('focus', this.startAnchorListener);\n        startAnchor.remove();\n      }\n\n      if (endAnchor) {\n        endAnchor.removeEventListener('focus', this.endAnchorListener);\n        endAnchor.remove();\n      }\n\n      this._startAnchor = this._endAnchor = null;\n      this._hasAttached = false;\n    }\n    /**\n     * Inserts the anchors into the DOM. This is usually done automatically\n     * in the constructor, but can be deferred for cases like directives with `*ngIf`.\n     * @returns Whether the focus trap managed to attach successfully. This may not be the case\n     * if the target element isn't currently in the DOM.\n     */\n\n  }, {\n    key: \"attachAnchors\",\n    value: function attachAnchors() {\n      var _this6 = this;\n\n      // If we're not on the browser, there can be no focus to trap.\n      if (this._hasAttached) {\n        return true;\n      }\n\n      this._ngZone.runOutsideAngular(function () {\n        if (!_this6._startAnchor) {\n          _this6._startAnchor = _this6._createAnchor();\n\n          _this6._startAnchor.addEventListener('focus', _this6.startAnchorListener);\n        }\n\n        if (!_this6._endAnchor) {\n          _this6._endAnchor = _this6._createAnchor();\n\n          _this6._endAnchor.addEventListener('focus', _this6.endAnchorListener);\n        }\n      });\n\n      if (this._element.parentNode) {\n        this._element.parentNode.insertBefore(this._startAnchor, this._element);\n\n        this._element.parentNode.insertBefore(this._endAnchor, this._element.nextSibling);\n\n        this._hasAttached = true;\n      }\n\n      return this._hasAttached;\n    }\n    /**\n     * Waits for the zone to stabilize, then focuses the first tabbable element.\n     * @returns Returns a promise that resolves with a boolean, depending\n     * on whether focus was moved successfully.\n     */\n\n  }, {\n    key: \"focusInitialElementWhenReady\",\n    value: function focusInitialElementWhenReady(options) {\n      var _this7 = this;\n\n      return new Promise(function (resolve) {\n        _this7._executeOnStable(function () {\n          return resolve(_this7.focusInitialElement(options));\n        });\n      });\n    }\n    /**\n     * Waits for the zone to stabilize, then focuses\n     * the first tabbable element within the focus trap region.\n     * @returns Returns a promise that resolves with a boolean, depending\n     * on whether focus was moved successfully.\n     */\n\n  }, {\n    key: \"focusFirstTabbableElementWhenReady\",\n    value: function focusFirstTabbableElementWhenReady(options) {\n      var _this8 = this;\n\n      return new Promise(function (resolve) {\n        _this8._executeOnStable(function () {\n          return resolve(_this8.focusFirstTabbableElement(options));\n        });\n      });\n    }\n    /**\n     * Waits for the zone to stabilize, then focuses\n     * the last tabbable element within the focus trap region.\n     * @returns Returns a promise that resolves with a boolean, depending\n     * on whether focus was moved successfully.\n     */\n\n  }, {\n    key: \"focusLastTabbableElementWhenReady\",\n    value: function focusLastTabbableElementWhenReady(options) {\n      var _this9 = this;\n\n      return new Promise(function (resolve) {\n        _this9._executeOnStable(function () {\n          return resolve(_this9.focusLastTabbableElement(options));\n        });\n      });\n    }\n    /**\n     * Get the specified boundary element of the trapped region.\n     * @param bound The boundary to get (start or end of trapped region).\n     * @returns The boundary element.\n     */\n\n  }, {\n    key: \"_getRegionBoundary\",\n    value: function _getRegionBoundary(bound) {\n      // Contains the deprecated version of selector, for temporary backwards comparability.\n      var markers = this._element.querySelectorAll(\"[cdk-focus-region-\".concat(bound, \"], \") + \"[cdkFocusRegion\".concat(bound, \"], \") + \"[cdk-focus-\".concat(bound, \"]\"));\n\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        for (var i = 0; i < markers.length; i++) {\n          // @breaking-change 8.0.0\n          if (markers[i].hasAttribute(\"cdk-focus-\".concat(bound))) {\n            console.warn(\"Found use of deprecated attribute 'cdk-focus-\".concat(bound, \"', \") + \"use 'cdkFocusRegion\".concat(bound, \"' instead. The deprecated \") + \"attribute will be removed in 8.0.0.\", markers[i]);\n          } else if (markers[i].hasAttribute(\"cdk-focus-region-\".concat(bound))) {\n            console.warn(\"Found use of deprecated attribute 'cdk-focus-region-\".concat(bound, \"', \") + \"use 'cdkFocusRegion\".concat(bound, \"' instead. The deprecated attribute \") + \"will be removed in 8.0.0.\", markers[i]);\n          }\n        }\n      }\n\n      if (bound == 'start') {\n        return markers.length ? markers[0] : this._getFirstTabbableElement(this._element);\n      }\n\n      return markers.length ? markers[markers.length - 1] : this._getLastTabbableElement(this._element);\n    }\n    /**\n     * Focuses the element that should be focused when the focus trap is initialized.\n     * @returns Whether focus was moved successfully.\n     */\n\n  }, {\n    key: \"focusInitialElement\",\n    value: function focusInitialElement(options) {\n      // Contains the deprecated version of selector, for temporary backwards comparability.\n      var redirectToElement = this._element.querySelector(\"[cdk-focus-initial], \" + \"[cdkFocusInitial]\");\n\n      if (redirectToElement) {\n        // @breaking-change 8.0.0\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) && redirectToElement.hasAttribute(\"cdk-focus-initial\")) {\n          console.warn(\"Found use of deprecated attribute 'cdk-focus-initial', \" + \"use 'cdkFocusInitial' instead. The deprecated attribute \" + \"will be removed in 8.0.0\", redirectToElement);\n        } // Warn the consumer if the element they've pointed to\n        // isn't focusable, when not in production mode.\n\n\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) && !this._checker.isFocusable(redirectToElement)) {\n          console.warn(\"Element matching '[cdkFocusInitial]' is not focusable.\", redirectToElement);\n        }\n\n        if (!this._checker.isFocusable(redirectToElement)) {\n          var focusableChild = this._getFirstTabbableElement(redirectToElement);\n\n          focusableChild === null || focusableChild === void 0 ? void 0 : focusableChild.focus(options);\n          return !!focusableChild;\n        }\n\n        redirectToElement.focus(options);\n        return true;\n      }\n\n      return this.focusFirstTabbableElement(options);\n    }\n    /**\n     * Focuses the first tabbable element within the focus trap region.\n     * @returns Whether focus was moved successfully.\n     */\n\n  }, {\n    key: \"focusFirstTabbableElement\",\n    value: function focusFirstTabbableElement(options) {\n      var redirectToElement = this._getRegionBoundary('start');\n\n      if (redirectToElement) {\n        redirectToElement.focus(options);\n      }\n\n      return !!redirectToElement;\n    }\n    /**\n     * Focuses the last tabbable element within the focus trap region.\n     * @returns Whether focus was moved successfully.\n     */\n\n  }, {\n    key: \"focusLastTabbableElement\",\n    value: function focusLastTabbableElement(options) {\n      var redirectToElement = this._getRegionBoundary('end');\n\n      if (redirectToElement) {\n        redirectToElement.focus(options);\n      }\n\n      return !!redirectToElement;\n    }\n    /**\n     * Checks whether the focus trap has successfully been attached.\n     */\n\n  }, {\n    key: \"hasAttached\",\n    value: function hasAttached() {\n      return this._hasAttached;\n    }\n    /** Get the first tabbable element from a DOM subtree (inclusive). */\n\n  }, {\n    key: \"_getFirstTabbableElement\",\n    value: function _getFirstTabbableElement(root) {\n      if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n        return root;\n      }\n\n      var children = root.children;\n\n      for (var i = 0; i < children.length; i++) {\n        var tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ? this._getFirstTabbableElement(children[i]) : null;\n\n        if (tabbableChild) {\n          return tabbableChild;\n        }\n      }\n\n      return null;\n    }\n    /** Get the last tabbable element from a DOM subtree (inclusive). */\n\n  }, {\n    key: \"_getLastTabbableElement\",\n    value: function _getLastTabbableElement(root) {\n      if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n        return root;\n      } // Iterate in reverse DOM order.\n\n\n      var children = root.children;\n\n      for (var i = children.length - 1; i >= 0; i--) {\n        var tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ? this._getLastTabbableElement(children[i]) : null;\n\n        if (tabbableChild) {\n          return tabbableChild;\n        }\n      }\n\n      return null;\n    }\n    /** Creates an anchor element. */\n\n  }, {\n    key: \"_createAnchor\",\n    value: function _createAnchor() {\n      var anchor = this._document.createElement('div');\n\n      this._toggleAnchorTabIndex(this._enabled, anchor);\n\n      anchor.classList.add('cdk-visually-hidden');\n      anchor.classList.add('cdk-focus-trap-anchor');\n      anchor.setAttribute('aria-hidden', 'true');\n      return anchor;\n    }\n    /**\n     * Toggles the `tabindex` of an anchor, based on the enabled state of the focus trap.\n     * @param isEnabled Whether the focus trap is enabled.\n     * @param anchor Anchor on which to toggle the tabindex.\n     */\n\n  }, {\n    key: \"_toggleAnchorTabIndex\",\n    value: function _toggleAnchorTabIndex(isEnabled, anchor) {\n      // Remove the tabindex completely, rather than setting it to -1, because if the\n      // element has a tabindex, the user might still hit it when navigating with the arrow keys.\n      isEnabled ? anchor.setAttribute('tabindex', '0') : anchor.removeAttribute('tabindex');\n    }\n    /**\n     * Toggles the`tabindex` of both anchors to either trap Tab focus or allow it to escape.\n     * @param enabled: Whether the anchors should trap Tab.\n     */\n\n  }, {\n    key: \"toggleAnchors\",\n    value: function toggleAnchors(enabled) {\n      if (this._startAnchor && this._endAnchor) {\n        this._toggleAnchorTabIndex(enabled, this._startAnchor);\n\n        this._toggleAnchorTabIndex(enabled, this._endAnchor);\n      }\n    }\n    /** Executes a function when the zone is stable. */\n\n  }, {\n    key: \"_executeOnStable\",\n    value: function _executeOnStable(fn) {\n      if (this._ngZone.isStable) {\n        fn();\n      } else {\n        this._ngZone.onStable.pipe(take(1)).subscribe(fn);\n      }\n    }\n  }]);\n\n  return FocusTrap;\n}();\n/**\n * Factory that allows easy instantiation of focus traps.\n * @deprecated Use `ConfigurableFocusTrapFactory` instead.\n * @breaking-change 11.0.0\n */\n\n\nvar FocusTrapFactory = /*#__PURE__*/function () {\n  function FocusTrapFactory(_checker, _ngZone, _document) {\n    _classCallCheck(this, FocusTrapFactory);\n\n    this._checker = _checker;\n    this._ngZone = _ngZone;\n    this._document = _document;\n  }\n  /**\n   * Creates a focus-trapped region around the given element.\n   * @param element The element around which focus will be trapped.\n   * @param deferCaptureElements Defers the creation of focus-capturing elements to be done\n   *     manually by the user.\n   * @returns The created focus trap instance.\n   */\n\n\n  _createClass(FocusTrapFactory, [{\n    key: \"create\",\n    value: function create(element) {\n      var deferCaptureElements = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      return new FocusTrap(element, this._checker, this._ngZone, this._document, deferCaptureElements);\n    }\n  }]);\n\n  return FocusTrapFactory;\n}();\n\nFocusTrapFactory.ɵfac = function FocusTrapFactory_Factory(t) {\n  return new (t || FocusTrapFactory)(i0.ɵɵinject(InteractivityChecker), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(DOCUMENT));\n};\n\nFocusTrapFactory.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: FocusTrapFactory,\n  factory: FocusTrapFactory.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FocusTrapFactory, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: InteractivityChecker\n    }, {\n      type: i0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/** Directive for trapping focus within a region. */\n\n\nvar CdkTrapFocus = /*#__PURE__*/function () {\n  function CdkTrapFocus(_elementRef, _focusTrapFactory,\n  /**\n   * @deprecated No longer being used. To be removed.\n   * @breaking-change 13.0.0\n   */\n  _document) {\n    _classCallCheck(this, CdkTrapFocus);\n\n    this._elementRef = _elementRef;\n    this._focusTrapFactory = _focusTrapFactory;\n    /** Previously focused element to restore focus to upon destroy when using autoCapture. */\n\n    this._previouslyFocusedElement = null;\n    this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);\n  }\n  /** Whether the focus trap is active. */\n\n\n  _createClass(CdkTrapFocus, [{\n    key: \"enabled\",\n    get: function get() {\n      return this.focusTrap.enabled;\n    },\n    set: function set(value) {\n      this.focusTrap.enabled = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the directive should automatically move focus into the trapped region upon\n     * initialization and return focus to the previous activeElement upon destruction.\n     */\n\n  }, {\n    key: \"autoCapture\",\n    get: function get() {\n      return this._autoCapture;\n    },\n    set: function set(value) {\n      this._autoCapture = coerceBooleanProperty(value);\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.focusTrap.destroy(); // If we stored a previously focused element when using autoCapture, return focus to that\n      // element now that the trapped region is being destroyed.\n\n      if (this._previouslyFocusedElement) {\n        this._previouslyFocusedElement.focus();\n\n        this._previouslyFocusedElement = null;\n      }\n    }\n  }, {\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      this.focusTrap.attachAnchors();\n\n      if (this.autoCapture) {\n        this._captureFocus();\n      }\n    }\n  }, {\n    key: \"ngDoCheck\",\n    value: function ngDoCheck() {\n      if (!this.focusTrap.hasAttached()) {\n        this.focusTrap.attachAnchors();\n      }\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      var autoCaptureChange = changes['autoCapture'];\n\n      if (autoCaptureChange && !autoCaptureChange.firstChange && this.autoCapture && this.focusTrap.hasAttached()) {\n        this._captureFocus();\n      }\n    }\n  }, {\n    key: \"_captureFocus\",\n    value: function _captureFocus() {\n      this._previouslyFocusedElement = _getFocusedElementPierceShadowDom();\n      this.focusTrap.focusInitialElementWhenReady();\n    }\n  }]);\n\n  return CdkTrapFocus;\n}();\n\nCdkTrapFocus.ɵfac = function CdkTrapFocus_Factory(t) {\n  return new (t || CdkTrapFocus)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(FocusTrapFactory), i0.ɵɵdirectiveInject(DOCUMENT));\n};\n\nCdkTrapFocus.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkTrapFocus,\n  selectors: [[\"\", \"cdkTrapFocus\", \"\"]],\n  inputs: {\n    enabled: [\"cdkTrapFocus\", \"enabled\"],\n    autoCapture: [\"cdkTrapFocusAutoCapture\", \"autoCapture\"]\n  },\n  exportAs: [\"cdkTrapFocus\"],\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkTrapFocus, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkTrapFocus]',\n      exportAs: 'cdkTrapFocus'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: FocusTrapFactory\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, {\n    enabled: [{\n      type: Input,\n      args: ['cdkTrapFocus']\n    }],\n    autoCapture: [{\n      type: Input,\n      args: ['cdkTrapFocusAutoCapture']\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Class that allows for trapping focus within a DOM element.\n *\n * This class uses a strategy pattern that determines how it traps focus.\n * See FocusTrapInertStrategy.\n */\n\n\nvar ConfigurableFocusTrap = /*#__PURE__*/function (_FocusTrap) {\n  _inherits(ConfigurableFocusTrap, _FocusTrap);\n\n  var _super3 = _createSuper(ConfigurableFocusTrap);\n\n  function ConfigurableFocusTrap(_element, _checker, _ngZone, _document, _focusTrapManager, _inertStrategy, config) {\n    var _this10;\n\n    _classCallCheck(this, ConfigurableFocusTrap);\n\n    _this10 = _super3.call(this, _element, _checker, _ngZone, _document, config.defer);\n    _this10._focusTrapManager = _focusTrapManager;\n    _this10._inertStrategy = _inertStrategy;\n\n    _this10._focusTrapManager.register(_assertThisInitialized(_this10));\n\n    return _this10;\n  }\n  /** Whether the FocusTrap is enabled. */\n\n\n  _createClass(ConfigurableFocusTrap, [{\n    key: \"enabled\",\n    get: function get() {\n      return this._enabled;\n    },\n    set: function set(value) {\n      this._enabled = value;\n\n      if (this._enabled) {\n        this._focusTrapManager.register(this);\n      } else {\n        this._focusTrapManager.deregister(this);\n      }\n    }\n    /** Notifies the FocusTrapManager that this FocusTrap will be destroyed. */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this._focusTrapManager.deregister(this);\n\n      _get(_getPrototypeOf(ConfigurableFocusTrap.prototype), \"destroy\", this).call(this);\n    }\n    /** @docs-private Implemented as part of ManagedFocusTrap. */\n\n  }, {\n    key: \"_enable\",\n    value: function _enable() {\n      this._inertStrategy.preventFocus(this);\n\n      this.toggleAnchors(true);\n    }\n    /** @docs-private Implemented as part of ManagedFocusTrap. */\n\n  }, {\n    key: \"_disable\",\n    value: function _disable() {\n      this._inertStrategy.allowFocus(this);\n\n      this.toggleAnchors(false);\n    }\n  }]);\n\n  return ConfigurableFocusTrap;\n}(FocusTrap);\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** The injection token used to specify the inert strategy. */\n\n\nvar FOCUS_TRAP_INERT_STRATEGY = new InjectionToken('FOCUS_TRAP_INERT_STRATEGY');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Lightweight FocusTrapInertStrategy that adds a document focus event\n * listener to redirect focus back inside the FocusTrap.\n */\n\nvar EventListenerFocusTrapInertStrategy = /*#__PURE__*/function () {\n  function EventListenerFocusTrapInertStrategy() {\n    _classCallCheck(this, EventListenerFocusTrapInertStrategy);\n\n    /** Focus event handler. */\n    this._listener = null;\n  }\n  /** Adds a document event listener that keeps focus inside the FocusTrap. */\n\n\n  _createClass(EventListenerFocusTrapInertStrategy, [{\n    key: \"preventFocus\",\n    value: function preventFocus(focusTrap) {\n      var _this11 = this;\n\n      // Ensure there's only one listener per document\n      if (this._listener) {\n        focusTrap._document.removeEventListener('focus', this._listener, true);\n      }\n\n      this._listener = function (e) {\n        return _this11._trapFocus(focusTrap, e);\n      };\n\n      focusTrap._ngZone.runOutsideAngular(function () {\n        focusTrap._document.addEventListener('focus', _this11._listener, true);\n      });\n    }\n    /** Removes the event listener added in preventFocus. */\n\n  }, {\n    key: \"allowFocus\",\n    value: function allowFocus(focusTrap) {\n      if (!this._listener) {\n        return;\n      }\n\n      focusTrap._document.removeEventListener('focus', this._listener, true);\n\n      this._listener = null;\n    }\n    /**\n     * Refocuses the first element in the FocusTrap if the focus event target was outside\n     * the FocusTrap.\n     *\n     * This is an event listener callback. The event listener is added in runOutsideAngular,\n     * so all this code runs outside Angular as well.\n     */\n\n  }, {\n    key: \"_trapFocus\",\n    value: function _trapFocus(focusTrap, event) {\n      var _a;\n\n      var target = event.target;\n      var focusTrapRoot = focusTrap._element; // Don't refocus if target was in an overlay, because the overlay might be associated\n      // with an element inside the FocusTrap, ex. mat-select.\n\n      if (target && !focusTrapRoot.contains(target) && !((_a = target.closest) === null || _a === void 0 ? void 0 : _a.call(target, 'div.cdk-overlay-pane'))) {\n        // Some legacy FocusTrap usages have logic that focuses some element on the page\n        // just before FocusTrap is destroyed. For backwards compatibility, wait\n        // to be sure FocusTrap is still enabled before refocusing.\n        setTimeout(function () {\n          // Check whether focus wasn't put back into the focus trap while the timeout was pending.\n          if (focusTrap.enabled && !focusTrapRoot.contains(focusTrap._document.activeElement)) {\n            focusTrap.focusFirstTabbableElement();\n          }\n        });\n      }\n    }\n  }]);\n\n  return EventListenerFocusTrapInertStrategy;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Injectable that ensures only the most recently enabled FocusTrap is active. */\n\n\nvar FocusTrapManager = /*#__PURE__*/function () {\n  function FocusTrapManager() {\n    _classCallCheck(this, FocusTrapManager);\n\n    // A stack of the FocusTraps on the page. Only the FocusTrap at the\n    // top of the stack is active.\n    this._focusTrapStack = [];\n  }\n  /**\n   * Disables the FocusTrap at the top of the stack, and then pushes\n   * the new FocusTrap onto the stack.\n   */\n\n\n  _createClass(FocusTrapManager, [{\n    key: \"register\",\n    value: function register(focusTrap) {\n      // Dedupe focusTraps that register multiple times.\n      this._focusTrapStack = this._focusTrapStack.filter(function (ft) {\n        return ft !== focusTrap;\n      });\n      var stack = this._focusTrapStack;\n\n      if (stack.length) {\n        stack[stack.length - 1]._disable();\n      }\n\n      stack.push(focusTrap);\n\n      focusTrap._enable();\n    }\n    /**\n     * Removes the FocusTrap from the stack, and activates the\n     * FocusTrap that is the new top of the stack.\n     */\n\n  }, {\n    key: \"deregister\",\n    value: function deregister(focusTrap) {\n      focusTrap._disable();\n\n      var stack = this._focusTrapStack;\n      var i = stack.indexOf(focusTrap);\n\n      if (i !== -1) {\n        stack.splice(i, 1);\n\n        if (stack.length) {\n          stack[stack.length - 1]._enable();\n        }\n      }\n    }\n  }]);\n\n  return FocusTrapManager;\n}();\n\nFocusTrapManager.ɵfac = function FocusTrapManager_Factory(t) {\n  return new (t || FocusTrapManager)();\n};\n\nFocusTrapManager.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: FocusTrapManager,\n  factory: FocusTrapManager.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FocusTrapManager, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Factory that allows easy instantiation of configurable focus traps. */\n\n\nvar ConfigurableFocusTrapFactory = /*#__PURE__*/function () {\n  function ConfigurableFocusTrapFactory(_checker, _ngZone, _focusTrapManager, _document, _inertStrategy) {\n    _classCallCheck(this, ConfigurableFocusTrapFactory);\n\n    this._checker = _checker;\n    this._ngZone = _ngZone;\n    this._focusTrapManager = _focusTrapManager;\n    this._document = _document; // TODO split up the strategies into different modules, similar to DateAdapter.\n\n    this._inertStrategy = _inertStrategy || new EventListenerFocusTrapInertStrategy();\n  }\n\n  _createClass(ConfigurableFocusTrapFactory, [{\n    key: \"create\",\n    value: function create(element) {\n      var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        defer: false\n      };\n      var configObject;\n\n      if (typeof config === 'boolean') {\n        configObject = {\n          defer: config\n        };\n      } else {\n        configObject = config;\n      }\n\n      return new ConfigurableFocusTrap(element, this._checker, this._ngZone, this._document, this._focusTrapManager, this._inertStrategy, configObject);\n    }\n  }]);\n\n  return ConfigurableFocusTrapFactory;\n}();\n\nConfigurableFocusTrapFactory.ɵfac = function ConfigurableFocusTrapFactory_Factory(t) {\n  return new (t || ConfigurableFocusTrapFactory)(i0.ɵɵinject(InteractivityChecker), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(FocusTrapManager), i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(FOCUS_TRAP_INERT_STRATEGY, 8));\n};\n\nConfigurableFocusTrapFactory.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ConfigurableFocusTrapFactory,\n  factory: ConfigurableFocusTrapFactory.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ConfigurableFocusTrapFactory, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: InteractivityChecker\n    }, {\n      type: i0.NgZone\n    }, {\n      type: FocusTrapManager\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [FOCUS_TRAP_INERT_STRATEGY]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Gets whether an event could be a faked `mousedown` event dispatched by a screen reader. */\n\n\nfunction isFakeMousedownFromScreenReader(event) {\n  // Some screen readers will dispatch a fake `mousedown` event when pressing enter or space on\n  // a clickable element. We can distinguish these events when both `offsetX` and `offsetY` are\n  // zero or `event.buttons` is zero, depending on the browser:\n  // - `event.buttons` works on Firefox, but fails on Chrome.\n  // - `offsetX` and `offsetY` work on Chrome, but fail on Firefox.\n  // Note that there's an edge case where the user could click the 0x0 spot of the\n  // screen themselves, but that is unlikely to contain interactive elements.\n  return event.buttons === 0 || event.offsetX === 0 && event.offsetY === 0;\n}\n/** Gets whether an event could be a faked `touchstart` event dispatched by a screen reader. */\n\n\nfunction isFakeTouchstartFromScreenReader(event) {\n  var touch = event.touches && event.touches[0] || event.changedTouches && event.changedTouches[0]; // A fake `touchstart` can be distinguished from a real one by looking at the `identifier`\n  // which is typically >= 0 on a real device versus -1 from a screen reader. Just to be safe,\n  // we can also look at `radiusX` and `radiusY`. This behavior was observed against a Windows 10\n  // device with a touch screen running NVDA v2020.4 and Firefox 85 or Chrome 88.\n\n  return !!touch && touch.identifier === -1 && (touch.radiusX == null || touch.radiusX === 1) && (touch.radiusY == null || touch.radiusY === 1);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Injectable options for the InputModalityDetector. These are shallowly merged with the default\n * options.\n */\n\n\nvar INPUT_MODALITY_DETECTOR_OPTIONS = new InjectionToken('cdk-input-modality-detector-options');\n/**\n * Default options for the InputModalityDetector.\n *\n * Modifier keys are ignored by default (i.e. when pressed won't cause the service to detect\n * keyboard input modality) for two reasons:\n *\n * 1. Modifier keys are commonly used with mouse to perform actions such as 'right click' or 'open\n *    in new tab', and are thus less representative of actual keyboard interaction.\n * 2. VoiceOver triggers some keyboard events when linearly navigating with Control + Option (but\n *    confusingly not with Caps Lock). Thus, to have parity with other screen readers, we ignore\n *    these keys so as to not update the input modality.\n *\n * Note that we do not by default ignore the right Meta key on Safari because it has the same key\n * code as the ContextMenu key on other browsers. When we switch to using event.key, we can\n * distinguish between the two.\n */\n\nvar INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS = {\n  ignoreKeys: [ALT, CONTROL, MAC_META, META, SHIFT]\n};\n/**\n * The amount of time needed to pass after a touchstart event in order for a subsequent mousedown\n * event to be attributed as mouse and not touch.\n *\n * This is the value used by AngularJS Material. Through trial and error (on iPhone 6S) they found\n * that a value of around 650ms seems appropriate.\n */\n\nvar TOUCH_BUFFER_MS = 650;\n/**\n * Event listener options that enable capturing and also mark the listener as passive if the browser\n * supports it.\n */\n\nvar modalityEventListenerOptions = normalizePassiveListenerOptions({\n  passive: true,\n  capture: true\n});\n/**\n * Service that detects the user's input modality.\n *\n * This service does not update the input modality when a user navigates with a screen reader\n * (e.g. linear navigation with VoiceOver, object navigation / browse mode with NVDA, virtual PC\n * cursor mode with JAWS). This is in part due to technical limitations (i.e. keyboard events do not\n * fire as expected in these modes) but is also arguably the correct behavior. Navigating with a\n * screen reader is akin to visually scanning a page, and should not be interpreted as actual user\n * input interaction.\n *\n * When a user is not navigating but *interacting* with a screen reader, this service attempts to\n * update the input modality to keyboard, but in general this service's behavior is largely\n * undefined.\n */\n\nvar InputModalityDetector = /*#__PURE__*/function () {\n  function InputModalityDetector(_platform, ngZone, document, options) {\n    var _this12 = this;\n\n    _classCallCheck(this, InputModalityDetector);\n\n    this._platform = _platform;\n    /**\n     * The most recently detected input modality event target. Is null if no input modality has been\n     * detected or if the associated event target is null for some unknown reason.\n     */\n\n    this._mostRecentTarget = null;\n    /** The underlying BehaviorSubject that emits whenever an input modality is detected. */\n\n    this._modality = new BehaviorSubject(null);\n    /**\n     * The timestamp of the last touch input modality. Used to determine whether mousedown events\n     * should be attributed to mouse or touch.\n     */\n\n    this._lastTouchMs = 0;\n    /**\n     * Handles keydown events. Must be an arrow function in order to preserve the context when it gets\n     * bound.\n     */\n\n    this._onKeydown = function (event) {\n      var _a, _b; // If this is one of the keys we should ignore, then ignore it and don't update the input\n      // modality to keyboard.\n\n\n      if ((_b = (_a = _this12._options) === null || _a === void 0 ? void 0 : _a.ignoreKeys) === null || _b === void 0 ? void 0 : _b.some(function (keyCode) {\n        return keyCode === event.keyCode;\n      })) {\n        return;\n      }\n\n      _this12._modality.next('keyboard');\n\n      _this12._mostRecentTarget = _getEventTarget(event);\n    };\n    /**\n     * Handles mousedown events. Must be an arrow function in order to preserve the context when it\n     * gets bound.\n     */\n\n\n    this._onMousedown = function (event) {\n      // Touches trigger both touch and mouse events, so we need to distinguish between mouse events\n      // that were triggered via mouse vs touch. To do so, check if the mouse event occurs closely\n      // after the previous touch event.\n      if (Date.now() - _this12._lastTouchMs < TOUCH_BUFFER_MS) {\n        return;\n      } // Fake mousedown events are fired by some screen readers when controls are activated by the\n      // screen reader. Attribute them to keyboard input modality.\n\n\n      _this12._modality.next(isFakeMousedownFromScreenReader(event) ? 'keyboard' : 'mouse');\n\n      _this12._mostRecentTarget = _getEventTarget(event);\n    };\n    /**\n     * Handles touchstart events. Must be an arrow function in order to preserve the context when it\n     * gets bound.\n     */\n\n\n    this._onTouchstart = function (event) {\n      // Same scenario as mentioned in _onMousedown, but on touch screen devices, fake touchstart\n      // events are fired. Again, attribute to keyboard input modality.\n      if (isFakeTouchstartFromScreenReader(event)) {\n        _this12._modality.next('keyboard');\n\n        return;\n      } // Store the timestamp of this touch event, as it's used to distinguish between mouse events\n      // triggered via mouse vs touch.\n\n\n      _this12._lastTouchMs = Date.now();\n\n      _this12._modality.next('touch');\n\n      _this12._mostRecentTarget = _getEventTarget(event);\n    };\n\n    this._options = Object.assign(Object.assign({}, INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS), options); // Skip the first emission as it's null.\n\n    this.modalityDetected = this._modality.pipe(skip(1));\n    this.modalityChanged = this.modalityDetected.pipe(distinctUntilChanged()); // If we're not in a browser, this service should do nothing, as there's no relevant input\n    // modality to detect.\n\n    if (_platform.isBrowser) {\n      ngZone.runOutsideAngular(function () {\n        document.addEventListener('keydown', _this12._onKeydown, modalityEventListenerOptions);\n        document.addEventListener('mousedown', _this12._onMousedown, modalityEventListenerOptions);\n        document.addEventListener('touchstart', _this12._onTouchstart, modalityEventListenerOptions);\n      });\n    }\n  }\n  /** The most recently detected input modality. */\n\n\n  _createClass(InputModalityDetector, [{\n    key: \"mostRecentModality\",\n    get: function get() {\n      return this._modality.value;\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._modality.complete();\n\n      if (this._platform.isBrowser) {\n        document.removeEventListener('keydown', this._onKeydown, modalityEventListenerOptions);\n        document.removeEventListener('mousedown', this._onMousedown, modalityEventListenerOptions);\n        document.removeEventListener('touchstart', this._onTouchstart, modalityEventListenerOptions);\n      }\n    }\n  }]);\n\n  return InputModalityDetector;\n}();\n\nInputModalityDetector.ɵfac = function InputModalityDetector_Factory(t) {\n  return new (t || InputModalityDetector)(i0.ɵɵinject(i1.Platform), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(INPUT_MODALITY_DETECTOR_OPTIONS, 8));\n};\n\nInputModalityDetector.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: InputModalityDetector,\n  factory: InputModalityDetector.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(InputModalityDetector, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.Platform\n    }, {\n      type: i0.NgZone\n    }, {\n      type: Document,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [INPUT_MODALITY_DETECTOR_OPTIONS]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar LIVE_ANNOUNCER_ELEMENT_TOKEN = new InjectionToken('liveAnnouncerElement', {\n  providedIn: 'root',\n  factory: LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY\n});\n/** @docs-private */\n\nfunction LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY() {\n  return null;\n}\n/** Injection token that can be used to configure the default options for the LiveAnnouncer. */\n\n\nvar LIVE_ANNOUNCER_DEFAULT_OPTIONS = new InjectionToken('LIVE_ANNOUNCER_DEFAULT_OPTIONS');\n\nvar LiveAnnouncer = /*#__PURE__*/function () {\n  function LiveAnnouncer(elementToken, _ngZone, _document, _defaultOptions) {\n    _classCallCheck(this, LiveAnnouncer);\n\n    this._ngZone = _ngZone;\n    this._defaultOptions = _defaultOptions; // We inject the live element and document as `any` because the constructor signature cannot\n    // reference browser globals (HTMLElement, Document) on non-browser environments, since having\n    // a class decorator causes TypeScript to preserve the constructor signature types.\n\n    this._document = _document;\n    this._liveElement = elementToken || this._createLiveElement();\n  }\n\n  _createClass(LiveAnnouncer, [{\n    key: \"announce\",\n    value: function announce(message) {\n      var _this13 = this;\n\n      var defaultOptions = this._defaultOptions;\n      var politeness;\n      var duration;\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      if (args.length === 1 && typeof args[0] === 'number') {\n        duration = args[0];\n      } else {\n        politeness = args[0];\n        duration = args[1];\n      }\n\n      this.clear();\n      clearTimeout(this._previousTimeout);\n\n      if (!politeness) {\n        politeness = defaultOptions && defaultOptions.politeness ? defaultOptions.politeness : 'polite';\n      }\n\n      if (duration == null && defaultOptions) {\n        duration = defaultOptions.duration;\n      } // TODO: ensure changing the politeness works on all environments we support.\n\n\n      this._liveElement.setAttribute('aria-live', politeness); // This 100ms timeout is necessary for some browser + screen-reader combinations:\n      // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.\n      // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a\n      //   second time without clearing and then using a non-zero delay.\n      // (using JAWS 17 at time of this writing).\n\n\n      return this._ngZone.runOutsideAngular(function () {\n        if (!_this13._currentPromise) {\n          _this13._currentPromise = new Promise(function (resolve) {\n            return _this13._currentResolve = resolve;\n          });\n        }\n\n        clearTimeout(_this13._previousTimeout);\n        _this13._previousTimeout = setTimeout(function () {\n          _this13._liveElement.textContent = message;\n\n          if (typeof duration === 'number') {\n            _this13._previousTimeout = setTimeout(function () {\n              return _this13.clear();\n            }, duration);\n          }\n\n          _this13._currentResolve();\n\n          _this13._currentPromise = _this13._currentResolve = undefined;\n        }, 100);\n        return _this13._currentPromise;\n      });\n    }\n    /**\n     * Clears the current text from the announcer element. Can be used to prevent\n     * screen readers from reading the text out again while the user is going\n     * through the page landmarks.\n     */\n\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      if (this._liveElement) {\n        this._liveElement.textContent = '';\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      var _a, _b;\n\n      clearTimeout(this._previousTimeout);\n      (_a = this._liveElement) === null || _a === void 0 ? void 0 : _a.remove();\n      this._liveElement = null;\n      (_b = this._currentResolve) === null || _b === void 0 ? void 0 : _b.call(this);\n      this._currentPromise = this._currentResolve = undefined;\n    }\n  }, {\n    key: \"_createLiveElement\",\n    value: function _createLiveElement() {\n      var elementClass = 'cdk-live-announcer-element';\n\n      var previousElements = this._document.getElementsByClassName(elementClass);\n\n      var liveEl = this._document.createElement('div'); // Remove any old containers. This can happen when coming in from a server-side-rendered page.\n\n\n      for (var i = 0; i < previousElements.length; i++) {\n        previousElements[i].remove();\n      }\n\n      liveEl.classList.add(elementClass);\n      liveEl.classList.add('cdk-visually-hidden');\n      liveEl.setAttribute('aria-atomic', 'true');\n      liveEl.setAttribute('aria-live', 'polite');\n\n      this._document.body.appendChild(liveEl);\n\n      return liveEl;\n    }\n  }]);\n\n  return LiveAnnouncer;\n}();\n\nLiveAnnouncer.ɵfac = function LiveAnnouncer_Factory(t) {\n  return new (t || LiveAnnouncer)(i0.ɵɵinject(LIVE_ANNOUNCER_ELEMENT_TOKEN, 8), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(LIVE_ANNOUNCER_DEFAULT_OPTIONS, 8));\n};\n\nLiveAnnouncer.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: LiveAnnouncer,\n  factory: LiveAnnouncer.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LiveAnnouncer, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [LIVE_ANNOUNCER_ELEMENT_TOKEN]\n      }]\n    }, {\n      type: i0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [LIVE_ANNOUNCER_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, null);\n})();\n/**\n * A directive that works similarly to aria-live, but uses the LiveAnnouncer to ensure compatibility\n * with a wider range of browsers and screen readers.\n */\n\n\nvar CdkAriaLive = /*#__PURE__*/function () {\n  function CdkAriaLive(_elementRef, _liveAnnouncer, _contentObserver, _ngZone) {\n    _classCallCheck(this, CdkAriaLive);\n\n    this._elementRef = _elementRef;\n    this._liveAnnouncer = _liveAnnouncer;\n    this._contentObserver = _contentObserver;\n    this._ngZone = _ngZone;\n    this._politeness = 'polite';\n  }\n  /** The aria-live politeness level to use when announcing messages. */\n\n\n  _createClass(CdkAriaLive, [{\n    key: \"politeness\",\n    get: function get() {\n      return this._politeness;\n    },\n    set: function set(value) {\n      var _this14 = this;\n\n      this._politeness = value === 'off' || value === 'assertive' ? value : 'polite';\n\n      if (this._politeness === 'off') {\n        if (this._subscription) {\n          this._subscription.unsubscribe();\n\n          this._subscription = null;\n        }\n      } else if (!this._subscription) {\n        this._subscription = this._ngZone.runOutsideAngular(function () {\n          return _this14._contentObserver.observe(_this14._elementRef).subscribe(function () {\n            // Note that we use textContent here, rather than innerText, in order to avoid a reflow.\n            var elementText = _this14._elementRef.nativeElement.textContent; // The `MutationObserver` fires also for attribute\n            // changes which we don't want to announce.\n\n            if (elementText !== _this14._previousAnnouncedText) {\n              _this14._liveAnnouncer.announce(elementText, _this14._politeness, _this14.duration);\n\n              _this14._previousAnnouncedText = elementText;\n            }\n          });\n        });\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this._subscription) {\n        this._subscription.unsubscribe();\n      }\n    }\n  }]);\n\n  return CdkAriaLive;\n}();\n\nCdkAriaLive.ɵfac = function CdkAriaLive_Factory(t) {\n  return new (t || CdkAriaLive)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(LiveAnnouncer), i0.ɵɵdirectiveInject(i1$1.ContentObserver), i0.ɵɵdirectiveInject(i0.NgZone));\n};\n\nCdkAriaLive.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkAriaLive,\n  selectors: [[\"\", \"cdkAriaLive\", \"\"]],\n  inputs: {\n    politeness: [\"cdkAriaLive\", \"politeness\"],\n    duration: [\"cdkAriaLiveDuration\", \"duration\"]\n  },\n  exportAs: [\"cdkAriaLive\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkAriaLive, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkAriaLive]',\n      exportAs: 'cdkAriaLive'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: LiveAnnouncer\n    }, {\n      type: i1$1.ContentObserver\n    }, {\n      type: i0.NgZone\n    }];\n  }, {\n    politeness: [{\n      type: Input,\n      args: ['cdkAriaLive']\n    }],\n    duration: [{\n      type: Input,\n      args: ['cdkAriaLiveDuration']\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** InjectionToken for FocusMonitorOptions. */\n\n\nvar FOCUS_MONITOR_DEFAULT_OPTIONS = new InjectionToken('cdk-focus-monitor-default-options');\n/**\n * Event listener options that enable capturing and also\n * mark the listener as passive if the browser supports it.\n */\n\nvar captureEventListenerOptions = normalizePassiveListenerOptions({\n  passive: true,\n  capture: true\n});\n/** Monitors mouse and keyboard events to determine the cause of focus events. */\n\nvar FocusMonitor = /*#__PURE__*/function () {\n  function FocusMonitor(_ngZone, _platform, _inputModalityDetector,\n  /** @breaking-change 11.0.0 make document required */\n  document, options) {\n    var _this15 = this;\n\n    _classCallCheck(this, FocusMonitor);\n\n    this._ngZone = _ngZone;\n    this._platform = _platform;\n    this._inputModalityDetector = _inputModalityDetector;\n    /** The focus origin that the next focus event is a result of. */\n\n    this._origin = null;\n    /** Whether the window has just been focused. */\n\n    this._windowFocused = false;\n    /**\n     * Whether the origin was determined via a touch interaction. Necessary as properly attributing\n     * focus events to touch interactions requires special logic.\n     */\n\n    this._originFromTouchInteraction = false;\n    /** Map of elements being monitored to their info. */\n\n    this._elementInfo = new Map();\n    /** The number of elements currently being monitored. */\n\n    this._monitoredElementCount = 0;\n    /**\n     * Keeps track of the root nodes to which we've currently bound a focus/blur handler,\n     * as well as the number of monitored elements that they contain. We have to treat focus/blur\n     * handlers differently from the rest of the events, because the browser won't emit events\n     * to the document when focus moves inside of a shadow root.\n     */\n\n    this._rootNodeFocusListenerCount = new Map();\n    /**\n     * Event listener for `focus` events on the window.\n     * Needs to be an arrow function in order to preserve the context when it gets bound.\n     */\n\n    this._windowFocusListener = function () {\n      // Make a note of when the window regains focus, so we can\n      // restore the origin info for the focused element.\n      _this15._windowFocused = true;\n      _this15._windowFocusTimeoutId = window.setTimeout(function () {\n        return _this15._windowFocused = false;\n      });\n    };\n    /** Subject for stopping our InputModalityDetector subscription. */\n\n\n    this._stopInputModalityDetector = new Subject();\n    /**\n     * Event listener for `focus` and 'blur' events on the document.\n     * Needs to be an arrow function in order to preserve the context when it gets bound.\n     */\n\n    this._rootNodeFocusAndBlurListener = function (event) {\n      var target = _getEventTarget(event); // We need to walk up the ancestor chain in order to support `checkChildren`.\n\n\n      for (var element = target; element; element = element.parentElement) {\n        if (event.type === 'focus') {\n          _this15._onFocus(event, element);\n        } else {\n          _this15._onBlur(event, element);\n        }\n      }\n    };\n\n    this._document = document;\n    this._detectionMode = (options === null || options === void 0 ? void 0 : options.detectionMode) || 0\n    /* FocusMonitorDetectionMode.IMMEDIATE */\n    ;\n  }\n\n  _createClass(FocusMonitor, [{\n    key: \"monitor\",\n    value: function monitor(element) {\n      var checkChildren = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var nativeElement = coerceElement(element); // Do nothing if we're not on the browser platform or the passed in node isn't an element.\n\n      if (!this._platform.isBrowser || nativeElement.nodeType !== 1) {\n        return of(null);\n      } // If the element is inside the shadow DOM, we need to bind our focus/blur listeners to\n      // the shadow root, rather than the `document`, because the browser won't emit focus events\n      // to the `document`, if focus is moving within the same shadow root.\n\n\n      var rootNode = _getShadowRoot(nativeElement) || this._getDocument();\n\n      var cachedInfo = this._elementInfo.get(nativeElement); // Check if we're already monitoring this element.\n\n\n      if (cachedInfo) {\n        if (checkChildren) {\n          // TODO(COMP-318): this can be problematic, because it'll turn all non-checkChildren\n          // observers into ones that behave as if `checkChildren` was turned on. We need a more\n          // robust solution.\n          cachedInfo.checkChildren = true;\n        }\n\n        return cachedInfo.subject;\n      } // Create monitored element info.\n\n\n      var info = {\n        checkChildren: checkChildren,\n        subject: new Subject(),\n        rootNode: rootNode\n      };\n\n      this._elementInfo.set(nativeElement, info);\n\n      this._registerGlobalListeners(info);\n\n      return info.subject;\n    }\n  }, {\n    key: \"stopMonitoring\",\n    value: function stopMonitoring(element) {\n      var nativeElement = coerceElement(element);\n\n      var elementInfo = this._elementInfo.get(nativeElement);\n\n      if (elementInfo) {\n        elementInfo.subject.complete();\n\n        this._setClasses(nativeElement);\n\n        this._elementInfo.delete(nativeElement);\n\n        this._removeGlobalListeners(elementInfo);\n      }\n    }\n  }, {\n    key: \"focusVia\",\n    value: function focusVia(element, origin, options) {\n      var _this16 = this;\n\n      var nativeElement = coerceElement(element);\n\n      var focusedElement = this._getDocument().activeElement; // If the element is focused already, calling `focus` again won't trigger the event listener\n      // which means that the focus classes won't be updated. If that's the case, update the classes\n      // directly without waiting for an event.\n\n\n      if (nativeElement === focusedElement) {\n        this._getClosestElementsInfo(nativeElement).forEach(function (_ref) {\n          var _ref2 = _slicedToArray(_ref, 2),\n              currentElement = _ref2[0],\n              info = _ref2[1];\n\n          return _this16._originChanged(currentElement, origin, info);\n        });\n      } else {\n        this._setOrigin(origin); // `focus` isn't available on the server\n\n\n        if (typeof nativeElement.focus === 'function') {\n          nativeElement.focus(options);\n        }\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      var _this17 = this;\n\n      this._elementInfo.forEach(function (_info, element) {\n        return _this17.stopMonitoring(element);\n      });\n    }\n    /** Access injected document if available or fallback to global document reference */\n\n  }, {\n    key: \"_getDocument\",\n    value: function _getDocument() {\n      return this._document || document;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n\n  }, {\n    key: \"_getWindow\",\n    value: function _getWindow() {\n      var doc = this._getDocument();\n\n      return doc.defaultView || window;\n    }\n  }, {\n    key: \"_getFocusOrigin\",\n    value: function _getFocusOrigin(focusEventTarget) {\n      if (this._origin) {\n        // If the origin was realized via a touch interaction, we need to perform additional checks\n        // to determine whether the focus origin should be attributed to touch or program.\n        if (this._originFromTouchInteraction) {\n          return this._shouldBeAttributedToTouch(focusEventTarget) ? 'touch' : 'program';\n        } else {\n          return this._origin;\n        }\n      } // If the window has just regained focus, we can restore the most recent origin from before the\n      // window blurred. Otherwise, we've reached the point where we can't identify the source of the\n      // focus. This typically means one of two things happened:\n      //\n      // 1) The element was programmatically focused, or\n      // 2) The element was focused via screen reader navigation (which generally doesn't fire\n      //    events).\n      //\n      // Because we can't distinguish between these two cases, we default to setting `program`.\n\n\n      if (this._windowFocused && this._lastFocusOrigin) {\n        return this._lastFocusOrigin;\n      } // If the interaction is coming from an input label, we consider it a mouse interactions.\n      // This is a special case where focus moves on `click`, rather than `mousedown` which breaks\n      // our detection, because all our assumptions are for `mousedown`. We need to handle this\n      // special case, because it's very common for checkboxes and radio buttons.\n\n\n      if (focusEventTarget && this._isLastInteractionFromInputLabel(focusEventTarget)) {\n        return 'mouse';\n      }\n\n      return 'program';\n    }\n    /**\n     * Returns whether the focus event should be attributed to touch. Recall that in IMMEDIATE mode, a\n     * touch origin isn't immediately reset at the next tick (see _setOrigin). This means that when we\n     * handle a focus event following a touch interaction, we need to determine whether (1) the focus\n     * event was directly caused by the touch interaction or (2) the focus event was caused by a\n     * subsequent programmatic focus call triggered by the touch interaction.\n     * @param focusEventTarget The target of the focus event under examination.\n     */\n\n  }, {\n    key: \"_shouldBeAttributedToTouch\",\n    value: function _shouldBeAttributedToTouch(focusEventTarget) {\n      // Please note that this check is not perfect. Consider the following edge case:\n      //\n      // <div #parent tabindex=\"0\">\n      //   <div #child tabindex=\"0\" (click)=\"#parent.focus()\"></div>\n      // </div>\n      //\n      // Suppose there is a FocusMonitor in IMMEDIATE mode attached to #parent. When the user touches\n      // #child, #parent is programmatically focused. This code will attribute the focus to touch\n      // instead of program. This is a relatively minor edge-case that can be worked around by using\n      // focusVia(parent, 'program') to focus #parent.\n      return this._detectionMode === 1\n      /* FocusMonitorDetectionMode.EVENTUAL */\n      || !!(focusEventTarget === null || focusEventTarget === void 0 ? void 0 : focusEventTarget.contains(this._inputModalityDetector._mostRecentTarget));\n    }\n    /**\n     * Sets the focus classes on the element based on the given focus origin.\n     * @param element The element to update the classes on.\n     * @param origin The focus origin.\n     */\n\n  }, {\n    key: \"_setClasses\",\n    value: function _setClasses(element, origin) {\n      element.classList.toggle('cdk-focused', !!origin);\n      element.classList.toggle('cdk-touch-focused', origin === 'touch');\n      element.classList.toggle('cdk-keyboard-focused', origin === 'keyboard');\n      element.classList.toggle('cdk-mouse-focused', origin === 'mouse');\n      element.classList.toggle('cdk-program-focused', origin === 'program');\n    }\n    /**\n     * Updates the focus origin. If we're using immediate detection mode, we schedule an async\n     * function to clear the origin at the end of a timeout. The duration of the timeout depends on\n     * the origin being set.\n     * @param origin The origin to set.\n     * @param isFromInteraction Whether we are setting the origin from an interaction event.\n     */\n\n  }, {\n    key: \"_setOrigin\",\n    value: function _setOrigin(origin) {\n      var _this18 = this;\n\n      var isFromInteraction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      this._ngZone.runOutsideAngular(function () {\n        _this18._origin = origin;\n        _this18._originFromTouchInteraction = origin === 'touch' && isFromInteraction; // If we're in IMMEDIATE mode, reset the origin at the next tick (or in `TOUCH_BUFFER_MS` ms\n        // for a touch event). We reset the origin at the next tick because Firefox focuses one tick\n        // after the interaction event. We wait `TOUCH_BUFFER_MS` ms before resetting the origin for\n        // a touch event because when a touch event is fired, the associated focus event isn't yet in\n        // the event queue. Before doing so, clear any pending timeouts.\n\n        if (_this18._detectionMode === 0\n        /* FocusMonitorDetectionMode.IMMEDIATE */\n        ) {\n          clearTimeout(_this18._originTimeoutId);\n          var ms = _this18._originFromTouchInteraction ? TOUCH_BUFFER_MS : 1;\n          _this18._originTimeoutId = setTimeout(function () {\n            return _this18._origin = null;\n          }, ms);\n        }\n      });\n    }\n    /**\n     * Handles focus events on a registered element.\n     * @param event The focus event.\n     * @param element The monitored element.\n     */\n\n  }, {\n    key: \"_onFocus\",\n    value: function _onFocus(event, element) {\n      // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent\n      // focus event affecting the monitored element. If we want to use the origin of the first event\n      // instead we should check for the cdk-focused class here and return if the element already has\n      // it. (This only matters for elements that have includesChildren = true).\n      // If we are not counting child-element-focus as focused, make sure that the event target is the\n      // monitored element itself.\n      var elementInfo = this._elementInfo.get(element);\n\n      var focusEventTarget = _getEventTarget(event);\n\n      if (!elementInfo || !elementInfo.checkChildren && element !== focusEventTarget) {\n        return;\n      }\n\n      this._originChanged(element, this._getFocusOrigin(focusEventTarget), elementInfo);\n    }\n    /**\n     * Handles blur events on a registered element.\n     * @param event The blur event.\n     * @param element The monitored element.\n     */\n\n  }, {\n    key: \"_onBlur\",\n    value: function _onBlur(event, element) {\n      // If we are counting child-element-focus as focused, make sure that we aren't just blurring in\n      // order to focus another child of the monitored element.\n      var elementInfo = this._elementInfo.get(element);\n\n      if (!elementInfo || elementInfo.checkChildren && event.relatedTarget instanceof Node && element.contains(event.relatedTarget)) {\n        return;\n      }\n\n      this._setClasses(element);\n\n      this._emitOrigin(elementInfo, null);\n    }\n  }, {\n    key: \"_emitOrigin\",\n    value: function _emitOrigin(info, origin) {\n      if (info.subject.observers.length) {\n        this._ngZone.run(function () {\n          return info.subject.next(origin);\n        });\n      }\n    }\n  }, {\n    key: \"_registerGlobalListeners\",\n    value: function _registerGlobalListeners(elementInfo) {\n      var _this19 = this;\n\n      if (!this._platform.isBrowser) {\n        return;\n      }\n\n      var rootNode = elementInfo.rootNode;\n      var rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode) || 0;\n\n      if (!rootNodeFocusListeners) {\n        this._ngZone.runOutsideAngular(function () {\n          rootNode.addEventListener('focus', _this19._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n          rootNode.addEventListener('blur', _this19._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n        });\n      }\n\n      this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners + 1); // Register global listeners when first element is monitored.\n\n\n      if (++this._monitoredElementCount === 1) {\n        // Note: we listen to events in the capture phase so we\n        // can detect them even if the user stops propagation.\n        this._ngZone.runOutsideAngular(function () {\n          var window = _this19._getWindow();\n\n          window.addEventListener('focus', _this19._windowFocusListener);\n        }); // The InputModalityDetector is also just a collection of global listeners.\n\n\n        this._inputModalityDetector.modalityDetected.pipe(takeUntil(this._stopInputModalityDetector)).subscribe(function (modality) {\n          _this19._setOrigin(modality, true\n          /* isFromInteraction */\n          );\n        });\n      }\n    }\n  }, {\n    key: \"_removeGlobalListeners\",\n    value: function _removeGlobalListeners(elementInfo) {\n      var rootNode = elementInfo.rootNode;\n\n      if (this._rootNodeFocusListenerCount.has(rootNode)) {\n        var rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode);\n\n        if (rootNodeFocusListeners > 1) {\n          this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners - 1);\n        } else {\n          rootNode.removeEventListener('focus', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n          rootNode.removeEventListener('blur', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n\n          this._rootNodeFocusListenerCount.delete(rootNode);\n        }\n      } // Unregister global listeners when last element is unmonitored.\n\n\n      if (! --this._monitoredElementCount) {\n        var _window = this._getWindow();\n\n        _window.removeEventListener('focus', this._windowFocusListener); // Equivalently, stop our InputModalityDetector subscription.\n\n\n        this._stopInputModalityDetector.next(); // Clear timeouts for all potentially pending timeouts to prevent the leaks.\n\n\n        clearTimeout(this._windowFocusTimeoutId);\n        clearTimeout(this._originTimeoutId);\n      }\n    }\n    /** Updates all the state on an element once its focus origin has changed. */\n\n  }, {\n    key: \"_originChanged\",\n    value: function _originChanged(element, origin, elementInfo) {\n      this._setClasses(element, origin);\n\n      this._emitOrigin(elementInfo, origin);\n\n      this._lastFocusOrigin = origin;\n    }\n    /**\n     * Collects the `MonitoredElementInfo` of a particular element and\n     * all of its ancestors that have enabled `checkChildren`.\n     * @param element Element from which to start the search.\n     */\n\n  }, {\n    key: \"_getClosestElementsInfo\",\n    value: function _getClosestElementsInfo(element) {\n      var results = [];\n\n      this._elementInfo.forEach(function (info, currentElement) {\n        if (currentElement === element || info.checkChildren && currentElement.contains(element)) {\n          results.push([currentElement, info]);\n        }\n      });\n\n      return results;\n    }\n    /**\n     * Returns whether an interaction is likely to have come from the user clicking the `label` of\n     * an `input` or `textarea` in order to focus it.\n     * @param focusEventTarget Target currently receiving focus.\n     */\n\n  }, {\n    key: \"_isLastInteractionFromInputLabel\",\n    value: function _isLastInteractionFromInputLabel(focusEventTarget) {\n      var _this$_inputModalityD = this._inputModalityDetector,\n          mostRecentTarget = _this$_inputModalityD._mostRecentTarget,\n          mostRecentModality = _this$_inputModalityD.mostRecentModality; // If the last interaction used the mouse on an element contained by one of the labels\n      // of an `input`/`textarea` that is currently focused, it is very likely that the\n      // user redirected focus using the label.\n\n      if (mostRecentModality !== 'mouse' || !mostRecentTarget || mostRecentTarget === focusEventTarget || focusEventTarget.nodeName !== 'INPUT' && focusEventTarget.nodeName !== 'TEXTAREA' || focusEventTarget.disabled) {\n        return false;\n      }\n\n      var labels = focusEventTarget.labels;\n\n      if (labels) {\n        for (var i = 0; i < labels.length; i++) {\n          if (labels[i].contains(mostRecentTarget)) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    }\n  }]);\n\n  return FocusMonitor;\n}();\n\nFocusMonitor.ɵfac = function FocusMonitor_Factory(t) {\n  return new (t || FocusMonitor)(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1.Platform), i0.ɵɵinject(InputModalityDetector), i0.ɵɵinject(DOCUMENT, 8), i0.ɵɵinject(FOCUS_MONITOR_DEFAULT_OPTIONS, 8));\n};\n\nFocusMonitor.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: FocusMonitor,\n  factory: FocusMonitor.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FocusMonitor, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i0.NgZone\n    }, {\n      type: i1.Platform\n    }, {\n      type: InputModalityDetector\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [FOCUS_MONITOR_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, null);\n})();\n/**\n * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or\n * programmatically) and adds corresponding classes to the element.\n *\n * There are two variants of this directive:\n * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is\n *    focused.\n * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.\n */\n\n\nvar CdkMonitorFocus = /*#__PURE__*/function () {\n  function CdkMonitorFocus(_elementRef, _focusMonitor) {\n    _classCallCheck(this, CdkMonitorFocus);\n\n    this._elementRef = _elementRef;\n    this._focusMonitor = _focusMonitor;\n    this.cdkFocusChange = new EventEmitter();\n  }\n\n  _createClass(CdkMonitorFocus, [{\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      var _this20 = this;\n\n      var element = this._elementRef.nativeElement;\n      this._monitorSubscription = this._focusMonitor.monitor(element, element.nodeType === 1 && element.hasAttribute('cdkMonitorSubtreeFocus')).subscribe(function (origin) {\n        return _this20.cdkFocusChange.emit(origin);\n      });\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n\n      if (this._monitorSubscription) {\n        this._monitorSubscription.unsubscribe();\n      }\n    }\n  }]);\n\n  return CdkMonitorFocus;\n}();\n\nCdkMonitorFocus.ɵfac = function CdkMonitorFocus_Factory(t) {\n  return new (t || CdkMonitorFocus)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(FocusMonitor));\n};\n\nCdkMonitorFocus.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkMonitorFocus,\n  selectors: [[\"\", \"cdkMonitorElementFocus\", \"\"], [\"\", \"cdkMonitorSubtreeFocus\", \"\"]],\n  outputs: {\n    cdkFocusChange: \"cdkFocusChange\"\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkMonitorFocus, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: FocusMonitor\n    }];\n  }, {\n    cdkFocusChange: [{\n      type: Output\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** CSS class applied to the document body when in black-on-white high-contrast mode. */\n\n\nvar BLACK_ON_WHITE_CSS_CLASS = 'cdk-high-contrast-black-on-white';\n/** CSS class applied to the document body when in white-on-black high-contrast mode. */\n\nvar WHITE_ON_BLACK_CSS_CLASS = 'cdk-high-contrast-white-on-black';\n/** CSS class applied to the document body when in high-contrast mode. */\n\nvar HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS = 'cdk-high-contrast-active';\n/**\n * Service to determine whether the browser is currently in a high-contrast-mode environment.\n *\n * Microsoft Windows supports an accessibility feature called \"High Contrast Mode\". This mode\n * changes the appearance of all applications, including web applications, to dramatically increase\n * contrast.\n *\n * IE, Edge, and Firefox currently support this mode. Chrome does not support Windows High Contrast\n * Mode. This service does not detect high-contrast mode as added by the Chrome \"High Contrast\"\n * browser extension.\n */\n\nvar HighContrastModeDetector = /*#__PURE__*/function () {\n  function HighContrastModeDetector(_platform, document) {\n    var _this21 = this;\n\n    _classCallCheck(this, HighContrastModeDetector);\n\n    this._platform = _platform;\n    this._document = document;\n    this._breakpointSubscription = inject(BreakpointObserver).observe('(forced-colors: active)').subscribe(function () {\n      if (_this21._hasCheckedHighContrastMode) {\n        _this21._hasCheckedHighContrastMode = false;\n\n        _this21._applyBodyHighContrastModeCssClasses();\n      }\n    });\n  }\n  /** Gets the current high-contrast-mode for the page. */\n\n\n  _createClass(HighContrastModeDetector, [{\n    key: \"getHighContrastMode\",\n    value: function getHighContrastMode() {\n      if (!this._platform.isBrowser) {\n        return 0\n        /* HighContrastMode.NONE */\n        ;\n      } // Create a test element with an arbitrary background-color that is neither black nor\n      // white; high-contrast mode will coerce the color to either black or white. Also ensure that\n      // appending the test element to the DOM does not affect layout by absolutely positioning it\n\n\n      var testElement = this._document.createElement('div');\n\n      testElement.style.backgroundColor = 'rgb(1,2,3)';\n      testElement.style.position = 'absolute';\n\n      this._document.body.appendChild(testElement); // Get the computed style for the background color, collapsing spaces to normalize between\n      // browsers. Once we get this color, we no longer need the test element. Access the `window`\n      // via the document so we can fake it in tests. Note that we have extra null checks, because\n      // this logic will likely run during app bootstrap and throwing can break the entire app.\n\n\n      var documentWindow = this._document.defaultView || window;\n      var computedStyle = documentWindow && documentWindow.getComputedStyle ? documentWindow.getComputedStyle(testElement) : null;\n      var computedColor = (computedStyle && computedStyle.backgroundColor || '').replace(/ /g, '');\n      testElement.remove();\n\n      switch (computedColor) {\n        case 'rgb(0,0,0)':\n          return 2\n          /* HighContrastMode.WHITE_ON_BLACK */\n          ;\n\n        case 'rgb(255,255,255)':\n          return 1\n          /* HighContrastMode.BLACK_ON_WHITE */\n          ;\n      }\n\n      return 0\n      /* HighContrastMode.NONE */\n      ;\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._breakpointSubscription.unsubscribe();\n    }\n    /** Applies CSS classes indicating high-contrast mode to document body (browser-only). */\n\n  }, {\n    key: \"_applyBodyHighContrastModeCssClasses\",\n    value: function _applyBodyHighContrastModeCssClasses() {\n      if (!this._hasCheckedHighContrastMode && this._platform.isBrowser && this._document.body) {\n        var bodyClasses = this._document.body.classList;\n        bodyClasses.remove(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS, BLACK_ON_WHITE_CSS_CLASS, WHITE_ON_BLACK_CSS_CLASS);\n        this._hasCheckedHighContrastMode = true;\n        var mode = this.getHighContrastMode();\n\n        if (mode === 1\n        /* HighContrastMode.BLACK_ON_WHITE */\n        ) {\n          bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS, BLACK_ON_WHITE_CSS_CLASS);\n        } else if (mode === 2\n        /* HighContrastMode.WHITE_ON_BLACK */\n        ) {\n          bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS, WHITE_ON_BLACK_CSS_CLASS);\n        }\n      }\n    }\n  }]);\n\n  return HighContrastModeDetector;\n}();\n\nHighContrastModeDetector.ɵfac = function HighContrastModeDetector_Factory(t) {\n  return new (t || HighContrastModeDetector)(i0.ɵɵinject(i1.Platform), i0.ɵɵinject(DOCUMENT));\n};\n\nHighContrastModeDetector.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: HighContrastModeDetector,\n  factory: HighContrastModeDetector.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HighContrastModeDetector, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.Platform\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar A11yModule = /*#__PURE__*/_createClass(function A11yModule(highContrastModeDetector) {\n  _classCallCheck(this, A11yModule);\n\n  highContrastModeDetector._applyBodyHighContrastModeCssClasses();\n});\n\nA11yModule.ɵfac = function A11yModule_Factory(t) {\n  return new (t || A11yModule)(i0.ɵɵinject(HighContrastModeDetector));\n};\n\nA11yModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: A11yModule\n});\nA11yModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [ObserversModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(A11yModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ObserversModule],\n      declarations: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus],\n      exports: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus]\n    }]\n  }], function () {\n    return [{\n      type: HighContrastModeDetector\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { A11yModule, ActiveDescendantKeyManager, AriaDescriber, CDK_DESCRIBEDBY_HOST_ATTRIBUTE, CDK_DESCRIBEDBY_ID_PREFIX, CdkAriaLive, CdkMonitorFocus, CdkTrapFocus, ConfigurableFocusTrap, ConfigurableFocusTrapFactory, EventListenerFocusTrapInertStrategy, FOCUS_MONITOR_DEFAULT_OPTIONS, FOCUS_TRAP_INERT_STRATEGY, FocusKeyManager, FocusMonitor, FocusTrap, FocusTrapFactory, HighContrastModeDetector, INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS, INPUT_MODALITY_DETECTOR_OPTIONS, InputModalityDetector, InteractivityChecker, IsFocusableConfig, LIVE_ANNOUNCER_DEFAULT_OPTIONS, LIVE_ANNOUNCER_ELEMENT_TOKEN, LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY, ListKeyManager, LiveAnnouncer, MESSAGES_CONTAINER_ID, isFakeMousedownFromScreenReader, isFakeTouchstartFromScreenReader };","map":{"version":3,"names":["DOCUMENT","i0","inject","APP_ID","Injectable","Inject","QueryList","Directive","Input","InjectionToken","Optional","EventEmitter","Output","NgModule","i1","_getFocusedElementPierceShadowDom","normalizePassiveListenerOptions","_getEventTarget","_getShadowRoot","Subject","Subscription","BehaviorSubject","of","hasModifierKey","A","Z","ZERO","NINE","END","HOME","LEFT_ARROW","RIGHT_ARROW","UP_ARROW","DOWN_ARROW","TAB","ALT","CONTROL","MAC_META","META","SHIFT","tap","debounceTime","filter","map","take","skip","distinctUntilChanged","takeUntil","coerceBooleanProperty","coerceElement","i1$1","ObserversModule","BreakpointObserver","ID_DELIMITER","addAriaReferencedId","el","attr","id","ids","getAriaReferenceIds","some","existingId","trim","push","setAttribute","join","removeAriaReferencedId","filteredIds","val","length","removeAttribute","getAttribute","match","MESSAGES_CONTAINER_ID","CDK_DESCRIBEDBY_ID_PREFIX","CDK_DESCRIBEDBY_HOST_ATTRIBUTE","nextId","AriaDescriber","_document","_platform","_messageRegistry","Map","_messagesContainer","_id","hostElement","message","role","_canBeDescribed","key","getKey","setMessageId","set","messageElement","referenceCount","has","_createMessageElement","_isElementDescribedByMessage","_addMessageReference","_a","_isElementNode","_removeMessageReference","registeredMessage","get","_deleteMessageElement","childNodes","remove","describedElements","querySelectorAll","i","_removeCdkDescribedByReferenceIds","clear","createElement","textContent","_createMessagesContainer","appendChild","_b","delete","containerClassName","serverContainers","messagesContainer","style","visibility","classList","add","isBrowser","body","element","originalReferenceIds","indexOf","referenceIds","messageId","trimmedMessage","ariaLabel","nodeType","ELEMENT_NODE","ɵfac","Platform","ɵprov","type","args","providedIn","undefined","decorators","serviceId","ListKeyManager","_items","_activeItemIndex","_activeItem","_wrap","_letterKeyStream","_typeaheadSubscription","EMPTY","_vertical","_allowedModifierKeys","_homeAndEnd","_skipPredicateFn","item","disabled","_pressedLetters","tabOut","change","changes","subscribe","newItems","itemArray","toArray","newIndex","predicate","shouldWrap","enabled","direction","_horizontal","keys","debounceInterval","ngDevMode","getLabel","Error","unsubscribe","pipe","letter","inputString","items","_getItemsArray","index","toUpperCase","setActiveItem","previousActiveItem","updateActiveItem","next","event","keyCode","modifiers","isModifierAllowed","every","modifier","setNextItemActive","setPreviousItemActive","setFirstItemActive","setLastItemActive","toLocaleUpperCase","String","fromCharCode","preventDefault","_setActiveItemByIndex","_setActiveItemByDelta","activeItem","delta","_setActiveInWrapMode","_setActiveInDefaultMode","fallbackDelta","ActiveDescendantKeyManager","setInactiveStyles","setActiveStyles","FocusKeyManager","arguments","_origin","origin","focus","IsFocusableConfig","ignoreVisibility","InteractivityChecker","hasAttribute","hasGeometry","getComputedStyle","frameElement","getFrameElement","getWindow","getTabIndexValue","isVisible","nodeName","toLowerCase","tabIndexValue","WEBKIT","IOS","isPotentiallyTabbableIOS","FIREFOX","tabIndex","config","isPotentiallyFocusable","isDisabled","window","offsetWidth","offsetHeight","getClientRects","isNativeFormElement","isHiddenInput","isInputElement","isAnchorWithHref","isAnchorElement","hasValidTabIndex","isNaN","parseInt","inputType","node","ownerDocument","defaultView","FocusTrap","_element","_checker","_ngZone","deferAnchors","_hasAttached","startAnchorListener","focusLastTabbableElement","endAnchorListener","focusFirstTabbableElement","_enabled","attachAnchors","value","_startAnchor","_endAnchor","_toggleAnchorTabIndex","startAnchor","endAnchor","removeEventListener","runOutsideAngular","_createAnchor","addEventListener","parentNode","insertBefore","nextSibling","options","Promise","resolve","_executeOnStable","focusInitialElement","bound","markers","console","warn","_getFirstTabbableElement","_getLastTabbableElement","redirectToElement","querySelector","isFocusable","focusableChild","_getRegionBoundary","root","isTabbable","children","tabbableChild","anchor","isEnabled","fn","isStable","onStable","FocusTrapFactory","deferCaptureElements","NgZone","CdkTrapFocus","_elementRef","_focusTrapFactory","_previouslyFocusedElement","focusTrap","create","nativeElement","_autoCapture","destroy","autoCapture","_captureFocus","hasAttached","autoCaptureChange","firstChange","focusInitialElementWhenReady","ElementRef","ɵdir","selector","exportAs","ConfigurableFocusTrap","_focusTrapManager","_inertStrategy","defer","register","deregister","preventFocus","toggleAnchors","allowFocus","FOCUS_TRAP_INERT_STRATEGY","EventListenerFocusTrapInertStrategy","_listener","e","_trapFocus","target","focusTrapRoot","contains","closest","call","setTimeout","activeElement","FocusTrapManager","_focusTrapStack","ft","stack","_disable","_enable","splice","ConfigurableFocusTrapFactory","configObject","isFakeMousedownFromScreenReader","buttons","offsetX","offsetY","isFakeTouchstartFromScreenReader","touch","touches","changedTouches","identifier","radiusX","radiusY","INPUT_MODALITY_DETECTOR_OPTIONS","INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS","ignoreKeys","TOUCH_BUFFER_MS","modalityEventListenerOptions","passive","capture","InputModalityDetector","ngZone","document","_mostRecentTarget","_modality","_lastTouchMs","_onKeydown","_options","_onMousedown","Date","now","_onTouchstart","Object","assign","modalityDetected","modalityChanged","complete","Document","LIVE_ANNOUNCER_ELEMENT_TOKEN","factory","LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY","LIVE_ANNOUNCER_DEFAULT_OPTIONS","LiveAnnouncer","elementToken","_defaultOptions","_liveElement","_createLiveElement","defaultOptions","politeness","duration","clearTimeout","_previousTimeout","_currentPromise","_currentResolve","elementClass","previousElements","getElementsByClassName","liveEl","CdkAriaLive","_liveAnnouncer","_contentObserver","_politeness","_subscription","observe","elementText","_previousAnnouncedText","announce","ContentObserver","FOCUS_MONITOR_DEFAULT_OPTIONS","captureEventListenerOptions","FocusMonitor","_inputModalityDetector","_windowFocused","_originFromTouchInteraction","_elementInfo","_monitoredElementCount","_rootNodeFocusListenerCount","_windowFocusListener","_windowFocusTimeoutId","_stopInputModalityDetector","_rootNodeFocusAndBlurListener","parentElement","_onFocus","_onBlur","_detectionMode","detectionMode","checkChildren","rootNode","_getDocument","cachedInfo","subject","info","_registerGlobalListeners","elementInfo","_setClasses","_removeGlobalListeners","focusedElement","_getClosestElementsInfo","forEach","currentElement","_originChanged","_setOrigin","_info","stopMonitoring","doc","focusEventTarget","_shouldBeAttributedToTouch","_lastFocusOrigin","_isLastInteractionFromInputLabel","toggle","isFromInteraction","_originTimeoutId","ms","_getFocusOrigin","relatedTarget","Node","_emitOrigin","observers","run","rootNodeFocusListeners","_getWindow","modality","results","mostRecentTarget","mostRecentModality","labels","CdkMonitorFocus","_focusMonitor","cdkFocusChange","_monitorSubscription","monitor","emit","BLACK_ON_WHITE_CSS_CLASS","WHITE_ON_BLACK_CSS_CLASS","HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS","HighContrastModeDetector","_breakpointSubscription","_hasCheckedHighContrastMode","_applyBodyHighContrastModeCssClasses","testElement","backgroundColor","position","documentWindow","computedStyle","computedColor","replace","bodyClasses","mode","getHighContrastMode","A11yModule","highContrastModeDetector","ɵmod","ɵinj","imports","declarations","exports"],"sources":["/Users/selim/repo/eryaz/angular/node_modules/@angular/cdk/fesm2015/a11y.mjs"],"sourcesContent":["import { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { inject, APP_ID, Injectable, Inject, QueryList, Directive, Input, InjectionToken, Optional, EventEmitter, Output, NgModule } from '@angular/core';\nimport * as i1 from '@angular/cdk/platform';\nimport { _getFocusedElementPierceShadowDom, normalizePassiveListenerOptions, _getEventTarget, _getShadowRoot } from '@angular/cdk/platform';\nimport { Subject, Subscription, BehaviorSubject, of } from 'rxjs';\nimport { hasModifierKey, A, Z, ZERO, NINE, END, HOME, LEFT_ARROW, RIGHT_ARROW, UP_ARROW, DOWN_ARROW, TAB, ALT, CONTROL, MAC_META, META, SHIFT } from '@angular/cdk/keycodes';\nimport { tap, debounceTime, filter, map, take, skip, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { coerceBooleanProperty, coerceElement } from '@angular/cdk/coercion';\nimport * as i1$1 from '@angular/cdk/observers';\nimport { ObserversModule } from '@angular/cdk/observers';\nimport { BreakpointObserver } from '@angular/cdk/layout';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** IDs are delimited by an empty space, as per the spec. */\nconst ID_DELIMITER = ' ';\n/**\n * Adds the given ID to the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nfunction addAriaReferencedId(el, attr, id) {\n    const ids = getAriaReferenceIds(el, attr);\n    if (ids.some(existingId => existingId.trim() == id.trim())) {\n        return;\n    }\n    ids.push(id.trim());\n    el.setAttribute(attr, ids.join(ID_DELIMITER));\n}\n/**\n * Removes the given ID from the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nfunction removeAriaReferencedId(el, attr, id) {\n    const ids = getAriaReferenceIds(el, attr);\n    const filteredIds = ids.filter(val => val != id.trim());\n    if (filteredIds.length) {\n        el.setAttribute(attr, filteredIds.join(ID_DELIMITER));\n    }\n    else {\n        el.removeAttribute(attr);\n    }\n}\n/**\n * Gets the list of IDs referenced by the given ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nfunction getAriaReferenceIds(el, attr) {\n    // Get string array of all individual ids (whitespace delimited) in the attribute value\n    return (el.getAttribute(attr) || '').match(/\\S+/g) || [];\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * ID used for the body container where all messages are appended.\n * @deprecated No longer being used. To be removed.\n * @breaking-change 14.0.0\n */\nconst MESSAGES_CONTAINER_ID = 'cdk-describedby-message-container';\n/**\n * ID prefix used for each created message element.\n * @deprecated To be turned into a private variable.\n * @breaking-change 14.0.0\n */\nconst CDK_DESCRIBEDBY_ID_PREFIX = 'cdk-describedby-message';\n/**\n * Attribute given to each host element that is described by a message element.\n * @deprecated To be turned into a private variable.\n * @breaking-change 14.0.0\n */\nconst CDK_DESCRIBEDBY_HOST_ATTRIBUTE = 'cdk-describedby-host';\n/** Global incremental identifier for each registered message element. */\nlet nextId = 0;\n/**\n * Utility that creates visually hidden elements with a message content. Useful for elements that\n * want to use aria-describedby to further describe themselves without adding additional visual\n * content.\n */\nclass AriaDescriber {\n    constructor(_document, \n    /**\n     * @deprecated To be turned into a required parameter.\n     * @breaking-change 14.0.0\n     */\n    _platform) {\n        this._platform = _platform;\n        /** Map of all registered message elements that have been placed into the document. */\n        this._messageRegistry = new Map();\n        /** Container for all registered messages. */\n        this._messagesContainer = null;\n        /** Unique ID for the service. */\n        this._id = `${nextId++}`;\n        this._document = _document;\n        this._id = inject(APP_ID) + '-' + nextId++;\n    }\n    describe(hostElement, message, role) {\n        if (!this._canBeDescribed(hostElement, message)) {\n            return;\n        }\n        const key = getKey(message, role);\n        if (typeof message !== 'string') {\n            // We need to ensure that the element has an ID.\n            setMessageId(message, this._id);\n            this._messageRegistry.set(key, { messageElement: message, referenceCount: 0 });\n        }\n        else if (!this._messageRegistry.has(key)) {\n            this._createMessageElement(message, role);\n        }\n        if (!this._isElementDescribedByMessage(hostElement, key)) {\n            this._addMessageReference(hostElement, key);\n        }\n    }\n    removeDescription(hostElement, message, role) {\n        var _a;\n        if (!message || !this._isElementNode(hostElement)) {\n            return;\n        }\n        const key = getKey(message, role);\n        if (this._isElementDescribedByMessage(hostElement, key)) {\n            this._removeMessageReference(hostElement, key);\n        }\n        // If the message is a string, it means that it's one that we created for the\n        // consumer so we can remove it safely, otherwise we should leave it in place.\n        if (typeof message === 'string') {\n            const registeredMessage = this._messageRegistry.get(key);\n            if (registeredMessage && registeredMessage.referenceCount === 0) {\n                this._deleteMessageElement(key);\n            }\n        }\n        if (((_a = this._messagesContainer) === null || _a === void 0 ? void 0 : _a.childNodes.length) === 0) {\n            this._messagesContainer.remove();\n            this._messagesContainer = null;\n        }\n    }\n    /** Unregisters all created message elements and removes the message container. */\n    ngOnDestroy() {\n        var _a;\n        const describedElements = this._document.querySelectorAll(`[${CDK_DESCRIBEDBY_HOST_ATTRIBUTE}=\"${this._id}\"]`);\n        for (let i = 0; i < describedElements.length; i++) {\n            this._removeCdkDescribedByReferenceIds(describedElements[i]);\n            describedElements[i].removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n        }\n        (_a = this._messagesContainer) === null || _a === void 0 ? void 0 : _a.remove();\n        this._messagesContainer = null;\n        this._messageRegistry.clear();\n    }\n    /**\n     * Creates a new element in the visually hidden message container element with the message\n     * as its content and adds it to the message registry.\n     */\n    _createMessageElement(message, role) {\n        const messageElement = this._document.createElement('div');\n        setMessageId(messageElement, this._id);\n        messageElement.textContent = message;\n        if (role) {\n            messageElement.setAttribute('role', role);\n        }\n        this._createMessagesContainer();\n        this._messagesContainer.appendChild(messageElement);\n        this._messageRegistry.set(getKey(message, role), { messageElement, referenceCount: 0 });\n    }\n    /** Deletes the message element from the global messages container. */\n    _deleteMessageElement(key) {\n        var _a, _b;\n        (_b = (_a = this._messageRegistry.get(key)) === null || _a === void 0 ? void 0 : _a.messageElement) === null || _b === void 0 ? void 0 : _b.remove();\n        this._messageRegistry.delete(key);\n    }\n    /** Creates the global container for all aria-describedby messages. */\n    _createMessagesContainer() {\n        if (this._messagesContainer) {\n            return;\n        }\n        const containerClassName = 'cdk-describedby-message-container';\n        const serverContainers = this._document.querySelectorAll(`.${containerClassName}[platform=\"server\"]`);\n        for (let i = 0; i < serverContainers.length; i++) {\n            // When going from the server to the client, we may end up in a situation where there's\n            // already a container on the page, but we don't have a reference to it. Clear the\n            // old container so we don't get duplicates. Doing this, instead of emptying the previous\n            // container, should be slightly faster.\n            serverContainers[i].remove();\n        }\n        const messagesContainer = this._document.createElement('div');\n        // We add `visibility: hidden` in order to prevent text in this container from\n        // being searchable by the browser's Ctrl + F functionality.\n        // Screen-readers will still read the description for elements with aria-describedby even\n        // when the description element is not visible.\n        messagesContainer.style.visibility = 'hidden';\n        // Even though we use `visibility: hidden`, we still apply `cdk-visually-hidden` so that\n        // the description element doesn't impact page layout.\n        messagesContainer.classList.add(containerClassName);\n        messagesContainer.classList.add('cdk-visually-hidden');\n        // @breaking-change 14.0.0 Remove null check for `_platform`.\n        if (this._platform && !this._platform.isBrowser) {\n            messagesContainer.setAttribute('platform', 'server');\n        }\n        this._document.body.appendChild(messagesContainer);\n        this._messagesContainer = messagesContainer;\n    }\n    /** Removes all cdk-describedby messages that are hosted through the element. */\n    _removeCdkDescribedByReferenceIds(element) {\n        // Remove all aria-describedby reference IDs that are prefixed by CDK_DESCRIBEDBY_ID_PREFIX\n        const originalReferenceIds = getAriaReferenceIds(element, 'aria-describedby').filter(id => id.indexOf(CDK_DESCRIBEDBY_ID_PREFIX) != 0);\n        element.setAttribute('aria-describedby', originalReferenceIds.join(' '));\n    }\n    /**\n     * Adds a message reference to the element using aria-describedby and increments the registered\n     * message's reference count.\n     */\n    _addMessageReference(element, key) {\n        const registeredMessage = this._messageRegistry.get(key);\n        // Add the aria-describedby reference and set the\n        // describedby_host attribute to mark the element.\n        addAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n        element.setAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE, this._id);\n        registeredMessage.referenceCount++;\n    }\n    /**\n     * Removes a message reference from the element using aria-describedby\n     * and decrements the registered message's reference count.\n     */\n    _removeMessageReference(element, key) {\n        const registeredMessage = this._messageRegistry.get(key);\n        registeredMessage.referenceCount--;\n        removeAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n        element.removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n    }\n    /** Returns true if the element has been described by the provided message ID. */\n    _isElementDescribedByMessage(element, key) {\n        const referenceIds = getAriaReferenceIds(element, 'aria-describedby');\n        const registeredMessage = this._messageRegistry.get(key);\n        const messageId = registeredMessage && registeredMessage.messageElement.id;\n        return !!messageId && referenceIds.indexOf(messageId) != -1;\n    }\n    /** Determines whether a message can be described on a particular element. */\n    _canBeDescribed(element, message) {\n        if (!this._isElementNode(element)) {\n            return false;\n        }\n        if (message && typeof message === 'object') {\n            // We'd have to make some assumptions about the description element's text, if the consumer\n            // passed in an element. Assume that if an element is passed in, the consumer has verified\n            // that it can be used as a description.\n            return true;\n        }\n        const trimmedMessage = message == null ? '' : `${message}`.trim();\n        const ariaLabel = element.getAttribute('aria-label');\n        // We shouldn't set descriptions if they're exactly the same as the `aria-label` of the\n        // element, because screen readers will end up reading out the same text twice in a row.\n        return trimmedMessage ? !ariaLabel || ariaLabel.trim() !== trimmedMessage : false;\n    }\n    /** Checks whether a node is an Element node. */\n    _isElementNode(element) {\n        return element.nodeType === this._document.ELEMENT_NODE;\n    }\n}\nAriaDescriber.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: AriaDescriber, deps: [{ token: DOCUMENT }, { token: i1.Platform }], target: i0.ɵɵFactoryTarget.Injectable });\nAriaDescriber.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: AriaDescriber, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: AriaDescriber, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i1.Platform }];\n    } });\n/** Gets a key that can be used to look messages up in the registry. */\nfunction getKey(message, role) {\n    return typeof message === 'string' ? `${role || ''}/${message}` : message;\n}\n/** Assigns a unique ID to an element, if it doesn't have one already. */\nfunction setMessageId(element, serviceId) {\n    if (!element.id) {\n        element.id = `${CDK_DESCRIBEDBY_ID_PREFIX}-${serviceId}-${nextId++}`;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This class manages keyboard events for selectable lists. If you pass it a query list\n * of items, it will set the active item correctly when arrow events occur.\n */\nclass ListKeyManager {\n    constructor(_items) {\n        this._items = _items;\n        this._activeItemIndex = -1;\n        this._activeItem = null;\n        this._wrap = false;\n        this._letterKeyStream = new Subject();\n        this._typeaheadSubscription = Subscription.EMPTY;\n        this._vertical = true;\n        this._allowedModifierKeys = [];\n        this._homeAndEnd = false;\n        /**\n         * Predicate function that can be used to check whether an item should be skipped\n         * by the key manager. By default, disabled items are skipped.\n         */\n        this._skipPredicateFn = (item) => item.disabled;\n        // Buffer for the letters that the user has pressed when the typeahead option is turned on.\n        this._pressedLetters = [];\n        /**\n         * Stream that emits any time the TAB key is pressed, so components can react\n         * when focus is shifted off of the list.\n         */\n        this.tabOut = new Subject();\n        /** Stream that emits whenever the active item of the list manager changes. */\n        this.change = new Subject();\n        // We allow for the items to be an array because, in some cases, the consumer may\n        // not have access to a QueryList of the items they want to manage (e.g. when the\n        // items aren't being collected via `ViewChildren` or `ContentChildren`).\n        if (_items instanceof QueryList) {\n            _items.changes.subscribe((newItems) => {\n                if (this._activeItem) {\n                    const itemArray = newItems.toArray();\n                    const newIndex = itemArray.indexOf(this._activeItem);\n                    if (newIndex > -1 && newIndex !== this._activeItemIndex) {\n                        this._activeItemIndex = newIndex;\n                    }\n                }\n            });\n        }\n    }\n    /**\n     * Sets the predicate function that determines which items should be skipped by the\n     * list key manager.\n     * @param predicate Function that determines whether the given item should be skipped.\n     */\n    skipPredicate(predicate) {\n        this._skipPredicateFn = predicate;\n        return this;\n    }\n    /**\n     * Configures wrapping mode, which determines whether the active item will wrap to\n     * the other end of list when there are no more items in the given direction.\n     * @param shouldWrap Whether the list should wrap when reaching the end.\n     */\n    withWrap(shouldWrap = true) {\n        this._wrap = shouldWrap;\n        return this;\n    }\n    /**\n     * Configures whether the key manager should be able to move the selection vertically.\n     * @param enabled Whether vertical selection should be enabled.\n     */\n    withVerticalOrientation(enabled = true) {\n        this._vertical = enabled;\n        return this;\n    }\n    /**\n     * Configures the key manager to move the selection horizontally.\n     * Passing in `null` will disable horizontal movement.\n     * @param direction Direction in which the selection can be moved.\n     */\n    withHorizontalOrientation(direction) {\n        this._horizontal = direction;\n        return this;\n    }\n    /**\n     * Modifier keys which are allowed to be held down and whose default actions will be prevented\n     * as the user is pressing the arrow keys. Defaults to not allowing any modifier keys.\n     */\n    withAllowedModifierKeys(keys) {\n        this._allowedModifierKeys = keys;\n        return this;\n    }\n    /**\n     * Turns on typeahead mode which allows users to set the active item by typing.\n     * @param debounceInterval Time to wait after the last keystroke before setting the active item.\n     */\n    withTypeAhead(debounceInterval = 200) {\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n            this._items.length &&\n            this._items.some(item => typeof item.getLabel !== 'function')) {\n            throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');\n        }\n        this._typeaheadSubscription.unsubscribe();\n        // Debounce the presses of non-navigational keys, collect the ones that correspond to letters\n        // and convert those letters back into a string. Afterwards find the first item that starts\n        // with that string and select it.\n        this._typeaheadSubscription = this._letterKeyStream\n            .pipe(tap(letter => this._pressedLetters.push(letter)), debounceTime(debounceInterval), filter(() => this._pressedLetters.length > 0), map(() => this._pressedLetters.join('')))\n            .subscribe(inputString => {\n            const items = this._getItemsArray();\n            // Start at 1 because we want to start searching at the item immediately\n            // following the current active item.\n            for (let i = 1; i < items.length + 1; i++) {\n                const index = (this._activeItemIndex + i) % items.length;\n                const item = items[index];\n                if (!this._skipPredicateFn(item) &&\n                    item.getLabel().toUpperCase().trim().indexOf(inputString) === 0) {\n                    this.setActiveItem(index);\n                    break;\n                }\n            }\n            this._pressedLetters = [];\n        });\n        return this;\n    }\n    /**\n     * Configures the key manager to activate the first and last items\n     * respectively when the Home or End key is pressed.\n     * @param enabled Whether pressing the Home or End key activates the first/last item.\n     */\n    withHomeAndEnd(enabled = true) {\n        this._homeAndEnd = enabled;\n        return this;\n    }\n    setActiveItem(item) {\n        const previousActiveItem = this._activeItem;\n        this.updateActiveItem(item);\n        if (this._activeItem !== previousActiveItem) {\n            this.change.next(this._activeItemIndex);\n        }\n    }\n    /**\n     * Sets the active item depending on the key event passed in.\n     * @param event Keyboard event to be used for determining which element should be active.\n     */\n    onKeydown(event) {\n        const keyCode = event.keyCode;\n        const modifiers = ['altKey', 'ctrlKey', 'metaKey', 'shiftKey'];\n        const isModifierAllowed = modifiers.every(modifier => {\n            return !event[modifier] || this._allowedModifierKeys.indexOf(modifier) > -1;\n        });\n        switch (keyCode) {\n            case TAB:\n                this.tabOut.next();\n                return;\n            case DOWN_ARROW:\n                if (this._vertical && isModifierAllowed) {\n                    this.setNextItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case UP_ARROW:\n                if (this._vertical && isModifierAllowed) {\n                    this.setPreviousItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case RIGHT_ARROW:\n                if (this._horizontal && isModifierAllowed) {\n                    this._horizontal === 'rtl' ? this.setPreviousItemActive() : this.setNextItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case LEFT_ARROW:\n                if (this._horizontal && isModifierAllowed) {\n                    this._horizontal === 'rtl' ? this.setNextItemActive() : this.setPreviousItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case HOME:\n                if (this._homeAndEnd && isModifierAllowed) {\n                    this.setFirstItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case END:\n                if (this._homeAndEnd && isModifierAllowed) {\n                    this.setLastItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            default:\n                if (isModifierAllowed || hasModifierKey(event, 'shiftKey')) {\n                    // Attempt to use the `event.key` which also maps it to the user's keyboard language,\n                    // otherwise fall back to resolving alphanumeric characters via the keyCode.\n                    if (event.key && event.key.length === 1) {\n                        this._letterKeyStream.next(event.key.toLocaleUpperCase());\n                    }\n                    else if ((keyCode >= A && keyCode <= Z) || (keyCode >= ZERO && keyCode <= NINE)) {\n                        this._letterKeyStream.next(String.fromCharCode(keyCode));\n                    }\n                }\n                // Note that we return here, in order to avoid preventing\n                // the default action of non-navigational keys.\n                return;\n        }\n        this._pressedLetters = [];\n        event.preventDefault();\n    }\n    /** Index of the currently active item. */\n    get activeItemIndex() {\n        return this._activeItemIndex;\n    }\n    /** The active item. */\n    get activeItem() {\n        return this._activeItem;\n    }\n    /** Gets whether the user is currently typing into the manager using the typeahead feature. */\n    isTyping() {\n        return this._pressedLetters.length > 0;\n    }\n    /** Sets the active item to the first enabled item in the list. */\n    setFirstItemActive() {\n        this._setActiveItemByIndex(0, 1);\n    }\n    /** Sets the active item to the last enabled item in the list. */\n    setLastItemActive() {\n        this._setActiveItemByIndex(this._items.length - 1, -1);\n    }\n    /** Sets the active item to the next enabled item in the list. */\n    setNextItemActive() {\n        this._activeItemIndex < 0 ? this.setFirstItemActive() : this._setActiveItemByDelta(1);\n    }\n    /** Sets the active item to a previous enabled item in the list. */\n    setPreviousItemActive() {\n        this._activeItemIndex < 0 && this._wrap\n            ? this.setLastItemActive()\n            : this._setActiveItemByDelta(-1);\n    }\n    updateActiveItem(item) {\n        const itemArray = this._getItemsArray();\n        const index = typeof item === 'number' ? item : itemArray.indexOf(item);\n        const activeItem = itemArray[index];\n        // Explicitly check for `null` and `undefined` because other falsy values are valid.\n        this._activeItem = activeItem == null ? null : activeItem;\n        this._activeItemIndex = index;\n    }\n    /**\n     * This method sets the active item, given a list of items and the delta between the\n     * currently active item and the new active item. It will calculate differently\n     * depending on whether wrap mode is turned on.\n     */\n    _setActiveItemByDelta(delta) {\n        this._wrap ? this._setActiveInWrapMode(delta) : this._setActiveInDefaultMode(delta);\n    }\n    /**\n     * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\n     * down the list until it finds an item that is not disabled, and it will wrap if it\n     * encounters either end of the list.\n     */\n    _setActiveInWrapMode(delta) {\n        const items = this._getItemsArray();\n        for (let i = 1; i <= items.length; i++) {\n            const index = (this._activeItemIndex + delta * i + items.length) % items.length;\n            const item = items[index];\n            if (!this._skipPredicateFn(item)) {\n                this.setActiveItem(index);\n                return;\n            }\n        }\n    }\n    /**\n     * Sets the active item properly given the default mode. In other words, it will\n     * continue to move down the list until it finds an item that is not disabled. If\n     * it encounters either end of the list, it will stop and not wrap.\n     */\n    _setActiveInDefaultMode(delta) {\n        this._setActiveItemByIndex(this._activeItemIndex + delta, delta);\n    }\n    /**\n     * Sets the active item to the first enabled item starting at the index specified. If the\n     * item is disabled, it will move in the fallbackDelta direction until it either\n     * finds an enabled item or encounters the end of the list.\n     */\n    _setActiveItemByIndex(index, fallbackDelta) {\n        const items = this._getItemsArray();\n        if (!items[index]) {\n            return;\n        }\n        while (this._skipPredicateFn(items[index])) {\n            index += fallbackDelta;\n            if (!items[index]) {\n                return;\n            }\n        }\n        this.setActiveItem(index);\n    }\n    /** Returns the items as an array. */\n    _getItemsArray() {\n        return this._items instanceof QueryList ? this._items.toArray() : this._items;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass ActiveDescendantKeyManager extends ListKeyManager {\n    setActiveItem(index) {\n        if (this.activeItem) {\n            this.activeItem.setInactiveStyles();\n        }\n        super.setActiveItem(index);\n        if (this.activeItem) {\n            this.activeItem.setActiveStyles();\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass FocusKeyManager extends ListKeyManager {\n    constructor() {\n        super(...arguments);\n        this._origin = 'program';\n    }\n    /**\n     * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.\n     * @param origin Focus origin to be used when focusing items.\n     */\n    setFocusOrigin(origin) {\n        this._origin = origin;\n        return this;\n    }\n    setActiveItem(item) {\n        super.setActiveItem(item);\n        if (this.activeItem) {\n            this.activeItem.focus(this._origin);\n        }\n    }\n}\n\n/**\n * Configuration for the isFocusable method.\n */\nclass IsFocusableConfig {\n    constructor() {\n        /**\n         * Whether to count an element as focusable even if it is not currently visible.\n         */\n        this.ignoreVisibility = false;\n    }\n}\n// The InteractivityChecker leans heavily on the ally.js accessibility utilities.\n// Methods like `isTabbable` are only covering specific edge-cases for the browsers which are\n// supported.\n/**\n * Utility for checking the interactivity of an element, such as whether is is focusable or\n * tabbable.\n */\nclass InteractivityChecker {\n    constructor(_platform) {\n        this._platform = _platform;\n    }\n    /**\n     * Gets whether an element is disabled.\n     *\n     * @param element Element to be checked.\n     * @returns Whether the element is disabled.\n     */\n    isDisabled(element) {\n        // This does not capture some cases, such as a non-form control with a disabled attribute or\n        // a form control inside of a disabled form, but should capture the most common cases.\n        return element.hasAttribute('disabled');\n    }\n    /**\n     * Gets whether an element is visible for the purposes of interactivity.\n     *\n     * This will capture states like `display: none` and `visibility: hidden`, but not things like\n     * being clipped by an `overflow: hidden` parent or being outside the viewport.\n     *\n     * @returns Whether the element is visible.\n     */\n    isVisible(element) {\n        return hasGeometry(element) && getComputedStyle(element).visibility === 'visible';\n    }\n    /**\n     * Gets whether an element can be reached via Tab key.\n     * Assumes that the element has already been checked with isFocusable.\n     *\n     * @param element Element to be checked.\n     * @returns Whether the element is tabbable.\n     */\n    isTabbable(element) {\n        // Nothing is tabbable on the server 😎\n        if (!this._platform.isBrowser) {\n            return false;\n        }\n        const frameElement = getFrameElement(getWindow(element));\n        if (frameElement) {\n            // Frame elements inherit their tabindex onto all child elements.\n            if (getTabIndexValue(frameElement) === -1) {\n                return false;\n            }\n            // Browsers disable tabbing to an element inside of an invisible frame.\n            if (!this.isVisible(frameElement)) {\n                return false;\n            }\n        }\n        let nodeName = element.nodeName.toLowerCase();\n        let tabIndexValue = getTabIndexValue(element);\n        if (element.hasAttribute('contenteditable')) {\n            return tabIndexValue !== -1;\n        }\n        if (nodeName === 'iframe' || nodeName === 'object') {\n            // The frame or object's content may be tabbable depending on the content, but it's\n            // not possibly to reliably detect the content of the frames. We always consider such\n            // elements as non-tabbable.\n            return false;\n        }\n        // In iOS, the browser only considers some specific elements as tabbable.\n        if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {\n            return false;\n        }\n        if (nodeName === 'audio') {\n            // Audio elements without controls enabled are never tabbable, regardless\n            // of the tabindex attribute explicitly being set.\n            if (!element.hasAttribute('controls')) {\n                return false;\n            }\n            // Audio elements with controls are by default tabbable unless the\n            // tabindex attribute is set to `-1` explicitly.\n            return tabIndexValue !== -1;\n        }\n        if (nodeName === 'video') {\n            // For all video elements, if the tabindex attribute is set to `-1`, the video\n            // is not tabbable. Note: We cannot rely on the default `HTMLElement.tabIndex`\n            // property as that one is set to `-1` in Chrome, Edge and Safari v13.1. The\n            // tabindex attribute is the source of truth here.\n            if (tabIndexValue === -1) {\n                return false;\n            }\n            // If the tabindex is explicitly set, and not `-1` (as per check before), the\n            // video element is always tabbable (regardless of whether it has controls or not).\n            if (tabIndexValue !== null) {\n                return true;\n            }\n            // Otherwise (when no explicit tabindex is set), a video is only tabbable if it\n            // has controls enabled. Firefox is special as videos are always tabbable regardless\n            // of whether there are controls or not.\n            return this._platform.FIREFOX || element.hasAttribute('controls');\n        }\n        return element.tabIndex >= 0;\n    }\n    /**\n     * Gets whether an element can be focused by the user.\n     *\n     * @param element Element to be checked.\n     * @param config The config object with options to customize this method's behavior\n     * @returns Whether the element is focusable.\n     */\n    isFocusable(element, config) {\n        // Perform checks in order of left to most expensive.\n        // Again, naive approach that does not capture many edge cases and browser quirks.\n        return (isPotentiallyFocusable(element) &&\n            !this.isDisabled(element) &&\n            ((config === null || config === void 0 ? void 0 : config.ignoreVisibility) || this.isVisible(element)));\n    }\n}\nInteractivityChecker.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: InteractivityChecker, deps: [{ token: i1.Platform }], target: i0.ɵɵFactoryTarget.Injectable });\nInteractivityChecker.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: InteractivityChecker, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: InteractivityChecker, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i1.Platform }]; } });\n/**\n * Returns the frame element from a window object. Since browsers like MS Edge throw errors if\n * the frameElement property is being accessed from a different host address, this property\n * should be accessed carefully.\n */\nfunction getFrameElement(window) {\n    try {\n        return window.frameElement;\n    }\n    catch (_a) {\n        return null;\n    }\n}\n/** Checks whether the specified element has any geometry / rectangles. */\nfunction hasGeometry(element) {\n    // Use logic from jQuery to check for an invisible element.\n    // See https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js#L12\n    return !!(element.offsetWidth ||\n        element.offsetHeight ||\n        (typeof element.getClientRects === 'function' && element.getClientRects().length));\n}\n/** Gets whether an element's  */\nfunction isNativeFormElement(element) {\n    let nodeName = element.nodeName.toLowerCase();\n    return (nodeName === 'input' ||\n        nodeName === 'select' ||\n        nodeName === 'button' ||\n        nodeName === 'textarea');\n}\n/** Gets whether an element is an `<input type=\"hidden\">`. */\nfunction isHiddenInput(element) {\n    return isInputElement(element) && element.type == 'hidden';\n}\n/** Gets whether an element is an anchor that has an href attribute. */\nfunction isAnchorWithHref(element) {\n    return isAnchorElement(element) && element.hasAttribute('href');\n}\n/** Gets whether an element is an input element. */\nfunction isInputElement(element) {\n    return element.nodeName.toLowerCase() == 'input';\n}\n/** Gets whether an element is an anchor element. */\nfunction isAnchorElement(element) {\n    return element.nodeName.toLowerCase() == 'a';\n}\n/** Gets whether an element has a valid tabindex. */\nfunction hasValidTabIndex(element) {\n    if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {\n        return false;\n    }\n    let tabIndex = element.getAttribute('tabindex');\n    return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));\n}\n/**\n * Returns the parsed tabindex from the element attributes instead of returning the\n * evaluated tabindex from the browsers defaults.\n */\nfunction getTabIndexValue(element) {\n    if (!hasValidTabIndex(element)) {\n        return null;\n    }\n    // See browser issue in Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054\n    const tabIndex = parseInt(element.getAttribute('tabindex') || '', 10);\n    return isNaN(tabIndex) ? -1 : tabIndex;\n}\n/** Checks whether the specified element is potentially tabbable on iOS */\nfunction isPotentiallyTabbableIOS(element) {\n    let nodeName = element.nodeName.toLowerCase();\n    let inputType = nodeName === 'input' && element.type;\n    return (inputType === 'text' ||\n        inputType === 'password' ||\n        nodeName === 'select' ||\n        nodeName === 'textarea');\n}\n/**\n * Gets whether an element is potentially focusable without taking current visible/disabled state\n * into account.\n */\nfunction isPotentiallyFocusable(element) {\n    // Inputs are potentially focusable *unless* they're type=\"hidden\".\n    if (isHiddenInput(element)) {\n        return false;\n    }\n    return (isNativeFormElement(element) ||\n        isAnchorWithHref(element) ||\n        element.hasAttribute('contenteditable') ||\n        hasValidTabIndex(element));\n}\n/** Gets the parent window of a DOM node with regards of being inside of an iframe. */\nfunction getWindow(node) {\n    // ownerDocument is null if `node` itself *is* a document.\n    return (node.ownerDocument && node.ownerDocument.defaultView) || window;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Class that allows for trapping focus within a DOM element.\n *\n * This class currently uses a relatively simple approach to focus trapping.\n * It assumes that the tab order is the same as DOM order, which is not necessarily true.\n * Things like `tabIndex > 0`, flex `order`, and shadow roots can cause the two to be misaligned.\n *\n * @deprecated Use `ConfigurableFocusTrap` instead.\n * @breaking-change 11.0.0\n */\nclass FocusTrap {\n    constructor(_element, _checker, _ngZone, _document, deferAnchors = false) {\n        this._element = _element;\n        this._checker = _checker;\n        this._ngZone = _ngZone;\n        this._document = _document;\n        this._hasAttached = false;\n        // Event listeners for the anchors. Need to be regular functions so that we can unbind them later.\n        this.startAnchorListener = () => this.focusLastTabbableElement();\n        this.endAnchorListener = () => this.focusFirstTabbableElement();\n        this._enabled = true;\n        if (!deferAnchors) {\n            this.attachAnchors();\n        }\n    }\n    /** Whether the focus trap is active. */\n    get enabled() {\n        return this._enabled;\n    }\n    set enabled(value) {\n        this._enabled = value;\n        if (this._startAnchor && this._endAnchor) {\n            this._toggleAnchorTabIndex(value, this._startAnchor);\n            this._toggleAnchorTabIndex(value, this._endAnchor);\n        }\n    }\n    /** Destroys the focus trap by cleaning up the anchors. */\n    destroy() {\n        const startAnchor = this._startAnchor;\n        const endAnchor = this._endAnchor;\n        if (startAnchor) {\n            startAnchor.removeEventListener('focus', this.startAnchorListener);\n            startAnchor.remove();\n        }\n        if (endAnchor) {\n            endAnchor.removeEventListener('focus', this.endAnchorListener);\n            endAnchor.remove();\n        }\n        this._startAnchor = this._endAnchor = null;\n        this._hasAttached = false;\n    }\n    /**\n     * Inserts the anchors into the DOM. This is usually done automatically\n     * in the constructor, but can be deferred for cases like directives with `*ngIf`.\n     * @returns Whether the focus trap managed to attach successfully. This may not be the case\n     * if the target element isn't currently in the DOM.\n     */\n    attachAnchors() {\n        // If we're not on the browser, there can be no focus to trap.\n        if (this._hasAttached) {\n            return true;\n        }\n        this._ngZone.runOutsideAngular(() => {\n            if (!this._startAnchor) {\n                this._startAnchor = this._createAnchor();\n                this._startAnchor.addEventListener('focus', this.startAnchorListener);\n            }\n            if (!this._endAnchor) {\n                this._endAnchor = this._createAnchor();\n                this._endAnchor.addEventListener('focus', this.endAnchorListener);\n            }\n        });\n        if (this._element.parentNode) {\n            this._element.parentNode.insertBefore(this._startAnchor, this._element);\n            this._element.parentNode.insertBefore(this._endAnchor, this._element.nextSibling);\n            this._hasAttached = true;\n        }\n        return this._hasAttached;\n    }\n    /**\n     * Waits for the zone to stabilize, then focuses the first tabbable element.\n     * @returns Returns a promise that resolves with a boolean, depending\n     * on whether focus was moved successfully.\n     */\n    focusInitialElementWhenReady(options) {\n        return new Promise(resolve => {\n            this._executeOnStable(() => resolve(this.focusInitialElement(options)));\n        });\n    }\n    /**\n     * Waits for the zone to stabilize, then focuses\n     * the first tabbable element within the focus trap region.\n     * @returns Returns a promise that resolves with a boolean, depending\n     * on whether focus was moved successfully.\n     */\n    focusFirstTabbableElementWhenReady(options) {\n        return new Promise(resolve => {\n            this._executeOnStable(() => resolve(this.focusFirstTabbableElement(options)));\n        });\n    }\n    /**\n     * Waits for the zone to stabilize, then focuses\n     * the last tabbable element within the focus trap region.\n     * @returns Returns a promise that resolves with a boolean, depending\n     * on whether focus was moved successfully.\n     */\n    focusLastTabbableElementWhenReady(options) {\n        return new Promise(resolve => {\n            this._executeOnStable(() => resolve(this.focusLastTabbableElement(options)));\n        });\n    }\n    /**\n     * Get the specified boundary element of the trapped region.\n     * @param bound The boundary to get (start or end of trapped region).\n     * @returns The boundary element.\n     */\n    _getRegionBoundary(bound) {\n        // Contains the deprecated version of selector, for temporary backwards comparability.\n        const markers = this._element.querySelectorAll(`[cdk-focus-region-${bound}], ` + `[cdkFocusRegion${bound}], ` + `[cdk-focus-${bound}]`);\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            for (let i = 0; i < markers.length; i++) {\n                // @breaking-change 8.0.0\n                if (markers[i].hasAttribute(`cdk-focus-${bound}`)) {\n                    console.warn(`Found use of deprecated attribute 'cdk-focus-${bound}', ` +\n                        `use 'cdkFocusRegion${bound}' instead. The deprecated ` +\n                        `attribute will be removed in 8.0.0.`, markers[i]);\n                }\n                else if (markers[i].hasAttribute(`cdk-focus-region-${bound}`)) {\n                    console.warn(`Found use of deprecated attribute 'cdk-focus-region-${bound}', ` +\n                        `use 'cdkFocusRegion${bound}' instead. The deprecated attribute ` +\n                        `will be removed in 8.0.0.`, markers[i]);\n                }\n            }\n        }\n        if (bound == 'start') {\n            return markers.length ? markers[0] : this._getFirstTabbableElement(this._element);\n        }\n        return markers.length\n            ? markers[markers.length - 1]\n            : this._getLastTabbableElement(this._element);\n    }\n    /**\n     * Focuses the element that should be focused when the focus trap is initialized.\n     * @returns Whether focus was moved successfully.\n     */\n    focusInitialElement(options) {\n        // Contains the deprecated version of selector, for temporary backwards comparability.\n        const redirectToElement = this._element.querySelector(`[cdk-focus-initial], ` + `[cdkFocusInitial]`);\n        if (redirectToElement) {\n            // @breaking-change 8.0.0\n            if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n                redirectToElement.hasAttribute(`cdk-focus-initial`)) {\n                console.warn(`Found use of deprecated attribute 'cdk-focus-initial', ` +\n                    `use 'cdkFocusInitial' instead. The deprecated attribute ` +\n                    `will be removed in 8.0.0`, redirectToElement);\n            }\n            // Warn the consumer if the element they've pointed to\n            // isn't focusable, when not in production mode.\n            if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n                !this._checker.isFocusable(redirectToElement)) {\n                console.warn(`Element matching '[cdkFocusInitial]' is not focusable.`, redirectToElement);\n            }\n            if (!this._checker.isFocusable(redirectToElement)) {\n                const focusableChild = this._getFirstTabbableElement(redirectToElement);\n                focusableChild === null || focusableChild === void 0 ? void 0 : focusableChild.focus(options);\n                return !!focusableChild;\n            }\n            redirectToElement.focus(options);\n            return true;\n        }\n        return this.focusFirstTabbableElement(options);\n    }\n    /**\n     * Focuses the first tabbable element within the focus trap region.\n     * @returns Whether focus was moved successfully.\n     */\n    focusFirstTabbableElement(options) {\n        const redirectToElement = this._getRegionBoundary('start');\n        if (redirectToElement) {\n            redirectToElement.focus(options);\n        }\n        return !!redirectToElement;\n    }\n    /**\n     * Focuses the last tabbable element within the focus trap region.\n     * @returns Whether focus was moved successfully.\n     */\n    focusLastTabbableElement(options) {\n        const redirectToElement = this._getRegionBoundary('end');\n        if (redirectToElement) {\n            redirectToElement.focus(options);\n        }\n        return !!redirectToElement;\n    }\n    /**\n     * Checks whether the focus trap has successfully been attached.\n     */\n    hasAttached() {\n        return this._hasAttached;\n    }\n    /** Get the first tabbable element from a DOM subtree (inclusive). */\n    _getFirstTabbableElement(root) {\n        if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n            return root;\n        }\n        const children = root.children;\n        for (let i = 0; i < children.length; i++) {\n            const tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE\n                ? this._getFirstTabbableElement(children[i])\n                : null;\n            if (tabbableChild) {\n                return tabbableChild;\n            }\n        }\n        return null;\n    }\n    /** Get the last tabbable element from a DOM subtree (inclusive). */\n    _getLastTabbableElement(root) {\n        if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n            return root;\n        }\n        // Iterate in reverse DOM order.\n        const children = root.children;\n        for (let i = children.length - 1; i >= 0; i--) {\n            const tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE\n                ? this._getLastTabbableElement(children[i])\n                : null;\n            if (tabbableChild) {\n                return tabbableChild;\n            }\n        }\n        return null;\n    }\n    /** Creates an anchor element. */\n    _createAnchor() {\n        const anchor = this._document.createElement('div');\n        this._toggleAnchorTabIndex(this._enabled, anchor);\n        anchor.classList.add('cdk-visually-hidden');\n        anchor.classList.add('cdk-focus-trap-anchor');\n        anchor.setAttribute('aria-hidden', 'true');\n        return anchor;\n    }\n    /**\n     * Toggles the `tabindex` of an anchor, based on the enabled state of the focus trap.\n     * @param isEnabled Whether the focus trap is enabled.\n     * @param anchor Anchor on which to toggle the tabindex.\n     */\n    _toggleAnchorTabIndex(isEnabled, anchor) {\n        // Remove the tabindex completely, rather than setting it to -1, because if the\n        // element has a tabindex, the user might still hit it when navigating with the arrow keys.\n        isEnabled ? anchor.setAttribute('tabindex', '0') : anchor.removeAttribute('tabindex');\n    }\n    /**\n     * Toggles the`tabindex` of both anchors to either trap Tab focus or allow it to escape.\n     * @param enabled: Whether the anchors should trap Tab.\n     */\n    toggleAnchors(enabled) {\n        if (this._startAnchor && this._endAnchor) {\n            this._toggleAnchorTabIndex(enabled, this._startAnchor);\n            this._toggleAnchorTabIndex(enabled, this._endAnchor);\n        }\n    }\n    /** Executes a function when the zone is stable. */\n    _executeOnStable(fn) {\n        if (this._ngZone.isStable) {\n            fn();\n        }\n        else {\n            this._ngZone.onStable.pipe(take(1)).subscribe(fn);\n        }\n    }\n}\n/**\n * Factory that allows easy instantiation of focus traps.\n * @deprecated Use `ConfigurableFocusTrapFactory` instead.\n * @breaking-change 11.0.0\n */\nclass FocusTrapFactory {\n    constructor(_checker, _ngZone, _document) {\n        this._checker = _checker;\n        this._ngZone = _ngZone;\n        this._document = _document;\n    }\n    /**\n     * Creates a focus-trapped region around the given element.\n     * @param element The element around which focus will be trapped.\n     * @param deferCaptureElements Defers the creation of focus-capturing elements to be done\n     *     manually by the user.\n     * @returns The created focus trap instance.\n     */\n    create(element, deferCaptureElements = false) {\n        return new FocusTrap(element, this._checker, this._ngZone, this._document, deferCaptureElements);\n    }\n}\nFocusTrapFactory.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: FocusTrapFactory, deps: [{ token: InteractivityChecker }, { token: i0.NgZone }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nFocusTrapFactory.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: FocusTrapFactory, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: FocusTrapFactory, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: InteractivityChecker }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    } });\n/** Directive for trapping focus within a region. */\nclass CdkTrapFocus {\n    constructor(_elementRef, _focusTrapFactory, \n    /**\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 13.0.0\n     */\n    _document) {\n        this._elementRef = _elementRef;\n        this._focusTrapFactory = _focusTrapFactory;\n        /** Previously focused element to restore focus to upon destroy when using autoCapture. */\n        this._previouslyFocusedElement = null;\n        this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);\n    }\n    /** Whether the focus trap is active. */\n    get enabled() {\n        return this.focusTrap.enabled;\n    }\n    set enabled(value) {\n        this.focusTrap.enabled = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the directive should automatically move focus into the trapped region upon\n     * initialization and return focus to the previous activeElement upon destruction.\n     */\n    get autoCapture() {\n        return this._autoCapture;\n    }\n    set autoCapture(value) {\n        this._autoCapture = coerceBooleanProperty(value);\n    }\n    ngOnDestroy() {\n        this.focusTrap.destroy();\n        // If we stored a previously focused element when using autoCapture, return focus to that\n        // element now that the trapped region is being destroyed.\n        if (this._previouslyFocusedElement) {\n            this._previouslyFocusedElement.focus();\n            this._previouslyFocusedElement = null;\n        }\n    }\n    ngAfterContentInit() {\n        this.focusTrap.attachAnchors();\n        if (this.autoCapture) {\n            this._captureFocus();\n        }\n    }\n    ngDoCheck() {\n        if (!this.focusTrap.hasAttached()) {\n            this.focusTrap.attachAnchors();\n        }\n    }\n    ngOnChanges(changes) {\n        const autoCaptureChange = changes['autoCapture'];\n        if (autoCaptureChange &&\n            !autoCaptureChange.firstChange &&\n            this.autoCapture &&\n            this.focusTrap.hasAttached()) {\n            this._captureFocus();\n        }\n    }\n    _captureFocus() {\n        this._previouslyFocusedElement = _getFocusedElementPierceShadowDom();\n        this.focusTrap.focusInitialElementWhenReady();\n    }\n}\nCdkTrapFocus.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: CdkTrapFocus, deps: [{ token: i0.ElementRef }, { token: FocusTrapFactory }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive });\nCdkTrapFocus.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.0.1\", type: CdkTrapFocus, selector: \"[cdkTrapFocus]\", inputs: { enabled: [\"cdkTrapFocus\", \"enabled\"], autoCapture: [\"cdkTrapFocusAutoCapture\", \"autoCapture\"] }, exportAs: [\"cdkTrapFocus\"], usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: CdkTrapFocus, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkTrapFocus]',\n                    exportAs: 'cdkTrapFocus',\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: FocusTrapFactory }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    }, propDecorators: { enabled: [{\n                type: Input,\n                args: ['cdkTrapFocus']\n            }], autoCapture: [{\n                type: Input,\n                args: ['cdkTrapFocusAutoCapture']\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Class that allows for trapping focus within a DOM element.\n *\n * This class uses a strategy pattern that determines how it traps focus.\n * See FocusTrapInertStrategy.\n */\nclass ConfigurableFocusTrap extends FocusTrap {\n    constructor(_element, _checker, _ngZone, _document, _focusTrapManager, _inertStrategy, config) {\n        super(_element, _checker, _ngZone, _document, config.defer);\n        this._focusTrapManager = _focusTrapManager;\n        this._inertStrategy = _inertStrategy;\n        this._focusTrapManager.register(this);\n    }\n    /** Whether the FocusTrap is enabled. */\n    get enabled() {\n        return this._enabled;\n    }\n    set enabled(value) {\n        this._enabled = value;\n        if (this._enabled) {\n            this._focusTrapManager.register(this);\n        }\n        else {\n            this._focusTrapManager.deregister(this);\n        }\n    }\n    /** Notifies the FocusTrapManager that this FocusTrap will be destroyed. */\n    destroy() {\n        this._focusTrapManager.deregister(this);\n        super.destroy();\n    }\n    /** @docs-private Implemented as part of ManagedFocusTrap. */\n    _enable() {\n        this._inertStrategy.preventFocus(this);\n        this.toggleAnchors(true);\n    }\n    /** @docs-private Implemented as part of ManagedFocusTrap. */\n    _disable() {\n        this._inertStrategy.allowFocus(this);\n        this.toggleAnchors(false);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The injection token used to specify the inert strategy. */\nconst FOCUS_TRAP_INERT_STRATEGY = new InjectionToken('FOCUS_TRAP_INERT_STRATEGY');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Lightweight FocusTrapInertStrategy that adds a document focus event\n * listener to redirect focus back inside the FocusTrap.\n */\nclass EventListenerFocusTrapInertStrategy {\n    constructor() {\n        /** Focus event handler. */\n        this._listener = null;\n    }\n    /** Adds a document event listener that keeps focus inside the FocusTrap. */\n    preventFocus(focusTrap) {\n        // Ensure there's only one listener per document\n        if (this._listener) {\n            focusTrap._document.removeEventListener('focus', this._listener, true);\n        }\n        this._listener = (e) => this._trapFocus(focusTrap, e);\n        focusTrap._ngZone.runOutsideAngular(() => {\n            focusTrap._document.addEventListener('focus', this._listener, true);\n        });\n    }\n    /** Removes the event listener added in preventFocus. */\n    allowFocus(focusTrap) {\n        if (!this._listener) {\n            return;\n        }\n        focusTrap._document.removeEventListener('focus', this._listener, true);\n        this._listener = null;\n    }\n    /**\n     * Refocuses the first element in the FocusTrap if the focus event target was outside\n     * the FocusTrap.\n     *\n     * This is an event listener callback. The event listener is added in runOutsideAngular,\n     * so all this code runs outside Angular as well.\n     */\n    _trapFocus(focusTrap, event) {\n        var _a;\n        const target = event.target;\n        const focusTrapRoot = focusTrap._element;\n        // Don't refocus if target was in an overlay, because the overlay might be associated\n        // with an element inside the FocusTrap, ex. mat-select.\n        if (target && !focusTrapRoot.contains(target) && !((_a = target.closest) === null || _a === void 0 ? void 0 : _a.call(target, 'div.cdk-overlay-pane'))) {\n            // Some legacy FocusTrap usages have logic that focuses some element on the page\n            // just before FocusTrap is destroyed. For backwards compatibility, wait\n            // to be sure FocusTrap is still enabled before refocusing.\n            setTimeout(() => {\n                // Check whether focus wasn't put back into the focus trap while the timeout was pending.\n                if (focusTrap.enabled && !focusTrapRoot.contains(focusTrap._document.activeElement)) {\n                    focusTrap.focusFirstTabbableElement();\n                }\n            });\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injectable that ensures only the most recently enabled FocusTrap is active. */\nclass FocusTrapManager {\n    constructor() {\n        // A stack of the FocusTraps on the page. Only the FocusTrap at the\n        // top of the stack is active.\n        this._focusTrapStack = [];\n    }\n    /**\n     * Disables the FocusTrap at the top of the stack, and then pushes\n     * the new FocusTrap onto the stack.\n     */\n    register(focusTrap) {\n        // Dedupe focusTraps that register multiple times.\n        this._focusTrapStack = this._focusTrapStack.filter(ft => ft !== focusTrap);\n        let stack = this._focusTrapStack;\n        if (stack.length) {\n            stack[stack.length - 1]._disable();\n        }\n        stack.push(focusTrap);\n        focusTrap._enable();\n    }\n    /**\n     * Removes the FocusTrap from the stack, and activates the\n     * FocusTrap that is the new top of the stack.\n     */\n    deregister(focusTrap) {\n        focusTrap._disable();\n        const stack = this._focusTrapStack;\n        const i = stack.indexOf(focusTrap);\n        if (i !== -1) {\n            stack.splice(i, 1);\n            if (stack.length) {\n                stack[stack.length - 1]._enable();\n            }\n        }\n    }\n}\nFocusTrapManager.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: FocusTrapManager, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nFocusTrapManager.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: FocusTrapManager, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: FocusTrapManager, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Factory that allows easy instantiation of configurable focus traps. */\nclass ConfigurableFocusTrapFactory {\n    constructor(_checker, _ngZone, _focusTrapManager, _document, _inertStrategy) {\n        this._checker = _checker;\n        this._ngZone = _ngZone;\n        this._focusTrapManager = _focusTrapManager;\n        this._document = _document;\n        // TODO split up the strategies into different modules, similar to DateAdapter.\n        this._inertStrategy = _inertStrategy || new EventListenerFocusTrapInertStrategy();\n    }\n    create(element, config = { defer: false }) {\n        let configObject;\n        if (typeof config === 'boolean') {\n            configObject = { defer: config };\n        }\n        else {\n            configObject = config;\n        }\n        return new ConfigurableFocusTrap(element, this._checker, this._ngZone, this._document, this._focusTrapManager, this._inertStrategy, configObject);\n    }\n}\nConfigurableFocusTrapFactory.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: ConfigurableFocusTrapFactory, deps: [{ token: InteractivityChecker }, { token: i0.NgZone }, { token: FocusTrapManager }, { token: DOCUMENT }, { token: FOCUS_TRAP_INERT_STRATEGY, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nConfigurableFocusTrapFactory.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: ConfigurableFocusTrapFactory, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: ConfigurableFocusTrapFactory, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: InteractivityChecker }, { type: i0.NgZone }, { type: FocusTrapManager }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [FOCUS_TRAP_INERT_STRATEGY]\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Gets whether an event could be a faked `mousedown` event dispatched by a screen reader. */\nfunction isFakeMousedownFromScreenReader(event) {\n    // Some screen readers will dispatch a fake `mousedown` event when pressing enter or space on\n    // a clickable element. We can distinguish these events when both `offsetX` and `offsetY` are\n    // zero or `event.buttons` is zero, depending on the browser:\n    // - `event.buttons` works on Firefox, but fails on Chrome.\n    // - `offsetX` and `offsetY` work on Chrome, but fail on Firefox.\n    // Note that there's an edge case where the user could click the 0x0 spot of the\n    // screen themselves, but that is unlikely to contain interactive elements.\n    return event.buttons === 0 || (event.offsetX === 0 && event.offsetY === 0);\n}\n/** Gets whether an event could be a faked `touchstart` event dispatched by a screen reader. */\nfunction isFakeTouchstartFromScreenReader(event) {\n    const touch = (event.touches && event.touches[0]) || (event.changedTouches && event.changedTouches[0]);\n    // A fake `touchstart` can be distinguished from a real one by looking at the `identifier`\n    // which is typically >= 0 on a real device versus -1 from a screen reader. Just to be safe,\n    // we can also look at `radiusX` and `radiusY`. This behavior was observed against a Windows 10\n    // device with a touch screen running NVDA v2020.4 and Firefox 85 or Chrome 88.\n    return (!!touch &&\n        touch.identifier === -1 &&\n        (touch.radiusX == null || touch.radiusX === 1) &&\n        (touch.radiusY == null || touch.radiusY === 1));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injectable options for the InputModalityDetector. These are shallowly merged with the default\n * options.\n */\nconst INPUT_MODALITY_DETECTOR_OPTIONS = new InjectionToken('cdk-input-modality-detector-options');\n/**\n * Default options for the InputModalityDetector.\n *\n * Modifier keys are ignored by default (i.e. when pressed won't cause the service to detect\n * keyboard input modality) for two reasons:\n *\n * 1. Modifier keys are commonly used with mouse to perform actions such as 'right click' or 'open\n *    in new tab', and are thus less representative of actual keyboard interaction.\n * 2. VoiceOver triggers some keyboard events when linearly navigating with Control + Option (but\n *    confusingly not with Caps Lock). Thus, to have parity with other screen readers, we ignore\n *    these keys so as to not update the input modality.\n *\n * Note that we do not by default ignore the right Meta key on Safari because it has the same key\n * code as the ContextMenu key on other browsers. When we switch to using event.key, we can\n * distinguish between the two.\n */\nconst INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS = {\n    ignoreKeys: [ALT, CONTROL, MAC_META, META, SHIFT],\n};\n/**\n * The amount of time needed to pass after a touchstart event in order for a subsequent mousedown\n * event to be attributed as mouse and not touch.\n *\n * This is the value used by AngularJS Material. Through trial and error (on iPhone 6S) they found\n * that a value of around 650ms seems appropriate.\n */\nconst TOUCH_BUFFER_MS = 650;\n/**\n * Event listener options that enable capturing and also mark the listener as passive if the browser\n * supports it.\n */\nconst modalityEventListenerOptions = normalizePassiveListenerOptions({\n    passive: true,\n    capture: true,\n});\n/**\n * Service that detects the user's input modality.\n *\n * This service does not update the input modality when a user navigates with a screen reader\n * (e.g. linear navigation with VoiceOver, object navigation / browse mode with NVDA, virtual PC\n * cursor mode with JAWS). This is in part due to technical limitations (i.e. keyboard events do not\n * fire as expected in these modes) but is also arguably the correct behavior. Navigating with a\n * screen reader is akin to visually scanning a page, and should not be interpreted as actual user\n * input interaction.\n *\n * When a user is not navigating but *interacting* with a screen reader, this service attempts to\n * update the input modality to keyboard, but in general this service's behavior is largely\n * undefined.\n */\nclass InputModalityDetector {\n    constructor(_platform, ngZone, document, options) {\n        this._platform = _platform;\n        /**\n         * The most recently detected input modality event target. Is null if no input modality has been\n         * detected or if the associated event target is null for some unknown reason.\n         */\n        this._mostRecentTarget = null;\n        /** The underlying BehaviorSubject that emits whenever an input modality is detected. */\n        this._modality = new BehaviorSubject(null);\n        /**\n         * The timestamp of the last touch input modality. Used to determine whether mousedown events\n         * should be attributed to mouse or touch.\n         */\n        this._lastTouchMs = 0;\n        /**\n         * Handles keydown events. Must be an arrow function in order to preserve the context when it gets\n         * bound.\n         */\n        this._onKeydown = (event) => {\n            var _a, _b;\n            // If this is one of the keys we should ignore, then ignore it and don't update the input\n            // modality to keyboard.\n            if ((_b = (_a = this._options) === null || _a === void 0 ? void 0 : _a.ignoreKeys) === null || _b === void 0 ? void 0 : _b.some(keyCode => keyCode === event.keyCode)) {\n                return;\n            }\n            this._modality.next('keyboard');\n            this._mostRecentTarget = _getEventTarget(event);\n        };\n        /**\n         * Handles mousedown events. Must be an arrow function in order to preserve the context when it\n         * gets bound.\n         */\n        this._onMousedown = (event) => {\n            // Touches trigger both touch and mouse events, so we need to distinguish between mouse events\n            // that were triggered via mouse vs touch. To do so, check if the mouse event occurs closely\n            // after the previous touch event.\n            if (Date.now() - this._lastTouchMs < TOUCH_BUFFER_MS) {\n                return;\n            }\n            // Fake mousedown events are fired by some screen readers when controls are activated by the\n            // screen reader. Attribute them to keyboard input modality.\n            this._modality.next(isFakeMousedownFromScreenReader(event) ? 'keyboard' : 'mouse');\n            this._mostRecentTarget = _getEventTarget(event);\n        };\n        /**\n         * Handles touchstart events. Must be an arrow function in order to preserve the context when it\n         * gets bound.\n         */\n        this._onTouchstart = (event) => {\n            // Same scenario as mentioned in _onMousedown, but on touch screen devices, fake touchstart\n            // events are fired. Again, attribute to keyboard input modality.\n            if (isFakeTouchstartFromScreenReader(event)) {\n                this._modality.next('keyboard');\n                return;\n            }\n            // Store the timestamp of this touch event, as it's used to distinguish between mouse events\n            // triggered via mouse vs touch.\n            this._lastTouchMs = Date.now();\n            this._modality.next('touch');\n            this._mostRecentTarget = _getEventTarget(event);\n        };\n        this._options = Object.assign(Object.assign({}, INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS), options);\n        // Skip the first emission as it's null.\n        this.modalityDetected = this._modality.pipe(skip(1));\n        this.modalityChanged = this.modalityDetected.pipe(distinctUntilChanged());\n        // If we're not in a browser, this service should do nothing, as there's no relevant input\n        // modality to detect.\n        if (_platform.isBrowser) {\n            ngZone.runOutsideAngular(() => {\n                document.addEventListener('keydown', this._onKeydown, modalityEventListenerOptions);\n                document.addEventListener('mousedown', this._onMousedown, modalityEventListenerOptions);\n                document.addEventListener('touchstart', this._onTouchstart, modalityEventListenerOptions);\n            });\n        }\n    }\n    /** The most recently detected input modality. */\n    get mostRecentModality() {\n        return this._modality.value;\n    }\n    ngOnDestroy() {\n        this._modality.complete();\n        if (this._platform.isBrowser) {\n            document.removeEventListener('keydown', this._onKeydown, modalityEventListenerOptions);\n            document.removeEventListener('mousedown', this._onMousedown, modalityEventListenerOptions);\n            document.removeEventListener('touchstart', this._onTouchstart, modalityEventListenerOptions);\n        }\n    }\n}\nInputModalityDetector.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: InputModalityDetector, deps: [{ token: i1.Platform }, { token: i0.NgZone }, { token: DOCUMENT }, { token: INPUT_MODALITY_DETECTOR_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nInputModalityDetector.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: InputModalityDetector, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: InputModalityDetector, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: i1.Platform }, { type: i0.NgZone }, { type: Document, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [INPUT_MODALITY_DETECTOR_OPTIONS]\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst LIVE_ANNOUNCER_ELEMENT_TOKEN = new InjectionToken('liveAnnouncerElement', {\n    providedIn: 'root',\n    factory: LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY,\n});\n/** @docs-private */\nfunction LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY() {\n    return null;\n}\n/** Injection token that can be used to configure the default options for the LiveAnnouncer. */\nconst LIVE_ANNOUNCER_DEFAULT_OPTIONS = new InjectionToken('LIVE_ANNOUNCER_DEFAULT_OPTIONS');\n\nclass LiveAnnouncer {\n    constructor(elementToken, _ngZone, _document, _defaultOptions) {\n        this._ngZone = _ngZone;\n        this._defaultOptions = _defaultOptions;\n        // We inject the live element and document as `any` because the constructor signature cannot\n        // reference browser globals (HTMLElement, Document) on non-browser environments, since having\n        // a class decorator causes TypeScript to preserve the constructor signature types.\n        this._document = _document;\n        this._liveElement = elementToken || this._createLiveElement();\n    }\n    announce(message, ...args) {\n        const defaultOptions = this._defaultOptions;\n        let politeness;\n        let duration;\n        if (args.length === 1 && typeof args[0] === 'number') {\n            duration = args[0];\n        }\n        else {\n            [politeness, duration] = args;\n        }\n        this.clear();\n        clearTimeout(this._previousTimeout);\n        if (!politeness) {\n            politeness =\n                defaultOptions && defaultOptions.politeness ? defaultOptions.politeness : 'polite';\n        }\n        if (duration == null && defaultOptions) {\n            duration = defaultOptions.duration;\n        }\n        // TODO: ensure changing the politeness works on all environments we support.\n        this._liveElement.setAttribute('aria-live', politeness);\n        // This 100ms timeout is necessary for some browser + screen-reader combinations:\n        // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.\n        // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a\n        //   second time without clearing and then using a non-zero delay.\n        // (using JAWS 17 at time of this writing).\n        return this._ngZone.runOutsideAngular(() => {\n            if (!this._currentPromise) {\n                this._currentPromise = new Promise(resolve => (this._currentResolve = resolve));\n            }\n            clearTimeout(this._previousTimeout);\n            this._previousTimeout = setTimeout(() => {\n                this._liveElement.textContent = message;\n                if (typeof duration === 'number') {\n                    this._previousTimeout = setTimeout(() => this.clear(), duration);\n                }\n                this._currentResolve();\n                this._currentPromise = this._currentResolve = undefined;\n            }, 100);\n            return this._currentPromise;\n        });\n    }\n    /**\n     * Clears the current text from the announcer element. Can be used to prevent\n     * screen readers from reading the text out again while the user is going\n     * through the page landmarks.\n     */\n    clear() {\n        if (this._liveElement) {\n            this._liveElement.textContent = '';\n        }\n    }\n    ngOnDestroy() {\n        var _a, _b;\n        clearTimeout(this._previousTimeout);\n        (_a = this._liveElement) === null || _a === void 0 ? void 0 : _a.remove();\n        this._liveElement = null;\n        (_b = this._currentResolve) === null || _b === void 0 ? void 0 : _b.call(this);\n        this._currentPromise = this._currentResolve = undefined;\n    }\n    _createLiveElement() {\n        const elementClass = 'cdk-live-announcer-element';\n        const previousElements = this._document.getElementsByClassName(elementClass);\n        const liveEl = this._document.createElement('div');\n        // Remove any old containers. This can happen when coming in from a server-side-rendered page.\n        for (let i = 0; i < previousElements.length; i++) {\n            previousElements[i].remove();\n        }\n        liveEl.classList.add(elementClass);\n        liveEl.classList.add('cdk-visually-hidden');\n        liveEl.setAttribute('aria-atomic', 'true');\n        liveEl.setAttribute('aria-live', 'polite');\n        this._document.body.appendChild(liveEl);\n        return liveEl;\n    }\n}\nLiveAnnouncer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: LiveAnnouncer, deps: [{ token: LIVE_ANNOUNCER_ELEMENT_TOKEN, optional: true }, { token: i0.NgZone }, { token: DOCUMENT }, { token: LIVE_ANNOUNCER_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nLiveAnnouncer.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: LiveAnnouncer, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: LiveAnnouncer, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [LIVE_ANNOUNCER_ELEMENT_TOKEN]\n                    }] }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [LIVE_ANNOUNCER_DEFAULT_OPTIONS]\n                    }] }];\n    } });\n/**\n * A directive that works similarly to aria-live, but uses the LiveAnnouncer to ensure compatibility\n * with a wider range of browsers and screen readers.\n */\nclass CdkAriaLive {\n    constructor(_elementRef, _liveAnnouncer, _contentObserver, _ngZone) {\n        this._elementRef = _elementRef;\n        this._liveAnnouncer = _liveAnnouncer;\n        this._contentObserver = _contentObserver;\n        this._ngZone = _ngZone;\n        this._politeness = 'polite';\n    }\n    /** The aria-live politeness level to use when announcing messages. */\n    get politeness() {\n        return this._politeness;\n    }\n    set politeness(value) {\n        this._politeness = value === 'off' || value === 'assertive' ? value : 'polite';\n        if (this._politeness === 'off') {\n            if (this._subscription) {\n                this._subscription.unsubscribe();\n                this._subscription = null;\n            }\n        }\n        else if (!this._subscription) {\n            this._subscription = this._ngZone.runOutsideAngular(() => {\n                return this._contentObserver.observe(this._elementRef).subscribe(() => {\n                    // Note that we use textContent here, rather than innerText, in order to avoid a reflow.\n                    const elementText = this._elementRef.nativeElement.textContent;\n                    // The `MutationObserver` fires also for attribute\n                    // changes which we don't want to announce.\n                    if (elementText !== this._previousAnnouncedText) {\n                        this._liveAnnouncer.announce(elementText, this._politeness, this.duration);\n                        this._previousAnnouncedText = elementText;\n                    }\n                });\n            });\n        }\n    }\n    ngOnDestroy() {\n        if (this._subscription) {\n            this._subscription.unsubscribe();\n        }\n    }\n}\nCdkAriaLive.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: CdkAriaLive, deps: [{ token: i0.ElementRef }, { token: LiveAnnouncer }, { token: i1$1.ContentObserver }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });\nCdkAriaLive.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.0.1\", type: CdkAriaLive, selector: \"[cdkAriaLive]\", inputs: { politeness: [\"cdkAriaLive\", \"politeness\"], duration: [\"cdkAriaLiveDuration\", \"duration\"] }, exportAs: [\"cdkAriaLive\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: CdkAriaLive, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkAriaLive]',\n                    exportAs: 'cdkAriaLive',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: LiveAnnouncer }, { type: i1$1.ContentObserver }, { type: i0.NgZone }]; }, propDecorators: { politeness: [{\n                type: Input,\n                args: ['cdkAriaLive']\n            }], duration: [{\n                type: Input,\n                args: ['cdkAriaLiveDuration']\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** InjectionToken for FocusMonitorOptions. */\nconst FOCUS_MONITOR_DEFAULT_OPTIONS = new InjectionToken('cdk-focus-monitor-default-options');\n/**\n * Event listener options that enable capturing and also\n * mark the listener as passive if the browser supports it.\n */\nconst captureEventListenerOptions = normalizePassiveListenerOptions({\n    passive: true,\n    capture: true,\n});\n/** Monitors mouse and keyboard events to determine the cause of focus events. */\nclass FocusMonitor {\n    constructor(_ngZone, _platform, _inputModalityDetector, \n    /** @breaking-change 11.0.0 make document required */\n    document, options) {\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        this._inputModalityDetector = _inputModalityDetector;\n        /** The focus origin that the next focus event is a result of. */\n        this._origin = null;\n        /** Whether the window has just been focused. */\n        this._windowFocused = false;\n        /**\n         * Whether the origin was determined via a touch interaction. Necessary as properly attributing\n         * focus events to touch interactions requires special logic.\n         */\n        this._originFromTouchInteraction = false;\n        /** Map of elements being monitored to their info. */\n        this._elementInfo = new Map();\n        /** The number of elements currently being monitored. */\n        this._monitoredElementCount = 0;\n        /**\n         * Keeps track of the root nodes to which we've currently bound a focus/blur handler,\n         * as well as the number of monitored elements that they contain. We have to treat focus/blur\n         * handlers differently from the rest of the events, because the browser won't emit events\n         * to the document when focus moves inside of a shadow root.\n         */\n        this._rootNodeFocusListenerCount = new Map();\n        /**\n         * Event listener for `focus` events on the window.\n         * Needs to be an arrow function in order to preserve the context when it gets bound.\n         */\n        this._windowFocusListener = () => {\n            // Make a note of when the window regains focus, so we can\n            // restore the origin info for the focused element.\n            this._windowFocused = true;\n            this._windowFocusTimeoutId = window.setTimeout(() => (this._windowFocused = false));\n        };\n        /** Subject for stopping our InputModalityDetector subscription. */\n        this._stopInputModalityDetector = new Subject();\n        /**\n         * Event listener for `focus` and 'blur' events on the document.\n         * Needs to be an arrow function in order to preserve the context when it gets bound.\n         */\n        this._rootNodeFocusAndBlurListener = (event) => {\n            const target = _getEventTarget(event);\n            // We need to walk up the ancestor chain in order to support `checkChildren`.\n            for (let element = target; element; element = element.parentElement) {\n                if (event.type === 'focus') {\n                    this._onFocus(event, element);\n                }\n                else {\n                    this._onBlur(event, element);\n                }\n            }\n        };\n        this._document = document;\n        this._detectionMode = (options === null || options === void 0 ? void 0 : options.detectionMode) || 0 /* FocusMonitorDetectionMode.IMMEDIATE */;\n    }\n    monitor(element, checkChildren = false) {\n        const nativeElement = coerceElement(element);\n        // Do nothing if we're not on the browser platform or the passed in node isn't an element.\n        if (!this._platform.isBrowser || nativeElement.nodeType !== 1) {\n            return of(null);\n        }\n        // If the element is inside the shadow DOM, we need to bind our focus/blur listeners to\n        // the shadow root, rather than the `document`, because the browser won't emit focus events\n        // to the `document`, if focus is moving within the same shadow root.\n        const rootNode = _getShadowRoot(nativeElement) || this._getDocument();\n        const cachedInfo = this._elementInfo.get(nativeElement);\n        // Check if we're already monitoring this element.\n        if (cachedInfo) {\n            if (checkChildren) {\n                // TODO(COMP-318): this can be problematic, because it'll turn all non-checkChildren\n                // observers into ones that behave as if `checkChildren` was turned on. We need a more\n                // robust solution.\n                cachedInfo.checkChildren = true;\n            }\n            return cachedInfo.subject;\n        }\n        // Create monitored element info.\n        const info = {\n            checkChildren: checkChildren,\n            subject: new Subject(),\n            rootNode,\n        };\n        this._elementInfo.set(nativeElement, info);\n        this._registerGlobalListeners(info);\n        return info.subject;\n    }\n    stopMonitoring(element) {\n        const nativeElement = coerceElement(element);\n        const elementInfo = this._elementInfo.get(nativeElement);\n        if (elementInfo) {\n            elementInfo.subject.complete();\n            this._setClasses(nativeElement);\n            this._elementInfo.delete(nativeElement);\n            this._removeGlobalListeners(elementInfo);\n        }\n    }\n    focusVia(element, origin, options) {\n        const nativeElement = coerceElement(element);\n        const focusedElement = this._getDocument().activeElement;\n        // If the element is focused already, calling `focus` again won't trigger the event listener\n        // which means that the focus classes won't be updated. If that's the case, update the classes\n        // directly without waiting for an event.\n        if (nativeElement === focusedElement) {\n            this._getClosestElementsInfo(nativeElement).forEach(([currentElement, info]) => this._originChanged(currentElement, origin, info));\n        }\n        else {\n            this._setOrigin(origin);\n            // `focus` isn't available on the server\n            if (typeof nativeElement.focus === 'function') {\n                nativeElement.focus(options);\n            }\n        }\n    }\n    ngOnDestroy() {\n        this._elementInfo.forEach((_info, element) => this.stopMonitoring(element));\n    }\n    /** Access injected document if available or fallback to global document reference */\n    _getDocument() {\n        return this._document || document;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        const doc = this._getDocument();\n        return doc.defaultView || window;\n    }\n    _getFocusOrigin(focusEventTarget) {\n        if (this._origin) {\n            // If the origin was realized via a touch interaction, we need to perform additional checks\n            // to determine whether the focus origin should be attributed to touch or program.\n            if (this._originFromTouchInteraction) {\n                return this._shouldBeAttributedToTouch(focusEventTarget) ? 'touch' : 'program';\n            }\n            else {\n                return this._origin;\n            }\n        }\n        // If the window has just regained focus, we can restore the most recent origin from before the\n        // window blurred. Otherwise, we've reached the point where we can't identify the source of the\n        // focus. This typically means one of two things happened:\n        //\n        // 1) The element was programmatically focused, or\n        // 2) The element was focused via screen reader navigation (which generally doesn't fire\n        //    events).\n        //\n        // Because we can't distinguish between these two cases, we default to setting `program`.\n        if (this._windowFocused && this._lastFocusOrigin) {\n            return this._lastFocusOrigin;\n        }\n        // If the interaction is coming from an input label, we consider it a mouse interactions.\n        // This is a special case where focus moves on `click`, rather than `mousedown` which breaks\n        // our detection, because all our assumptions are for `mousedown`. We need to handle this\n        // special case, because it's very common for checkboxes and radio buttons.\n        if (focusEventTarget && this._isLastInteractionFromInputLabel(focusEventTarget)) {\n            return 'mouse';\n        }\n        return 'program';\n    }\n    /**\n     * Returns whether the focus event should be attributed to touch. Recall that in IMMEDIATE mode, a\n     * touch origin isn't immediately reset at the next tick (see _setOrigin). This means that when we\n     * handle a focus event following a touch interaction, we need to determine whether (1) the focus\n     * event was directly caused by the touch interaction or (2) the focus event was caused by a\n     * subsequent programmatic focus call triggered by the touch interaction.\n     * @param focusEventTarget The target of the focus event under examination.\n     */\n    _shouldBeAttributedToTouch(focusEventTarget) {\n        // Please note that this check is not perfect. Consider the following edge case:\n        //\n        // <div #parent tabindex=\"0\">\n        //   <div #child tabindex=\"0\" (click)=\"#parent.focus()\"></div>\n        // </div>\n        //\n        // Suppose there is a FocusMonitor in IMMEDIATE mode attached to #parent. When the user touches\n        // #child, #parent is programmatically focused. This code will attribute the focus to touch\n        // instead of program. This is a relatively minor edge-case that can be worked around by using\n        // focusVia(parent, 'program') to focus #parent.\n        return (this._detectionMode === 1 /* FocusMonitorDetectionMode.EVENTUAL */ ||\n            !!(focusEventTarget === null || focusEventTarget === void 0 ? void 0 : focusEventTarget.contains(this._inputModalityDetector._mostRecentTarget)));\n    }\n    /**\n     * Sets the focus classes on the element based on the given focus origin.\n     * @param element The element to update the classes on.\n     * @param origin The focus origin.\n     */\n    _setClasses(element, origin) {\n        element.classList.toggle('cdk-focused', !!origin);\n        element.classList.toggle('cdk-touch-focused', origin === 'touch');\n        element.classList.toggle('cdk-keyboard-focused', origin === 'keyboard');\n        element.classList.toggle('cdk-mouse-focused', origin === 'mouse');\n        element.classList.toggle('cdk-program-focused', origin === 'program');\n    }\n    /**\n     * Updates the focus origin. If we're using immediate detection mode, we schedule an async\n     * function to clear the origin at the end of a timeout. The duration of the timeout depends on\n     * the origin being set.\n     * @param origin The origin to set.\n     * @param isFromInteraction Whether we are setting the origin from an interaction event.\n     */\n    _setOrigin(origin, isFromInteraction = false) {\n        this._ngZone.runOutsideAngular(() => {\n            this._origin = origin;\n            this._originFromTouchInteraction = origin === 'touch' && isFromInteraction;\n            // If we're in IMMEDIATE mode, reset the origin at the next tick (or in `TOUCH_BUFFER_MS` ms\n            // for a touch event). We reset the origin at the next tick because Firefox focuses one tick\n            // after the interaction event. We wait `TOUCH_BUFFER_MS` ms before resetting the origin for\n            // a touch event because when a touch event is fired, the associated focus event isn't yet in\n            // the event queue. Before doing so, clear any pending timeouts.\n            if (this._detectionMode === 0 /* FocusMonitorDetectionMode.IMMEDIATE */) {\n                clearTimeout(this._originTimeoutId);\n                const ms = this._originFromTouchInteraction ? TOUCH_BUFFER_MS : 1;\n                this._originTimeoutId = setTimeout(() => (this._origin = null), ms);\n            }\n        });\n    }\n    /**\n     * Handles focus events on a registered element.\n     * @param event The focus event.\n     * @param element The monitored element.\n     */\n    _onFocus(event, element) {\n        // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent\n        // focus event affecting the monitored element. If we want to use the origin of the first event\n        // instead we should check for the cdk-focused class here and return if the element already has\n        // it. (This only matters for elements that have includesChildren = true).\n        // If we are not counting child-element-focus as focused, make sure that the event target is the\n        // monitored element itself.\n        const elementInfo = this._elementInfo.get(element);\n        const focusEventTarget = _getEventTarget(event);\n        if (!elementInfo || (!elementInfo.checkChildren && element !== focusEventTarget)) {\n            return;\n        }\n        this._originChanged(element, this._getFocusOrigin(focusEventTarget), elementInfo);\n    }\n    /**\n     * Handles blur events on a registered element.\n     * @param event The blur event.\n     * @param element The monitored element.\n     */\n    _onBlur(event, element) {\n        // If we are counting child-element-focus as focused, make sure that we aren't just blurring in\n        // order to focus another child of the monitored element.\n        const elementInfo = this._elementInfo.get(element);\n        if (!elementInfo ||\n            (elementInfo.checkChildren &&\n                event.relatedTarget instanceof Node &&\n                element.contains(event.relatedTarget))) {\n            return;\n        }\n        this._setClasses(element);\n        this._emitOrigin(elementInfo, null);\n    }\n    _emitOrigin(info, origin) {\n        if (info.subject.observers.length) {\n            this._ngZone.run(() => info.subject.next(origin));\n        }\n    }\n    _registerGlobalListeners(elementInfo) {\n        if (!this._platform.isBrowser) {\n            return;\n        }\n        const rootNode = elementInfo.rootNode;\n        const rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode) || 0;\n        if (!rootNodeFocusListeners) {\n            this._ngZone.runOutsideAngular(() => {\n                rootNode.addEventListener('focus', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n                rootNode.addEventListener('blur', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n            });\n        }\n        this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners + 1);\n        // Register global listeners when first element is monitored.\n        if (++this._monitoredElementCount === 1) {\n            // Note: we listen to events in the capture phase so we\n            // can detect them even if the user stops propagation.\n            this._ngZone.runOutsideAngular(() => {\n                const window = this._getWindow();\n                window.addEventListener('focus', this._windowFocusListener);\n            });\n            // The InputModalityDetector is also just a collection of global listeners.\n            this._inputModalityDetector.modalityDetected\n                .pipe(takeUntil(this._stopInputModalityDetector))\n                .subscribe(modality => {\n                this._setOrigin(modality, true /* isFromInteraction */);\n            });\n        }\n    }\n    _removeGlobalListeners(elementInfo) {\n        const rootNode = elementInfo.rootNode;\n        if (this._rootNodeFocusListenerCount.has(rootNode)) {\n            const rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode);\n            if (rootNodeFocusListeners > 1) {\n                this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners - 1);\n            }\n            else {\n                rootNode.removeEventListener('focus', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n                rootNode.removeEventListener('blur', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n                this._rootNodeFocusListenerCount.delete(rootNode);\n            }\n        }\n        // Unregister global listeners when last element is unmonitored.\n        if (!--this._monitoredElementCount) {\n            const window = this._getWindow();\n            window.removeEventListener('focus', this._windowFocusListener);\n            // Equivalently, stop our InputModalityDetector subscription.\n            this._stopInputModalityDetector.next();\n            // Clear timeouts for all potentially pending timeouts to prevent the leaks.\n            clearTimeout(this._windowFocusTimeoutId);\n            clearTimeout(this._originTimeoutId);\n        }\n    }\n    /** Updates all the state on an element once its focus origin has changed. */\n    _originChanged(element, origin, elementInfo) {\n        this._setClasses(element, origin);\n        this._emitOrigin(elementInfo, origin);\n        this._lastFocusOrigin = origin;\n    }\n    /**\n     * Collects the `MonitoredElementInfo` of a particular element and\n     * all of its ancestors that have enabled `checkChildren`.\n     * @param element Element from which to start the search.\n     */\n    _getClosestElementsInfo(element) {\n        const results = [];\n        this._elementInfo.forEach((info, currentElement) => {\n            if (currentElement === element || (info.checkChildren && currentElement.contains(element))) {\n                results.push([currentElement, info]);\n            }\n        });\n        return results;\n    }\n    /**\n     * Returns whether an interaction is likely to have come from the user clicking the `label` of\n     * an `input` or `textarea` in order to focus it.\n     * @param focusEventTarget Target currently receiving focus.\n     */\n    _isLastInteractionFromInputLabel(focusEventTarget) {\n        const { _mostRecentTarget: mostRecentTarget, mostRecentModality } = this._inputModalityDetector;\n        // If the last interaction used the mouse on an element contained by one of the labels\n        // of an `input`/`textarea` that is currently focused, it is very likely that the\n        // user redirected focus using the label.\n        if (mostRecentModality !== 'mouse' ||\n            !mostRecentTarget ||\n            mostRecentTarget === focusEventTarget ||\n            (focusEventTarget.nodeName !== 'INPUT' && focusEventTarget.nodeName !== 'TEXTAREA') ||\n            focusEventTarget.disabled) {\n            return false;\n        }\n        const labels = focusEventTarget.labels;\n        if (labels) {\n            for (let i = 0; i < labels.length; i++) {\n                if (labels[i].contains(mostRecentTarget)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\nFocusMonitor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: FocusMonitor, deps: [{ token: i0.NgZone }, { token: i1.Platform }, { token: InputModalityDetector }, { token: DOCUMENT, optional: true }, { token: FOCUS_MONITOR_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nFocusMonitor.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: FocusMonitor, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: FocusMonitor, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: i0.NgZone }, { type: i1.Platform }, { type: InputModalityDetector }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [FOCUS_MONITOR_DEFAULT_OPTIONS]\n                    }] }];\n    } });\n/**\n * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or\n * programmatically) and adds corresponding classes to the element.\n *\n * There are two variants of this directive:\n * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is\n *    focused.\n * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.\n */\nclass CdkMonitorFocus {\n    constructor(_elementRef, _focusMonitor) {\n        this._elementRef = _elementRef;\n        this._focusMonitor = _focusMonitor;\n        this.cdkFocusChange = new EventEmitter();\n    }\n    ngAfterViewInit() {\n        const element = this._elementRef.nativeElement;\n        this._monitorSubscription = this._focusMonitor\n            .monitor(element, element.nodeType === 1 && element.hasAttribute('cdkMonitorSubtreeFocus'))\n            .subscribe(origin => this.cdkFocusChange.emit(origin));\n    }\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        if (this._monitorSubscription) {\n            this._monitorSubscription.unsubscribe();\n        }\n    }\n}\nCdkMonitorFocus.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: CdkMonitorFocus, deps: [{ token: i0.ElementRef }, { token: FocusMonitor }], target: i0.ɵɵFactoryTarget.Directive });\nCdkMonitorFocus.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.0.1\", type: CdkMonitorFocus, selector: \"[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]\", outputs: { cdkFocusChange: \"cdkFocusChange\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: CdkMonitorFocus, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: FocusMonitor }]; }, propDecorators: { cdkFocusChange: [{\n                type: Output\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** CSS class applied to the document body when in black-on-white high-contrast mode. */\nconst BLACK_ON_WHITE_CSS_CLASS = 'cdk-high-contrast-black-on-white';\n/** CSS class applied to the document body when in white-on-black high-contrast mode. */\nconst WHITE_ON_BLACK_CSS_CLASS = 'cdk-high-contrast-white-on-black';\n/** CSS class applied to the document body when in high-contrast mode. */\nconst HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS = 'cdk-high-contrast-active';\n/**\n * Service to determine whether the browser is currently in a high-contrast-mode environment.\n *\n * Microsoft Windows supports an accessibility feature called \"High Contrast Mode\". This mode\n * changes the appearance of all applications, including web applications, to dramatically increase\n * contrast.\n *\n * IE, Edge, and Firefox currently support this mode. Chrome does not support Windows High Contrast\n * Mode. This service does not detect high-contrast mode as added by the Chrome \"High Contrast\"\n * browser extension.\n */\nclass HighContrastModeDetector {\n    constructor(_platform, document) {\n        this._platform = _platform;\n        this._document = document;\n        this._breakpointSubscription = inject(BreakpointObserver)\n            .observe('(forced-colors: active)')\n            .subscribe(() => {\n            if (this._hasCheckedHighContrastMode) {\n                this._hasCheckedHighContrastMode = false;\n                this._applyBodyHighContrastModeCssClasses();\n            }\n        });\n    }\n    /** Gets the current high-contrast-mode for the page. */\n    getHighContrastMode() {\n        if (!this._platform.isBrowser) {\n            return 0 /* HighContrastMode.NONE */;\n        }\n        // Create a test element with an arbitrary background-color that is neither black nor\n        // white; high-contrast mode will coerce the color to either black or white. Also ensure that\n        // appending the test element to the DOM does not affect layout by absolutely positioning it\n        const testElement = this._document.createElement('div');\n        testElement.style.backgroundColor = 'rgb(1,2,3)';\n        testElement.style.position = 'absolute';\n        this._document.body.appendChild(testElement);\n        // Get the computed style for the background color, collapsing spaces to normalize between\n        // browsers. Once we get this color, we no longer need the test element. Access the `window`\n        // via the document so we can fake it in tests. Note that we have extra null checks, because\n        // this logic will likely run during app bootstrap and throwing can break the entire app.\n        const documentWindow = this._document.defaultView || window;\n        const computedStyle = documentWindow && documentWindow.getComputedStyle\n            ? documentWindow.getComputedStyle(testElement)\n            : null;\n        const computedColor = ((computedStyle && computedStyle.backgroundColor) || '').replace(/ /g, '');\n        testElement.remove();\n        switch (computedColor) {\n            case 'rgb(0,0,0)':\n                return 2 /* HighContrastMode.WHITE_ON_BLACK */;\n            case 'rgb(255,255,255)':\n                return 1 /* HighContrastMode.BLACK_ON_WHITE */;\n        }\n        return 0 /* HighContrastMode.NONE */;\n    }\n    ngOnDestroy() {\n        this._breakpointSubscription.unsubscribe();\n    }\n    /** Applies CSS classes indicating high-contrast mode to document body (browser-only). */\n    _applyBodyHighContrastModeCssClasses() {\n        if (!this._hasCheckedHighContrastMode && this._platform.isBrowser && this._document.body) {\n            const bodyClasses = this._document.body.classList;\n            bodyClasses.remove(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS, BLACK_ON_WHITE_CSS_CLASS, WHITE_ON_BLACK_CSS_CLASS);\n            this._hasCheckedHighContrastMode = true;\n            const mode = this.getHighContrastMode();\n            if (mode === 1 /* HighContrastMode.BLACK_ON_WHITE */) {\n                bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS, BLACK_ON_WHITE_CSS_CLASS);\n            }\n            else if (mode === 2 /* HighContrastMode.WHITE_ON_BLACK */) {\n                bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS, WHITE_ON_BLACK_CSS_CLASS);\n            }\n        }\n    }\n}\nHighContrastModeDetector.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: HighContrastModeDetector, deps: [{ token: i1.Platform }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nHighContrastModeDetector.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: HighContrastModeDetector, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: HighContrastModeDetector, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: i1.Platform }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass A11yModule {\n    constructor(highContrastModeDetector) {\n        highContrastModeDetector._applyBodyHighContrastModeCssClasses();\n    }\n}\nA11yModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: A11yModule, deps: [{ token: HighContrastModeDetector }], target: i0.ɵɵFactoryTarget.NgModule });\nA11yModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.0.1\", ngImport: i0, type: A11yModule, declarations: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus], imports: [ObserversModule], exports: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus] });\nA11yModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: A11yModule, imports: [ObserversModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: A11yModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ObserversModule],\n                    declarations: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus],\n                    exports: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus],\n                }]\n        }], ctorParameters: function () { return [{ type: HighContrastModeDetector }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { A11yModule, ActiveDescendantKeyManager, AriaDescriber, CDK_DESCRIBEDBY_HOST_ATTRIBUTE, CDK_DESCRIBEDBY_ID_PREFIX, CdkAriaLive, CdkMonitorFocus, CdkTrapFocus, ConfigurableFocusTrap, ConfigurableFocusTrapFactory, EventListenerFocusTrapInertStrategy, FOCUS_MONITOR_DEFAULT_OPTIONS, FOCUS_TRAP_INERT_STRATEGY, FocusKeyManager, FocusMonitor, FocusTrap, FocusTrapFactory, HighContrastModeDetector, INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS, INPUT_MODALITY_DETECTOR_OPTIONS, InputModalityDetector, InteractivityChecker, IsFocusableConfig, LIVE_ANNOUNCER_DEFAULT_OPTIONS, LIVE_ANNOUNCER_ELEMENT_TOKEN, LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY, ListKeyManager, LiveAnnouncer, MESSAGES_CONTAINER_ID, isFakeMousedownFromScreenReader, isFakeTouchstartFromScreenReader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}