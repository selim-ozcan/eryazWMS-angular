{"ast":null,"code":"import _slicedToArray from \"/Users/selim/repo/eryaz/angular/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"/Users/selim/repo/eryaz/angular/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _assertThisInitialized from \"/Users/selim/repo/eryaz/angular/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/selim/repo/eryaz/angular/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/selim/repo/eryaz/angular/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/selim/repo/eryaz/angular/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/selim/repo/eryaz/angular/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _classCallCheck from \"/Users/selim/repo/eryaz/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/selim/repo/eryaz/angular/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { coerceNumberProperty, coerceElement, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, forwardRef, Directive, Input, Injectable, Optional, Inject, Component, ViewEncapsulation, ChangeDetectionStrategy, Output, ViewChild, SkipSelf, ElementRef, NgModule } from '@angular/core';\nimport { Subject, of, Observable, fromEvent, animationFrameScheduler, asapScheduler, Subscription, isObservable } from 'rxjs';\nimport { distinctUntilChanged, auditTime, filter, takeUntil, startWith, pairwise, switchMap, shareReplay } from 'rxjs/operators';\nimport { DOCUMENT } from '@angular/common';\nimport * as i1 from '@angular/cdk/platform';\nimport { getRtlScrollAxisType, supportsScrollBehavior } from '@angular/cdk/platform';\nimport * as i2 from '@angular/cdk/bidi';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport * as i2$1 from '@angular/cdk/collections';\nimport { isDataSource, ArrayDataSource, _VIEW_REPEATER_STRATEGY, _RecycleViewRepeaterStrategy } from '@angular/cdk/collections';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** The injection token used to specify the virtual scrolling strategy. */\n\nvar _c0 = [\"contentWrapper\"];\nvar _c1 = [\"*\"];\nvar VIRTUAL_SCROLL_STRATEGY = new InjectionToken('VIRTUAL_SCROLL_STRATEGY');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Virtual scrolling strategy for lists with items of known fixed size. */\n\nvar FixedSizeVirtualScrollStrategy = /*#__PURE__*/function () {\n  /**\n   * @param itemSize The size of the items in the virtually scrolling list.\n   * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n   * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n   */\n  function FixedSizeVirtualScrollStrategy(itemSize, minBufferPx, maxBufferPx) {\n    _classCallCheck(this, FixedSizeVirtualScrollStrategy);\n\n    this._scrolledIndexChange = new Subject();\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n\n    this.scrolledIndexChange = this._scrolledIndexChange.pipe(distinctUntilChanged());\n    /** The attached viewport. */\n\n    this._viewport = null;\n    this._itemSize = itemSize;\n    this._minBufferPx = minBufferPx;\n    this._maxBufferPx = maxBufferPx;\n  }\n  /**\n   * Attaches this scroll strategy to a viewport.\n   * @param viewport The viewport to attach this strategy to.\n   */\n\n\n  _createClass(FixedSizeVirtualScrollStrategy, [{\n    key: \"attach\",\n    value: function attach(viewport) {\n      this._viewport = viewport;\n\n      this._updateTotalContentSize();\n\n      this._updateRenderedRange();\n    }\n    /** Detaches this scroll strategy from the currently attached viewport. */\n\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      this._scrolledIndexChange.complete();\n\n      this._viewport = null;\n    }\n    /**\n     * Update the item size and buffer size.\n     * @param itemSize The size of the items in the virtually scrolling list.\n     * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n\n  }, {\n    key: \"updateItemAndBufferSize\",\n    value: function updateItemAndBufferSize(itemSize, minBufferPx, maxBufferPx) {\n      if (maxBufferPx < minBufferPx && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');\n      }\n\n      this._itemSize = itemSize;\n      this._minBufferPx = minBufferPx;\n      this._maxBufferPx = maxBufferPx;\n\n      this._updateTotalContentSize();\n\n      this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n\n  }, {\n    key: \"onContentScrolled\",\n    value: function onContentScrolled() {\n      this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n\n  }, {\n    key: \"onDataLengthChanged\",\n    value: function onDataLengthChanged() {\n      this._updateTotalContentSize();\n\n      this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n\n  }, {\n    key: \"onContentRendered\",\n    value: function onContentRendered() {\n      /* no-op */\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n\n  }, {\n    key: \"onRenderedOffsetChanged\",\n    value: function onRenderedOffsetChanged() {\n      /* no-op */\n    }\n    /**\n     * Scroll to the offset for the given index.\n     * @param index The index of the element to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling.\n     */\n\n  }, {\n    key: \"scrollToIndex\",\n    value: function scrollToIndex(index, behavior) {\n      if (this._viewport) {\n        this._viewport.scrollToOffset(index * this._itemSize, behavior);\n      }\n    }\n    /** Update the viewport's total content size. */\n\n  }, {\n    key: \"_updateTotalContentSize\",\n    value: function _updateTotalContentSize() {\n      if (!this._viewport) {\n        return;\n      }\n\n      this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);\n    }\n    /** Update the viewport's rendered range. */\n\n  }, {\n    key: \"_updateRenderedRange\",\n    value: function _updateRenderedRange() {\n      if (!this._viewport) {\n        return;\n      }\n\n      var renderedRange = this._viewport.getRenderedRange();\n\n      var newRange = {\n        start: renderedRange.start,\n        end: renderedRange.end\n      };\n\n      var viewportSize = this._viewport.getViewportSize();\n\n      var dataLength = this._viewport.getDataLength();\n\n      var scrollOffset = this._viewport.measureScrollOffset(); // Prevent NaN as result when dividing by zero.\n\n\n      var firstVisibleIndex = this._itemSize > 0 ? scrollOffset / this._itemSize : 0; // If user scrolls to the bottom of the list and data changes to a smaller list\n\n      if (newRange.end > dataLength) {\n        // We have to recalculate the first visible index based on new data length and viewport size.\n        var maxVisibleItems = Math.ceil(viewportSize / this._itemSize);\n        var newVisibleIndex = Math.max(0, Math.min(firstVisibleIndex, dataLength - maxVisibleItems)); // If first visible index changed we must update scroll offset to handle start/end buffers\n        // Current range must also be adjusted to cover the new position (bottom of new list).\n\n        if (firstVisibleIndex != newVisibleIndex) {\n          firstVisibleIndex = newVisibleIndex;\n          scrollOffset = newVisibleIndex * this._itemSize;\n          newRange.start = Math.floor(firstVisibleIndex);\n        }\n\n        newRange.end = Math.max(0, Math.min(dataLength, newRange.start + maxVisibleItems));\n      }\n\n      var startBuffer = scrollOffset - newRange.start * this._itemSize;\n\n      if (startBuffer < this._minBufferPx && newRange.start != 0) {\n        var expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);\n        newRange.start = Math.max(0, newRange.start - expandStart);\n        newRange.end = Math.min(dataLength, Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize));\n      } else {\n        var endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);\n\n        if (endBuffer < this._minBufferPx && newRange.end != dataLength) {\n          var expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);\n\n          if (expandEnd > 0) {\n            newRange.end = Math.min(dataLength, newRange.end + expandEnd);\n            newRange.start = Math.max(0, Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize));\n          }\n        }\n      }\n\n      this._viewport.setRenderedRange(newRange);\n\n      this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);\n\n      this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));\n    }\n  }]);\n\n  return FixedSizeVirtualScrollStrategy;\n}();\n/**\n * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created\n * `FixedSizeVirtualScrollStrategy` from the given directive.\n * @param fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the\n *     `FixedSizeVirtualScrollStrategy` from.\n */\n\n\nfunction _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir) {\n  return fixedSizeDir._scrollStrategy;\n}\n/** A virtual scroll strategy that supports fixed-size items. */\n\n\nvar CdkFixedSizeVirtualScroll = /*#__PURE__*/function () {\n  function CdkFixedSizeVirtualScroll() {\n    _classCallCheck(this, CdkFixedSizeVirtualScroll);\n\n    this._itemSize = 20;\n    this._minBufferPx = 100;\n    this._maxBufferPx = 200;\n    /** The scroll strategy used by this directive. */\n\n    this._scrollStrategy = new FixedSizeVirtualScrollStrategy(this.itemSize, this.minBufferPx, this.maxBufferPx);\n  }\n  /** The size of the items in the list (in pixels). */\n\n\n  _createClass(CdkFixedSizeVirtualScroll, [{\n    key: \"itemSize\",\n    get: function get() {\n      return this._itemSize;\n    },\n    set: function set(value) {\n      this._itemSize = coerceNumberProperty(value);\n    }\n    /**\n     * The minimum amount of buffer rendered beyond the viewport (in pixels).\n     * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\n     */\n\n  }, {\n    key: \"minBufferPx\",\n    get: function get() {\n      return this._minBufferPx;\n    },\n    set: function set(value) {\n      this._minBufferPx = coerceNumberProperty(value);\n    }\n    /**\n     * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.\n     */\n\n  }, {\n    key: \"maxBufferPx\",\n    get: function get() {\n      return this._maxBufferPx;\n    },\n    set: function set(value) {\n      this._maxBufferPx = coerceNumberProperty(value);\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges() {\n      this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n  }]);\n\n  return CdkFixedSizeVirtualScroll;\n}();\n\nCdkFixedSizeVirtualScroll.ɵfac = function CdkFixedSizeVirtualScroll_Factory(t) {\n  return new (t || CdkFixedSizeVirtualScroll)();\n};\n\nCdkFixedSizeVirtualScroll.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkFixedSizeVirtualScroll,\n  selectors: [[\"cdk-virtual-scroll-viewport\", \"itemSize\", \"\"]],\n  inputs: {\n    itemSize: \"itemSize\",\n    minBufferPx: \"minBufferPx\",\n    maxBufferPx: \"maxBufferPx\"\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: VIRTUAL_SCROLL_STRATEGY,\n    useFactory: _fixedSizeVirtualScrollStrategyFactory,\n    deps: [forwardRef(function () {\n      return CdkFixedSizeVirtualScroll;\n    })]\n  }]), i0.ɵɵNgOnChangesFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkFixedSizeVirtualScroll, [{\n    type: Directive,\n    args: [{\n      selector: 'cdk-virtual-scroll-viewport[itemSize]',\n      providers: [{\n        provide: VIRTUAL_SCROLL_STRATEGY,\n        useFactory: _fixedSizeVirtualScrollStrategyFactory,\n        deps: [forwardRef(function () {\n          return CdkFixedSizeVirtualScroll;\n        })]\n      }]\n    }]\n  }], null, {\n    itemSize: [{\n      type: Input\n    }],\n    minBufferPx: [{\n      type: Input\n    }],\n    maxBufferPx: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Time in ms to throttle the scrolling events by default. */\n\n\nvar DEFAULT_SCROLL_TIME = 20;\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\n\nvar ScrollDispatcher = /*#__PURE__*/function () {\n  function ScrollDispatcher(_ngZone, _platform, document) {\n    _classCallCheck(this, ScrollDispatcher);\n\n    this._ngZone = _ngZone;\n    this._platform = _platform;\n    /** Subject for notifying that a registered scrollable reference element has been scrolled. */\n\n    this._scrolled = new Subject();\n    /** Keeps track of the global `scroll` and `resize` subscriptions. */\n\n    this._globalSubscription = null;\n    /** Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards. */\n\n    this._scrolledCount = 0;\n    /**\n     * Map of all the scrollable references that are registered with the service and their\n     * scroll event subscriptions.\n     */\n\n    this.scrollContainers = new Map();\n    this._document = document;\n  }\n  /**\n   * Registers a scrollable instance with the service and listens for its scrolled events. When the\n   * scrollable is scrolled, the service emits the event to its scrolled observable.\n   * @param scrollable Scrollable instance to be registered.\n   */\n\n\n  _createClass(ScrollDispatcher, [{\n    key: \"register\",\n    value: function register(scrollable) {\n      var _this = this;\n\n      if (!this.scrollContainers.has(scrollable)) {\n        this.scrollContainers.set(scrollable, scrollable.elementScrolled().subscribe(function () {\n          return _this._scrolled.next(scrollable);\n        }));\n      }\n    }\n    /**\n     * De-registers a Scrollable reference and unsubscribes from its scroll event observable.\n     * @param scrollable Scrollable instance to be deregistered.\n     */\n\n  }, {\n    key: \"deregister\",\n    value: function deregister(scrollable) {\n      var scrollableReference = this.scrollContainers.get(scrollable);\n\n      if (scrollableReference) {\n        scrollableReference.unsubscribe();\n        this.scrollContainers.delete(scrollable);\n      }\n    }\n    /**\n     * Returns an observable that emits an event whenever any of the registered Scrollable\n     * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n     * to override the default \"throttle\" time.\n     *\n     * **Note:** in order to avoid hitting change detection for every scroll event,\n     * all of the events emitted from this stream will be run outside the Angular zone.\n     * If you need to update any data bindings as a result of a scroll event, you have\n     * to run the callback using `NgZone.run`.\n     */\n\n  }, {\n    key: \"scrolled\",\n    value: function scrolled() {\n      var _this2 = this;\n\n      var auditTimeInMs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_SCROLL_TIME;\n\n      if (!this._platform.isBrowser) {\n        return of();\n      }\n\n      return new Observable(function (observer) {\n        if (!_this2._globalSubscription) {\n          _this2._addGlobalListener();\n        } // In the case of a 0ms delay, use an observable without auditTime\n        // since it does add a perceptible delay in processing overhead.\n\n\n        var subscription = auditTimeInMs > 0 ? _this2._scrolled.pipe(auditTime(auditTimeInMs)).subscribe(observer) : _this2._scrolled.subscribe(observer);\n        _this2._scrolledCount++;\n        return function () {\n          subscription.unsubscribe();\n          _this2._scrolledCount--;\n\n          if (!_this2._scrolledCount) {\n            _this2._removeGlobalListener();\n          }\n        };\n      });\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      var _this3 = this;\n\n      this._removeGlobalListener();\n\n      this.scrollContainers.forEach(function (_, container) {\n        return _this3.deregister(container);\n      });\n\n      this._scrolled.complete();\n    }\n    /**\n     * Returns an observable that emits whenever any of the\n     * scrollable ancestors of an element are scrolled.\n     * @param elementOrElementRef Element whose ancestors to listen for.\n     * @param auditTimeInMs Time to throttle the scroll events.\n     */\n\n  }, {\n    key: \"ancestorScrolled\",\n    value: function ancestorScrolled(elementOrElementRef, auditTimeInMs) {\n      var ancestors = this.getAncestorScrollContainers(elementOrElementRef);\n      return this.scrolled(auditTimeInMs).pipe(filter(function (target) {\n        return !target || ancestors.indexOf(target) > -1;\n      }));\n    }\n    /** Returns all registered Scrollables that contain the provided element. */\n\n  }, {\n    key: \"getAncestorScrollContainers\",\n    value: function getAncestorScrollContainers(elementOrElementRef) {\n      var _this4 = this;\n\n      var scrollingContainers = [];\n      this.scrollContainers.forEach(function (_subscription, scrollable) {\n        if (_this4._scrollableContainsElement(scrollable, elementOrElementRef)) {\n          scrollingContainers.push(scrollable);\n        }\n      });\n      return scrollingContainers;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n\n  }, {\n    key: \"_getWindow\",\n    value: function _getWindow() {\n      return this._document.defaultView || window;\n    }\n    /** Returns true if the element is contained within the provided Scrollable. */\n\n  }, {\n    key: \"_scrollableContainsElement\",\n    value: function _scrollableContainsElement(scrollable, elementOrElementRef) {\n      var element = coerceElement(elementOrElementRef);\n      var scrollableElement = scrollable.getElementRef().nativeElement; // Traverse through the element parents until we reach null, checking if any of the elements\n      // are the scrollable's element.\n\n      do {\n        if (element == scrollableElement) {\n          return true;\n        }\n      } while (element = element.parentElement);\n\n      return false;\n    }\n    /** Sets up the global scroll listeners. */\n\n  }, {\n    key: \"_addGlobalListener\",\n    value: function _addGlobalListener() {\n      var _this5 = this;\n\n      this._globalSubscription = this._ngZone.runOutsideAngular(function () {\n        var window = _this5._getWindow();\n\n        return fromEvent(window.document, 'scroll').subscribe(function () {\n          return _this5._scrolled.next();\n        });\n      });\n    }\n    /** Cleans up the global scroll listener. */\n\n  }, {\n    key: \"_removeGlobalListener\",\n    value: function _removeGlobalListener() {\n      if (this._globalSubscription) {\n        this._globalSubscription.unsubscribe();\n\n        this._globalSubscription = null;\n      }\n    }\n  }]);\n\n  return ScrollDispatcher;\n}();\n\nScrollDispatcher.ɵfac = function ScrollDispatcher_Factory(t) {\n  return new (t || ScrollDispatcher)(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1.Platform), i0.ɵɵinject(DOCUMENT, 8));\n};\n\nScrollDispatcher.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ScrollDispatcher,\n  factory: ScrollDispatcher.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ScrollDispatcher, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i0.NgZone\n    }, {\n      type: i1.Platform\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\n\n\nvar CdkScrollable = /*#__PURE__*/function () {\n  function CdkScrollable(elementRef, scrollDispatcher, ngZone, dir) {\n    var _this6 = this;\n\n    _classCallCheck(this, CdkScrollable);\n\n    this.elementRef = elementRef;\n    this.scrollDispatcher = scrollDispatcher;\n    this.ngZone = ngZone;\n    this.dir = dir;\n    this._destroyed = new Subject();\n    this._elementScrolled = new Observable(function (observer) {\n      return _this6.ngZone.runOutsideAngular(function () {\n        return fromEvent(_this6.elementRef.nativeElement, 'scroll').pipe(takeUntil(_this6._destroyed)).subscribe(observer);\n      });\n    });\n  }\n\n  _createClass(CdkScrollable, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this.scrollDispatcher.register(this);\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.scrollDispatcher.deregister(this);\n\n      this._destroyed.next();\n\n      this._destroyed.complete();\n    }\n    /** Returns observable that emits when a scroll event is fired on the host element. */\n\n  }, {\n    key: \"elementScrolled\",\n    value: function elementScrolled() {\n      return this._elementScrolled;\n    }\n    /** Gets the ElementRef for the viewport. */\n\n  }, {\n    key: \"getElementRef\",\n    value: function getElementRef() {\n      return this.elementRef;\n    }\n    /**\n     * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo\n     * method, since browsers are not consistent about what scrollLeft means in RTL. For this method\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param options specified the offsets to scroll to.\n     */\n\n  }, {\n    key: \"scrollTo\",\n    value: function scrollTo(options) {\n      var el = this.elementRef.nativeElement;\n      var isRtl = this.dir && this.dir.value == 'rtl'; // Rewrite start & end offsets as right or left offsets.\n\n      if (options.left == null) {\n        options.left = isRtl ? options.end : options.start;\n      }\n\n      if (options.right == null) {\n        options.right = isRtl ? options.start : options.end;\n      } // Rewrite the bottom offset as a top offset.\n\n\n      if (options.bottom != null) {\n        options.top = el.scrollHeight - el.clientHeight - options.bottom;\n      } // Rewrite the right offset as a left offset.\n\n\n      if (isRtl && getRtlScrollAxisType() != 0\n      /* RtlScrollAxisType.NORMAL */\n      ) {\n        if (options.left != null) {\n          options.right = el.scrollWidth - el.clientWidth - options.left;\n        }\n\n        if (getRtlScrollAxisType() == 2\n        /* RtlScrollAxisType.INVERTED */\n        ) {\n          options.left = options.right;\n        } else if (getRtlScrollAxisType() == 1\n        /* RtlScrollAxisType.NEGATED */\n        ) {\n          options.left = options.right ? -options.right : options.right;\n        }\n      } else {\n        if (options.right != null) {\n          options.left = el.scrollWidth - el.clientWidth - options.right;\n        }\n      }\n\n      this._applyScrollToOptions(options);\n    }\n  }, {\n    key: \"_applyScrollToOptions\",\n    value: function _applyScrollToOptions(options) {\n      var el = this.elementRef.nativeElement;\n\n      if (supportsScrollBehavior()) {\n        el.scrollTo(options);\n      } else {\n        if (options.top != null) {\n          el.scrollTop = options.top;\n        }\n\n        if (options.left != null) {\n          el.scrollLeft = options.left;\n        }\n      }\n    }\n    /**\n     * Measures the scroll offset relative to the specified edge of the viewport. This method can be\n     * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent\n     * about what scrollLeft means in RTL. The values returned by this method are normalized such that\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param from The edge to measure from.\n     */\n\n  }, {\n    key: \"measureScrollOffset\",\n    value: function measureScrollOffset(from) {\n      var LEFT = 'left';\n      var RIGHT = 'right';\n      var el = this.elementRef.nativeElement;\n\n      if (from == 'top') {\n        return el.scrollTop;\n      }\n\n      if (from == 'bottom') {\n        return el.scrollHeight - el.clientHeight - el.scrollTop;\n      } // Rewrite start & end as left or right offsets.\n\n\n      var isRtl = this.dir && this.dir.value == 'rtl';\n\n      if (from == 'start') {\n        from = isRtl ? RIGHT : LEFT;\n      } else if (from == 'end') {\n        from = isRtl ? LEFT : RIGHT;\n      }\n\n      if (isRtl && getRtlScrollAxisType() == 2\n      /* RtlScrollAxisType.INVERTED */\n      ) {\n        // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and\n        // 0 when scrolled all the way right.\n        if (from == LEFT) {\n          return el.scrollWidth - el.clientWidth - el.scrollLeft;\n        } else {\n          return el.scrollLeft;\n        }\n      } else if (isRtl && getRtlScrollAxisType() == 1\n      /* RtlScrollAxisType.NEGATED */\n      ) {\n        // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and\n        // 0 when scrolled all the way right.\n        if (from == LEFT) {\n          return el.scrollLeft + el.scrollWidth - el.clientWidth;\n        } else {\n          return -el.scrollLeft;\n        }\n      } else {\n        // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and\n        // (scrollWidth - clientWidth) when scrolled all the way right.\n        if (from == LEFT) {\n          return el.scrollLeft;\n        } else {\n          return el.scrollWidth - el.clientWidth - el.scrollLeft;\n        }\n      }\n    }\n  }]);\n\n  return CdkScrollable;\n}();\n\nCdkScrollable.ɵfac = function CdkScrollable_Factory(t) {\n  return new (t || CdkScrollable)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(ScrollDispatcher), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i2.Directionality, 8));\n};\n\nCdkScrollable.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkScrollable,\n  selectors: [[\"\", \"cdk-scrollable\", \"\"], [\"\", \"cdkScrollable\", \"\"]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkScrollable, [{\n    type: Directive,\n    args: [{\n      selector: '[cdk-scrollable], [cdkScrollable]'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: ScrollDispatcher\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i2.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n\nvar VIRTUAL_SCROLLABLE = new InjectionToken('VIRTUAL_SCROLLABLE');\n/**\n * Extending the {@link CdkScrollable} to be used as scrolling container for virtual scrolling.\n */\n\nvar CdkVirtualScrollable = /*#__PURE__*/function (_CdkScrollable) {\n  _inherits(CdkVirtualScrollable, _CdkScrollable);\n\n  var _super = _createSuper(CdkVirtualScrollable);\n\n  function CdkVirtualScrollable(elementRef, scrollDispatcher, ngZone, dir) {\n    _classCallCheck(this, CdkVirtualScrollable);\n\n    return _super.call(this, elementRef, scrollDispatcher, ngZone, dir);\n  }\n  /**\n   * Measure the viewport size for the provided orientation.\n   *\n   * @param orientation The orientation to measure the size from.\n   */\n\n\n  _createClass(CdkVirtualScrollable, [{\n    key: \"measureViewportSize\",\n    value: function measureViewportSize(orientation) {\n      var viewportEl = this.elementRef.nativeElement;\n      return orientation === 'horizontal' ? viewportEl.clientWidth : viewportEl.clientHeight;\n    }\n  }]);\n\n  return CdkVirtualScrollable;\n}(CdkScrollable);\n\nCdkVirtualScrollable.ɵfac = function CdkVirtualScrollable_Factory(t) {\n  return new (t || CdkVirtualScrollable)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(ScrollDispatcher), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i2.Directionality, 8));\n};\n\nCdkVirtualScrollable.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkVirtualScrollable,\n  features: [i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkVirtualScrollable, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: ScrollDispatcher\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i2.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n/** Time in ms to throttle the resize events by default. */\n\n\nvar DEFAULT_RESIZE_TIME = 20;\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * @docs-private\n */\n\nvar ViewportRuler = /*#__PURE__*/function () {\n  function ViewportRuler(_platform, ngZone, document) {\n    var _this7 = this;\n\n    _classCallCheck(this, ViewportRuler);\n\n    this._platform = _platform;\n    /** Stream of viewport change events. */\n\n    this._change = new Subject();\n    /** Event listener that will be used to handle the viewport change events. */\n\n    this._changeListener = function (event) {\n      _this7._change.next(event);\n    };\n\n    this._document = document;\n    ngZone.runOutsideAngular(function () {\n      if (_platform.isBrowser) {\n        var _window = _this7._getWindow(); // Note that bind the events ourselves, rather than going through something like RxJS's\n        // `fromEvent` so that we can ensure that they're bound outside of the NgZone.\n\n\n        _window.addEventListener('resize', _this7._changeListener);\n\n        _window.addEventListener('orientationchange', _this7._changeListener);\n      } // Clear the cached position so that the viewport is re-measured next time it is required.\n      // We don't need to keep track of the subscription, because it is completed on destroy.\n\n\n      _this7.change().subscribe(function () {\n        return _this7._viewportSize = null;\n      });\n    });\n  }\n\n  _createClass(ViewportRuler, [{\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this._platform.isBrowser) {\n        var _window2 = this._getWindow();\n\n        _window2.removeEventListener('resize', this._changeListener);\n\n        _window2.removeEventListener('orientationchange', this._changeListener);\n      }\n\n      this._change.complete();\n    }\n    /** Returns the viewport's width and height. */\n\n  }, {\n    key: \"getViewportSize\",\n    value: function getViewportSize() {\n      if (!this._viewportSize) {\n        this._updateViewportSize();\n      }\n\n      var output = {\n        width: this._viewportSize.width,\n        height: this._viewportSize.height\n      }; // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n\n      if (!this._platform.isBrowser) {\n        this._viewportSize = null;\n      }\n\n      return output;\n    }\n    /** Gets a ClientRect for the viewport's bounds. */\n\n  }, {\n    key: \"getViewportRect\",\n    value: function getViewportRect() {\n      // Use the document element's bounding rect rather than the window scroll properties\n      // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n      // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n      // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n      // can disagree when the page is pinch-zoomed (on devices that support touch).\n      // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n      // We use the documentElement instead of the body because, by default (without a css reset)\n      // browsers typically give the document body an 8px margin, which is not included in\n      // getBoundingClientRect().\n      var scrollPosition = this.getViewportScrollPosition();\n\n      var _this$getViewportSize = this.getViewportSize(),\n          width = _this$getViewportSize.width,\n          height = _this$getViewportSize.height;\n\n      return {\n        top: scrollPosition.top,\n        left: scrollPosition.left,\n        bottom: scrollPosition.top + height,\n        right: scrollPosition.left + width,\n        height: height,\n        width: width\n      };\n    }\n    /** Gets the (top, left) scroll position of the viewport. */\n\n  }, {\n    key: \"getViewportScrollPosition\",\n    value: function getViewportScrollPosition() {\n      // While we can get a reference to the fake document\n      // during SSR, it doesn't have getBoundingClientRect.\n      if (!this._platform.isBrowser) {\n        return {\n          top: 0,\n          left: 0\n        };\n      } // The top-left-corner of the viewport is determined by the scroll position of the document\n      // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n      // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n      // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n      // `document.documentElement` works consistently, where the `top` and `left` values will\n      // equal negative the scroll position.\n\n\n      var document = this._document;\n\n      var window = this._getWindow();\n\n      var documentElement = document.documentElement;\n      var documentRect = documentElement.getBoundingClientRect();\n      var top = -documentRect.top || document.body.scrollTop || window.scrollY || documentElement.scrollTop || 0;\n      var left = -documentRect.left || document.body.scrollLeft || window.scrollX || documentElement.scrollLeft || 0;\n      return {\n        top: top,\n        left: left\n      };\n    }\n    /**\n     * Returns a stream that emits whenever the size of the viewport changes.\n     * This stream emits outside of the Angular zone.\n     * @param throttleTime Time in milliseconds to throttle the stream.\n     */\n\n  }, {\n    key: \"change\",\n    value: function change() {\n      var throttleTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_RESIZE_TIME;\n      return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n\n  }, {\n    key: \"_getWindow\",\n    value: function _getWindow() {\n      return this._document.defaultView || window;\n    }\n    /** Updates the cached viewport size. */\n\n  }, {\n    key: \"_updateViewportSize\",\n    value: function _updateViewportSize() {\n      var window = this._getWindow();\n\n      this._viewportSize = this._platform.isBrowser ? {\n        width: window.innerWidth,\n        height: window.innerHeight\n      } : {\n        width: 0,\n        height: 0\n      };\n    }\n  }]);\n\n  return ViewportRuler;\n}();\n\nViewportRuler.ɵfac = function ViewportRuler_Factory(t) {\n  return new (t || ViewportRuler)(i0.ɵɵinject(i1.Platform), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(DOCUMENT, 8));\n};\n\nViewportRuler.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ViewportRuler,\n  factory: ViewportRuler.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ViewportRuler, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.Platform\n    }, {\n      type: i0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/** Checks if the given ranges are equal. */\n\n\nfunction rangesEqual(r1, r2) {\n  return r1.start == r2.start && r1.end == r2.end;\n}\n/**\n * Scheduler to be used for scroll events. Needs to fall back to\n * something that doesn't rely on requestAnimationFrame on environments\n * that don't support it (e.g. server-side rendering).\n */\n\n\nvar SCROLL_SCHEDULER = typeof requestAnimationFrame !== 'undefined' ? animationFrameScheduler : asapScheduler;\n/** A viewport that virtualizes its scrolling with the help of `CdkVirtualForOf`. */\n\nvar CdkVirtualScrollViewport = /*#__PURE__*/function (_CdkVirtualScrollable) {\n  _inherits(CdkVirtualScrollViewport, _CdkVirtualScrollable);\n\n  var _super2 = _createSuper(CdkVirtualScrollViewport);\n\n  function CdkVirtualScrollViewport(elementRef, _changeDetectorRef, ngZone, _scrollStrategy, dir, scrollDispatcher, viewportRuler, scrollable) {\n    var _this8;\n\n    _classCallCheck(this, CdkVirtualScrollViewport);\n\n    _this8 = _super2.call(this, elementRef, scrollDispatcher, ngZone, dir);\n    _this8.elementRef = elementRef;\n    _this8._changeDetectorRef = _changeDetectorRef;\n    _this8._scrollStrategy = _scrollStrategy;\n    _this8.scrollable = scrollable;\n    /** Emits when the viewport is detached from a CdkVirtualForOf. */\n\n    _this8._detachedSubject = new Subject();\n    /** Emits when the rendered range changes. */\n\n    _this8._renderedRangeSubject = new Subject();\n    _this8._orientation = 'vertical';\n    _this8._appendOnly = false; // Note: we don't use the typical EventEmitter here because we need to subscribe to the scroll\n    // strategy lazily (i.e. only if the user is actually listening to the events). We do this because\n    // depending on how the strategy calculates the scrolled index, it may come at a cost to\n    // performance.\n\n    /** Emits when the index of the first element visible in the viewport changes. */\n\n    _this8.scrolledIndexChange = new Observable(function (observer) {\n      return _this8._scrollStrategy.scrolledIndexChange.subscribe(function (index) {\n        return Promise.resolve().then(function () {\n          return _this8.ngZone.run(function () {\n            return observer.next(index);\n          });\n        });\n      });\n    });\n    /** A stream that emits whenever the rendered range changes. */\n\n    _this8.renderedRangeStream = _this8._renderedRangeSubject;\n    /**\n     * The total size of all content (in pixels), including content that is not currently rendered.\n     */\n\n    _this8._totalContentSize = 0;\n    /** A string representing the `style.width` property value to be used for the spacer element. */\n\n    _this8._totalContentWidth = '';\n    /** A string representing the `style.height` property value to be used for the spacer element. */\n\n    _this8._totalContentHeight = '';\n    /** The currently rendered range of indices. */\n\n    _this8._renderedRange = {\n      start: 0,\n      end: 0\n    };\n    /** The length of the data bound to this viewport (in number of items). */\n\n    _this8._dataLength = 0;\n    /** The size of the viewport (in pixels). */\n\n    _this8._viewportSize = 0;\n    /** The last rendered content offset that was set. */\n\n    _this8._renderedContentOffset = 0;\n    /**\n     * Whether the last rendered content offset was to the end of the content (and therefore needs to\n     * be rewritten as an offset to the start of the content).\n     */\n\n    _this8._renderedContentOffsetNeedsRewrite = false;\n    /** Whether there is a pending change detection cycle. */\n\n    _this8._isChangeDetectionPending = false;\n    /** A list of functions to run after the next change detection cycle. */\n\n    _this8._runAfterChangeDetection = [];\n    /** Subscription to changes in the viewport size. */\n\n    _this8._viewportChanges = Subscription.EMPTY;\n\n    if (!_scrollStrategy && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('Error: cdk-virtual-scroll-viewport requires the \"itemSize\" property to be set.');\n    }\n\n    _this8._viewportChanges = viewportRuler.change().subscribe(function () {\n      _this8.checkViewportSize();\n    });\n\n    if (!_this8.scrollable) {\n      // No scrollable is provided, so the virtual-scroll-viewport needs to become a scrollable\n      _this8.elementRef.nativeElement.classList.add('cdk-virtual-scrollable');\n\n      _this8.scrollable = _assertThisInitialized(_this8);\n    }\n\n    return _this8;\n  }\n  /** The direction the viewport scrolls. */\n\n\n  _createClass(CdkVirtualScrollViewport, [{\n    key: \"orientation\",\n    get: function get() {\n      return this._orientation;\n    },\n    set: function set(orientation) {\n      if (this._orientation !== orientation) {\n        this._orientation = orientation;\n\n        this._calculateSpacerSize();\n      }\n    }\n    /**\n     * Whether rendered items should persist in the DOM after scrolling out of view. By default, items\n     * will be removed.\n     */\n\n  }, {\n    key: \"appendOnly\",\n    get: function get() {\n      return this._appendOnly;\n    },\n    set: function set(value) {\n      this._appendOnly = coerceBooleanProperty(value);\n    }\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this9 = this;\n\n      if (this.scrollable === this) {\n        _get(_getPrototypeOf(CdkVirtualScrollViewport.prototype), \"ngOnInit\", this).call(this);\n      } // It's still too early to measure the viewport at this point. Deferring with a promise allows\n      // the Viewport to be rendered with the correct size before we measure. We run this outside the\n      // zone to avoid causing more change detection cycles. We handle the change detection loop\n      // ourselves instead.\n\n\n      this.ngZone.runOutsideAngular(function () {\n        return Promise.resolve().then(function () {\n          _this9._measureViewportSize();\n\n          _this9._scrollStrategy.attach(_this9);\n\n          _this9.scrollable.elementScrolled().pipe( // Start off with a fake scroll event so we properly detect our initial position.\n          startWith(null), // Collect multiple events into one until the next animation frame. This way if\n          // there are multiple scroll events in the same frame we only need to recheck\n          // our layout once.\n          auditTime(0, SCROLL_SCHEDULER)).subscribe(function () {\n            return _this9._scrollStrategy.onContentScrolled();\n          });\n\n          _this9._markChangeDetectionNeeded();\n        });\n      });\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.detach();\n\n      this._scrollStrategy.detach(); // Complete all subjects\n\n\n      this._renderedRangeSubject.complete();\n\n      this._detachedSubject.complete();\n\n      this._viewportChanges.unsubscribe();\n\n      _get(_getPrototypeOf(CdkVirtualScrollViewport.prototype), \"ngOnDestroy\", this).call(this);\n    }\n    /** Attaches a `CdkVirtualScrollRepeater` to this viewport. */\n\n  }, {\n    key: \"attach\",\n    value: function attach(forOf) {\n      var _this10 = this;\n\n      if (this._forOf && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error('CdkVirtualScrollViewport is already attached.');\n      } // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length\n      // changes. Run outside the zone to avoid triggering change detection, since we're managing the\n      // change detection loop ourselves.\n\n\n      this.ngZone.runOutsideAngular(function () {\n        _this10._forOf = forOf;\n\n        _this10._forOf.dataStream.pipe(takeUntil(_this10._detachedSubject)).subscribe(function (data) {\n          var newLength = data.length;\n\n          if (newLength !== _this10._dataLength) {\n            _this10._dataLength = newLength;\n\n            _this10._scrollStrategy.onDataLengthChanged();\n          }\n\n          _this10._doChangeDetection();\n        });\n      });\n    }\n    /** Detaches the current `CdkVirtualForOf`. */\n\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      this._forOf = null;\n\n      this._detachedSubject.next();\n    }\n    /** Gets the length of the data bound to this viewport (in number of items). */\n\n  }, {\n    key: \"getDataLength\",\n    value: function getDataLength() {\n      return this._dataLength;\n    }\n    /** Gets the size of the viewport (in pixels). */\n\n  }, {\n    key: \"getViewportSize\",\n    value: function getViewportSize() {\n      return this._viewportSize;\n    } // TODO(mmalerba): This is technically out of sync with what's really rendered until a render\n    // cycle happens. I'm being careful to only call it after the render cycle is complete and before\n    // setting it to something else, but its error prone and should probably be split into\n    // `pendingRange` and `renderedRange`, the latter reflecting whats actually in the DOM.\n\n    /** Get the current rendered range of items. */\n\n  }, {\n    key: \"getRenderedRange\",\n    value: function getRenderedRange() {\n      return this._renderedRange;\n    }\n  }, {\n    key: \"measureBoundingClientRectWithScrollOffset\",\n    value: function measureBoundingClientRectWithScrollOffset(from) {\n      return this.getElementRef().nativeElement.getBoundingClientRect()[from];\n    }\n    /**\n     * Sets the total size of all content (in pixels), including content that is not currently\n     * rendered.\n     */\n\n  }, {\n    key: \"setTotalContentSize\",\n    value: function setTotalContentSize(size) {\n      if (this._totalContentSize !== size) {\n        this._totalContentSize = size;\n\n        this._calculateSpacerSize();\n\n        this._markChangeDetectionNeeded();\n      }\n    }\n    /** Sets the currently rendered range of indices. */\n\n  }, {\n    key: \"setRenderedRange\",\n    value: function setRenderedRange(range) {\n      var _this11 = this;\n\n      if (!rangesEqual(this._renderedRange, range)) {\n        if (this.appendOnly) {\n          range = {\n            start: 0,\n            end: Math.max(this._renderedRange.end, range.end)\n          };\n        }\n\n        this._renderedRangeSubject.next(this._renderedRange = range);\n\n        this._markChangeDetectionNeeded(function () {\n          return _this11._scrollStrategy.onContentRendered();\n        });\n      }\n    }\n    /**\n     * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).\n     */\n\n  }, {\n    key: \"getOffsetToRenderedContentStart\",\n    value: function getOffsetToRenderedContentStart() {\n      return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;\n    }\n    /**\n     * Sets the offset from the start of the viewport to either the start or end of the rendered data\n     * (in pixels).\n     */\n\n  }, {\n    key: \"setRenderedContentOffset\",\n    value: function setRenderedContentOffset(offset) {\n      var _this12 = this;\n\n      var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'to-start';\n      // In appendOnly, we always start from the top\n      offset = this.appendOnly && to === 'to-start' ? 0 : offset; // For a horizontal viewport in a right-to-left language we need to translate along the x-axis\n      // in the negative direction.\n\n      var isRtl = this.dir && this.dir.value == 'rtl';\n      var isHorizontal = this.orientation == 'horizontal';\n      var axis = isHorizontal ? 'X' : 'Y';\n      var axisDirection = isHorizontal && isRtl ? -1 : 1;\n      var transform = \"translate\".concat(axis, \"(\").concat(Number(axisDirection * offset), \"px)\");\n      this._renderedContentOffset = offset;\n\n      if (to === 'to-end') {\n        transform += \" translate\".concat(axis, \"(-100%)\"); // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise\n        // elements will appear to expand in the wrong direction (e.g. `mat-expansion-panel` would\n        // expand upward).\n\n        this._renderedContentOffsetNeedsRewrite = true;\n      }\n\n      if (this._renderedContentTransform != transform) {\n        // We know this value is safe because we parse `offset` with `Number()` before passing it\n        // into the string.\n        this._renderedContentTransform = transform;\n\n        this._markChangeDetectionNeeded(function () {\n          if (_this12._renderedContentOffsetNeedsRewrite) {\n            _this12._renderedContentOffset -= _this12.measureRenderedContentSize();\n            _this12._renderedContentOffsetNeedsRewrite = false;\n\n            _this12.setRenderedContentOffset(_this12._renderedContentOffset);\n          } else {\n            _this12._scrollStrategy.onRenderedOffsetChanged();\n          }\n        });\n      }\n    }\n    /**\n     * Scrolls to the given offset from the start of the viewport. Please note that this is not always\n     * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left\n     * direction, this would be the equivalent of setting a fictional `scrollRight` property.\n     * @param offset The offset to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     */\n\n  }, {\n    key: \"scrollToOffset\",\n    value: function scrollToOffset(offset) {\n      var behavior = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'auto';\n      var options = {\n        behavior: behavior\n      };\n\n      if (this.orientation === 'horizontal') {\n        options.start = offset;\n      } else {\n        options.top = offset;\n      }\n\n      this.scrollable.scrollTo(options);\n    }\n    /**\n     * Scrolls to the offset for the given index.\n     * @param index The index of the element to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     */\n\n  }, {\n    key: \"scrollToIndex\",\n    value: function scrollToIndex(index) {\n      var behavior = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'auto';\n\n      this._scrollStrategy.scrollToIndex(index, behavior);\n    }\n    /**\n     * Gets the current scroll offset from the start of the scrollable (in pixels).\n     * @param from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'\n     *     in horizontal mode.\n     */\n\n  }, {\n    key: \"measureScrollOffset\",\n    value: function measureScrollOffset(from) {\n      var _this13 = this;\n\n      // This is to break the call cycle\n      var measureScrollOffset;\n\n      if (this.scrollable == this) {\n        measureScrollOffset = function measureScrollOffset(_from) {\n          return _get(_getPrototypeOf(CdkVirtualScrollViewport.prototype), \"measureScrollOffset\", _this13).call(_this13, _from);\n        };\n      } else {\n        measureScrollOffset = function measureScrollOffset(_from) {\n          return _this13.scrollable.measureScrollOffset(_from);\n        };\n      }\n\n      return Math.max(0, measureScrollOffset(from !== null && from !== void 0 ? from : this.orientation === 'horizontal' ? 'start' : 'top') - this.measureViewportOffset());\n    }\n    /**\n     * Measures the offset of the viewport from the scrolling container\n     * @param from The edge to measure from.\n     */\n\n  }, {\n    key: \"measureViewportOffset\",\n    value: function measureViewportOffset(from) {\n      var _a;\n\n      var fromRect;\n      var LEFT = 'left';\n      var RIGHT = 'right';\n      var isRtl = ((_a = this.dir) === null || _a === void 0 ? void 0 : _a.value) == 'rtl';\n\n      if (from == 'start') {\n        fromRect = isRtl ? RIGHT : LEFT;\n      } else if (from == 'end') {\n        fromRect = isRtl ? LEFT : RIGHT;\n      } else if (from) {\n        fromRect = from;\n      } else {\n        fromRect = this.orientation === 'horizontal' ? 'left' : 'top';\n      }\n\n      var scrollerClientRect = this.scrollable.measureBoundingClientRectWithScrollOffset(fromRect);\n      var viewportClientRect = this.elementRef.nativeElement.getBoundingClientRect()[fromRect];\n      return viewportClientRect - scrollerClientRect;\n    }\n    /** Measure the combined size of all of the rendered items. */\n\n  }, {\n    key: \"measureRenderedContentSize\",\n    value: function measureRenderedContentSize() {\n      var contentEl = this._contentWrapper.nativeElement;\n      return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;\n    }\n    /**\n     * Measure the total combined size of the given range. Throws if the range includes items that are\n     * not rendered.\n     */\n\n  }, {\n    key: \"measureRangeSize\",\n    value: function measureRangeSize(range) {\n      if (!this._forOf) {\n        return 0;\n      }\n\n      return this._forOf.measureRangeSize(range, this.orientation);\n    }\n    /** Update the viewport dimensions and re-render. */\n\n  }, {\n    key: \"checkViewportSize\",\n    value: function checkViewportSize() {\n      // TODO: Cleanup later when add logic for handling content resize\n      this._measureViewportSize();\n\n      this._scrollStrategy.onDataLengthChanged();\n    }\n    /** Measure the viewport size. */\n\n  }, {\n    key: \"_measureViewportSize\",\n    value: function _measureViewportSize() {\n      this._viewportSize = this.scrollable.measureViewportSize(this.orientation);\n    }\n    /** Queue up change detection to run. */\n\n  }, {\n    key: \"_markChangeDetectionNeeded\",\n    value: function _markChangeDetectionNeeded(runAfter) {\n      var _this14 = this;\n\n      if (runAfter) {\n        this._runAfterChangeDetection.push(runAfter);\n      } // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of\n      // properties sequentially we only have to run `_doChangeDetection` once at the end.\n\n\n      if (!this._isChangeDetectionPending) {\n        this._isChangeDetectionPending = true;\n        this.ngZone.runOutsideAngular(function () {\n          return Promise.resolve().then(function () {\n            _this14._doChangeDetection();\n          });\n        });\n      }\n    }\n    /** Run change detection. */\n\n  }, {\n    key: \"_doChangeDetection\",\n    value: function _doChangeDetection() {\n      var _this15 = this;\n\n      this._isChangeDetectionPending = false; // Apply the content transform. The transform can't be set via an Angular binding because\n      // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of\n      // string literals, a variable that can only be 'X' or 'Y', and user input that is run through\n      // the `Number` function first to coerce it to a numeric value.\n\n      this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform; // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection\n      // from the root, since the repeated items are content projected in. Calling `detectChanges`\n      // instead does not properly check the projected content.\n\n      this.ngZone.run(function () {\n        return _this15._changeDetectorRef.markForCheck();\n      });\n      var runAfterChangeDetection = this._runAfterChangeDetection;\n      this._runAfterChangeDetection = [];\n\n      var _iterator = _createForOfIteratorHelper(runAfterChangeDetection),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var fn = _step.value;\n          fn();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n    /** Calculates the `style.width` and `style.height` for the spacer element. */\n\n  }, {\n    key: \"_calculateSpacerSize\",\n    value: function _calculateSpacerSize() {\n      this._totalContentHeight = this.orientation === 'horizontal' ? '' : \"\".concat(this._totalContentSize, \"px\");\n      this._totalContentWidth = this.orientation === 'horizontal' ? \"\".concat(this._totalContentSize, \"px\") : '';\n    }\n  }]);\n\n  return CdkVirtualScrollViewport;\n}(CdkVirtualScrollable);\n\nCdkVirtualScrollViewport.ɵfac = function CdkVirtualScrollViewport_Factory(t) {\n  return new (t || CdkVirtualScrollViewport)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(VIRTUAL_SCROLL_STRATEGY, 8), i0.ɵɵdirectiveInject(i2.Directionality, 8), i0.ɵɵdirectiveInject(ScrollDispatcher), i0.ɵɵdirectiveInject(ViewportRuler), i0.ɵɵdirectiveInject(VIRTUAL_SCROLLABLE, 8));\n};\n\nCdkVirtualScrollViewport.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: CdkVirtualScrollViewport,\n  selectors: [[\"cdk-virtual-scroll-viewport\"]],\n  viewQuery: function CdkVirtualScrollViewport_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 7);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._contentWrapper = _t.first);\n    }\n  },\n  hostAttrs: [1, \"cdk-virtual-scroll-viewport\"],\n  hostVars: 4,\n  hostBindings: function CdkVirtualScrollViewport_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"cdk-virtual-scroll-orientation-horizontal\", ctx.orientation === \"horizontal\")(\"cdk-virtual-scroll-orientation-vertical\", ctx.orientation !== \"horizontal\");\n    }\n  },\n  inputs: {\n    orientation: \"orientation\",\n    appendOnly: \"appendOnly\"\n  },\n  outputs: {\n    scrolledIndexChange: \"scrolledIndexChange\"\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CdkScrollable,\n    useFactory: function useFactory(virtualScrollable, viewport) {\n      return virtualScrollable || viewport;\n    },\n    deps: [CdkVirtualScrollable, CdkVirtualScrollViewport]\n  }]), i0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c1,\n  decls: 4,\n  vars: 4,\n  consts: [[1, \"cdk-virtual-scroll-content-wrapper\"], [\"contentWrapper\", \"\"], [1, \"cdk-virtual-scroll-spacer\"]],\n  template: function CdkVirtualScrollViewport_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵelementStart(0, \"div\", 0, 1);\n      i0.ɵɵprojection(2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(3, \"div\", 2);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵstyleProp(\"width\", ctx._totalContentWidth)(\"height\", ctx._totalContentHeight);\n    }\n  },\n  styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;transform:translateZ(0)}.cdk-virtual-scrollable{overflow:auto;will-change:scroll-position;contain:strict;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{height:1px;transform-origin:0 0;flex:0 0 auto}[dir=rtl] .cdk-virtual-scroll-spacer{transform-origin:100% 0}\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkVirtualScrollViewport, [{\n    type: Component,\n    args: [{\n      selector: 'cdk-virtual-scroll-viewport',\n      host: {\n        'class': 'cdk-virtual-scroll-viewport',\n        '[class.cdk-virtual-scroll-orientation-horizontal]': 'orientation === \"horizontal\"',\n        '[class.cdk-virtual-scroll-orientation-vertical]': 'orientation !== \"horizontal\"'\n      },\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      providers: [{\n        provide: CdkScrollable,\n        useFactory: function useFactory(virtualScrollable, viewport) {\n          return virtualScrollable || viewport;\n        },\n        deps: [CdkVirtualScrollable, CdkVirtualScrollViewport]\n      }],\n      template: \"<!--\\n  Wrap the rendered content in an element that will be used to offset it based on the scroll\\n  position.\\n-->\\n<div #contentWrapper class=\\\"cdk-virtual-scroll-content-wrapper\\\">\\n  <ng-content></ng-content>\\n</div>\\n<!--\\n  Spacer used to force the scrolling container to the correct size for the *total* number of items\\n  so that the scrollbar captures the size of the entire data set.\\n-->\\n<div class=\\\"cdk-virtual-scroll-spacer\\\"\\n     [style.width]=\\\"_totalContentWidth\\\" [style.height]=\\\"_totalContentHeight\\\"></div>\\n\",\n      styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;transform:translateZ(0)}.cdk-virtual-scrollable{overflow:auto;will-change:scroll-position;contain:strict;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{height:1px;transform-origin:0 0;flex:0 0 auto}[dir=rtl] .cdk-virtual-scroll-spacer{transform-origin:100% 0}\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [VIRTUAL_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: i2.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ScrollDispatcher\n    }, {\n      type: ViewportRuler\n    }, {\n      type: CdkVirtualScrollable,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [VIRTUAL_SCROLLABLE]\n      }]\n    }];\n  }, {\n    orientation: [{\n      type: Input\n    }],\n    appendOnly: [{\n      type: Input\n    }],\n    scrolledIndexChange: [{\n      type: Output\n    }],\n    _contentWrapper: [{\n      type: ViewChild,\n      args: ['contentWrapper', {\n        static: true\n      }]\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Helper to extract the offset of a DOM Node in a certain direction. */\n\n\nfunction getOffset(orientation, direction, node) {\n  var el = node;\n\n  if (!el.getBoundingClientRect) {\n    return 0;\n  }\n\n  var rect = el.getBoundingClientRect();\n\n  if (orientation === 'horizontal') {\n    return direction === 'start' ? rect.left : rect.right;\n  }\n\n  return direction === 'start' ? rect.top : rect.bottom;\n}\n/**\n * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling\n * container.\n */\n\n\nvar CdkVirtualForOf = /*#__PURE__*/function () {\n  function CdkVirtualForOf(\n  /** The view container to add items to. */\n  _viewContainerRef,\n  /** The template to use when stamping out new items. */\n  _template,\n  /** The set of available differs. */\n  _differs,\n  /** The strategy used to render items in the virtual scroll viewport. */\n  _viewRepeater,\n  /** The virtual scrolling viewport that these items are being rendered in. */\n  _viewport, ngZone) {\n    var _this16 = this;\n\n    _classCallCheck(this, CdkVirtualForOf);\n\n    this._viewContainerRef = _viewContainerRef;\n    this._template = _template;\n    this._differs = _differs;\n    this._viewRepeater = _viewRepeater;\n    this._viewport = _viewport;\n    /** Emits when the rendered view of the data changes. */\n\n    this.viewChange = new Subject();\n    /** Subject that emits when a new DataSource instance is given. */\n\n    this._dataSourceChanges = new Subject();\n    /** Emits whenever the data in the current DataSource changes. */\n\n    this.dataStream = this._dataSourceChanges.pipe( // Start off with null `DataSource`.\n    startWith(null), // Bundle up the previous and current data sources so we can work with both.\n    pairwise(), // Use `_changeDataSource` to disconnect from the previous data source and connect to the\n    // new one, passing back a stream of data changes which we run through `switchMap` to give\n    // us a data stream that emits the latest data from whatever the current `DataSource` is.\n    switchMap(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          prev = _ref2[0],\n          cur = _ref2[1];\n\n      return _this16._changeDataSource(prev, cur);\n    }), // Replay the last emitted data when someone subscribes.\n    shareReplay(1));\n    /** The differ used to calculate changes to the data. */\n\n    this._differ = null;\n    /** Whether the rendered data should be updated during the next ngDoCheck cycle. */\n\n    this._needsUpdate = false;\n    this._destroyed = new Subject();\n    this.dataStream.subscribe(function (data) {\n      _this16._data = data;\n\n      _this16._onRenderedDataChange();\n    });\n\n    this._viewport.renderedRangeStream.pipe(takeUntil(this._destroyed)).subscribe(function (range) {\n      _this16._renderedRange = range;\n\n      if (_this16.viewChange.observers.length) {\n        ngZone.run(function () {\n          return _this16.viewChange.next(_this16._renderedRange);\n        });\n      }\n\n      _this16._onRenderedDataChange();\n    });\n\n    this._viewport.attach(this);\n  }\n  /** The DataSource to display. */\n\n\n  _createClass(CdkVirtualForOf, [{\n    key: \"cdkVirtualForOf\",\n    get: function get() {\n      return this._cdkVirtualForOf;\n    },\n    set: function set(value) {\n      this._cdkVirtualForOf = value;\n\n      if (isDataSource(value)) {\n        this._dataSourceChanges.next(value);\n      } else {\n        // If value is an an NgIterable, convert it to an array.\n        this._dataSourceChanges.next(new ArrayDataSource(isObservable(value) ? value : Array.from(value || [])));\n      }\n    }\n    /**\n     * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and\n     * the item and produces a value to be used as the item's identity when tracking changes.\n     */\n\n  }, {\n    key: \"cdkVirtualForTrackBy\",\n    get: function get() {\n      return this._cdkVirtualForTrackBy;\n    },\n    set: function set(fn) {\n      var _this17 = this;\n\n      this._needsUpdate = true;\n      this._cdkVirtualForTrackBy = fn ? function (index, item) {\n        return fn(index + (_this17._renderedRange ? _this17._renderedRange.start : 0), item);\n      } : undefined;\n    }\n    /** The template used to stamp out new elements. */\n\n  }, {\n    key: \"cdkVirtualForTemplate\",\n    set: function set(value) {\n      if (value) {\n        this._needsUpdate = true;\n        this._template = value;\n      }\n    }\n    /**\n     * The size of the cache used to store templates that are not being used for re-use later.\n     * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\n     */\n\n  }, {\n    key: \"cdkVirtualForTemplateCacheSize\",\n    get: function get() {\n      return this._viewRepeater.viewCacheSize;\n    },\n    set: function set(size) {\n      this._viewRepeater.viewCacheSize = coerceNumberProperty(size);\n    }\n    /**\n     * Measures the combined size (width for horizontal orientation, height for vertical) of all items\n     * in the specified range. Throws an error if the range includes items that are not currently\n     * rendered.\n     */\n\n  }, {\n    key: \"measureRangeSize\",\n    value: function measureRangeSize(range, orientation) {\n      if (range.start >= range.end) {\n        return 0;\n      }\n\n      if ((range.start < this._renderedRange.start || range.end > this._renderedRange.end) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error(\"Error: attempted to measure an item that isn't rendered.\");\n      } // The index into the list of rendered views for the first item in the range.\n\n\n      var renderedStartIndex = range.start - this._renderedRange.start; // The length of the range we're measuring.\n\n      var rangeLen = range.end - range.start; // Loop over all the views, find the first and land node and compute the size by subtracting\n      // the top of the first node from the bottom of the last one.\n\n      var firstNode;\n      var lastNode; // Find the first node by starting from the beginning and going forwards.\n\n      for (var i = 0; i < rangeLen; i++) {\n        var view = this._viewContainerRef.get(i + renderedStartIndex);\n\n        if (view && view.rootNodes.length) {\n          firstNode = lastNode = view.rootNodes[0];\n          break;\n        }\n      } // Find the last node by starting from the end and going backwards.\n\n\n      for (var _i = rangeLen - 1; _i > -1; _i--) {\n        var _view = this._viewContainerRef.get(_i + renderedStartIndex);\n\n        if (_view && _view.rootNodes.length) {\n          lastNode = _view.rootNodes[_view.rootNodes.length - 1];\n          break;\n        }\n      }\n\n      return firstNode && lastNode ? getOffset(orientation, 'end', lastNode) - getOffset(orientation, 'start', firstNode) : 0;\n    }\n  }, {\n    key: \"ngDoCheck\",\n    value: function ngDoCheck() {\n      if (this._differ && this._needsUpdate) {\n        // TODO(mmalerba): We should differentiate needs update due to scrolling and a new portion of\n        // this list being rendered (can use simpler algorithm) vs needs update due to data actually\n        // changing (need to do this diff).\n        var changes = this._differ.diff(this._renderedItems);\n\n        if (!changes) {\n          this._updateContext();\n        } else {\n          this._applyChanges(changes);\n        }\n\n        this._needsUpdate = false;\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._viewport.detach();\n\n      this._dataSourceChanges.next(undefined);\n\n      this._dataSourceChanges.complete();\n\n      this.viewChange.complete();\n\n      this._destroyed.next();\n\n      this._destroyed.complete();\n\n      this._viewRepeater.detach();\n    }\n    /** React to scroll state changes in the viewport. */\n\n  }, {\n    key: \"_onRenderedDataChange\",\n    value: function _onRenderedDataChange() {\n      var _this18 = this;\n\n      if (!this._renderedRange) {\n        return;\n      }\n\n      this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);\n\n      if (!this._differ) {\n        // Use a wrapper function for the `trackBy` so any new values are\n        // picked up automatically without having to recreate the differ.\n        this._differ = this._differs.find(this._renderedItems).create(function (index, item) {\n          return _this18.cdkVirtualForTrackBy ? _this18.cdkVirtualForTrackBy(index, item) : item;\n        });\n      }\n\n      this._needsUpdate = true;\n    }\n    /** Swap out one `DataSource` for another. */\n\n  }, {\n    key: \"_changeDataSource\",\n    value: function _changeDataSource(oldDs, newDs) {\n      if (oldDs) {\n        oldDs.disconnect(this);\n      }\n\n      this._needsUpdate = true;\n      return newDs ? newDs.connect(this) : of();\n    }\n    /** Update the `CdkVirtualForOfContext` for all views. */\n\n  }, {\n    key: \"_updateContext\",\n    value: function _updateContext() {\n      var count = this._data.length;\n      var i = this._viewContainerRef.length;\n\n      while (i--) {\n        var view = this._viewContainerRef.get(i);\n\n        view.context.index = this._renderedRange.start + i;\n        view.context.count = count;\n\n        this._updateComputedContextProperties(view.context);\n\n        view.detectChanges();\n      }\n    }\n    /** Apply changes to the DOM. */\n\n  }, {\n    key: \"_applyChanges\",\n    value: function _applyChanges(changes) {\n      var _this19 = this;\n\n      this._viewRepeater.applyChanges(changes, this._viewContainerRef, function (record, _adjustedPreviousIndex, currentIndex) {\n        return _this19._getEmbeddedViewArgs(record, currentIndex);\n      }, function (record) {\n        return record.item;\n      }); // Update $implicit for any items that had an identity change.\n\n\n      changes.forEachIdentityChange(function (record) {\n        var view = _this19._viewContainerRef.get(record.currentIndex);\n\n        view.context.$implicit = record.item;\n      }); // Update the context variables on all items.\n\n      var count = this._data.length;\n      var i = this._viewContainerRef.length;\n\n      while (i--) {\n        var view = this._viewContainerRef.get(i);\n\n        view.context.index = this._renderedRange.start + i;\n        view.context.count = count;\n\n        this._updateComputedContextProperties(view.context);\n      }\n    }\n    /** Update the computed properties on the `CdkVirtualForOfContext`. */\n\n  }, {\n    key: \"_updateComputedContextProperties\",\n    value: function _updateComputedContextProperties(context) {\n      context.first = context.index === 0;\n      context.last = context.index === context.count - 1;\n      context.even = context.index % 2 === 0;\n      context.odd = !context.even;\n    }\n  }, {\n    key: \"_getEmbeddedViewArgs\",\n    value: function _getEmbeddedViewArgs(record, index) {\n      // Note that it's important that we insert the item directly at the proper index,\n      // rather than inserting it and the moving it in place, because if there's a directive\n      // on the same node that injects the `ViewContainerRef`, Angular will insert another\n      // comment node which can throw off the move when it's being repeated for all items.\n      return {\n        templateRef: this._template,\n        context: {\n          $implicit: record.item,\n          // It's guaranteed that the iterable is not \"undefined\" or \"null\" because we only\n          // generate views for elements if the \"cdkVirtualForOf\" iterable has elements.\n          cdkVirtualForOf: this._cdkVirtualForOf,\n          index: -1,\n          count: -1,\n          first: false,\n          last: false,\n          odd: false,\n          even: false\n        },\n        index: index\n      };\n    }\n  }]);\n\n  return CdkVirtualForOf;\n}();\n\nCdkVirtualForOf.ɵfac = function CdkVirtualForOf_Factory(t) {\n  return new (t || CdkVirtualForOf)(i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.TemplateRef), i0.ɵɵdirectiveInject(i0.IterableDiffers), i0.ɵɵdirectiveInject(_VIEW_REPEATER_STRATEGY), i0.ɵɵdirectiveInject(CdkVirtualScrollViewport, 4), i0.ɵɵdirectiveInject(i0.NgZone));\n};\n\nCdkVirtualForOf.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkVirtualForOf,\n  selectors: [[\"\", \"cdkVirtualFor\", \"\", \"cdkVirtualForOf\", \"\"]],\n  inputs: {\n    cdkVirtualForOf: \"cdkVirtualForOf\",\n    cdkVirtualForTrackBy: \"cdkVirtualForTrackBy\",\n    cdkVirtualForTemplate: \"cdkVirtualForTemplate\",\n    cdkVirtualForTemplateCacheSize: \"cdkVirtualForTemplateCacheSize\"\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: _VIEW_REPEATER_STRATEGY,\n    useClass: _RecycleViewRepeaterStrategy\n  }])]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkVirtualForOf, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkVirtualFor][cdkVirtualForOf]',\n      providers: [{\n        provide: _VIEW_REPEATER_STRATEGY,\n        useClass: _RecycleViewRepeaterStrategy\n      }]\n    }]\n  }], function () {\n    return [{\n      type: i0.ViewContainerRef\n    }, {\n      type: i0.TemplateRef\n    }, {\n      type: i0.IterableDiffers\n    }, {\n      type: i2$1._RecycleViewRepeaterStrategy,\n      decorators: [{\n        type: Inject,\n        args: [_VIEW_REPEATER_STRATEGY]\n      }]\n    }, {\n      type: CdkVirtualScrollViewport,\n      decorators: [{\n        type: SkipSelf\n      }]\n    }, {\n      type: i0.NgZone\n    }];\n  }, {\n    cdkVirtualForOf: [{\n      type: Input\n    }],\n    cdkVirtualForTrackBy: [{\n      type: Input\n    }],\n    cdkVirtualForTemplate: [{\n      type: Input\n    }],\n    cdkVirtualForTemplateCacheSize: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * Provides a virtual scrollable for the element it is attached to.\n */\n\n\nvar CdkVirtualScrollableElement = /*#__PURE__*/function (_CdkVirtualScrollable2) {\n  _inherits(CdkVirtualScrollableElement, _CdkVirtualScrollable2);\n\n  var _super3 = _createSuper(CdkVirtualScrollableElement);\n\n  function CdkVirtualScrollableElement(elementRef, scrollDispatcher, ngZone, dir) {\n    _classCallCheck(this, CdkVirtualScrollableElement);\n\n    return _super3.call(this, elementRef, scrollDispatcher, ngZone, dir);\n  }\n\n  _createClass(CdkVirtualScrollableElement, [{\n    key: \"measureBoundingClientRectWithScrollOffset\",\n    value: function measureBoundingClientRectWithScrollOffset(from) {\n      return this.getElementRef().nativeElement.getBoundingClientRect()[from] - this.measureScrollOffset(from);\n    }\n  }]);\n\n  return CdkVirtualScrollableElement;\n}(CdkVirtualScrollable);\n\nCdkVirtualScrollableElement.ɵfac = function CdkVirtualScrollableElement_Factory(t) {\n  return new (t || CdkVirtualScrollableElement)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(ScrollDispatcher), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i2.Directionality, 8));\n};\n\nCdkVirtualScrollableElement.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkVirtualScrollableElement,\n  selectors: [[\"\", \"cdkVirtualScrollingElement\", \"\"]],\n  hostAttrs: [1, \"cdk-virtual-scrollable\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: VIRTUAL_SCROLLABLE,\n    useExisting: CdkVirtualScrollableElement\n  }]), i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkVirtualScrollableElement, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkVirtualScrollingElement]',\n      providers: [{\n        provide: VIRTUAL_SCROLLABLE,\n        useExisting: CdkVirtualScrollableElement\n      }],\n      host: {\n        'class': 'cdk-virtual-scrollable'\n      }\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: ScrollDispatcher\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i2.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n/**\n * Provides as virtual scrollable for the global / window scrollbar.\n */\n\n\nvar CdkVirtualScrollableWindow = /*#__PURE__*/function (_CdkVirtualScrollable3) {\n  _inherits(CdkVirtualScrollableWindow, _CdkVirtualScrollable3);\n\n  var _super4 = _createSuper(CdkVirtualScrollableWindow);\n\n  function CdkVirtualScrollableWindow(scrollDispatcher, ngZone, dir) {\n    var _this20;\n\n    _classCallCheck(this, CdkVirtualScrollableWindow);\n\n    _this20 = _super4.call(this, new ElementRef(document.documentElement), scrollDispatcher, ngZone, dir);\n    _this20._elementScrolled = new Observable(function (observer) {\n      return _this20.ngZone.runOutsideAngular(function () {\n        return fromEvent(document, 'scroll').pipe(takeUntil(_this20._destroyed)).subscribe(observer);\n      });\n    });\n    return _this20;\n  }\n\n  _createClass(CdkVirtualScrollableWindow, [{\n    key: \"measureBoundingClientRectWithScrollOffset\",\n    value: function measureBoundingClientRectWithScrollOffset(from) {\n      return this.getElementRef().nativeElement.getBoundingClientRect()[from];\n    }\n  }]);\n\n  return CdkVirtualScrollableWindow;\n}(CdkVirtualScrollable);\n\nCdkVirtualScrollableWindow.ɵfac = function CdkVirtualScrollableWindow_Factory(t) {\n  return new (t || CdkVirtualScrollableWindow)(i0.ɵɵdirectiveInject(ScrollDispatcher), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i2.Directionality, 8));\n};\n\nCdkVirtualScrollableWindow.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkVirtualScrollableWindow,\n  selectors: [[\"cdk-virtual-scroll-viewport\", \"scrollWindow\", \"\"]],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: VIRTUAL_SCROLLABLE,\n    useExisting: CdkVirtualScrollableWindow\n  }]), i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkVirtualScrollableWindow, [{\n    type: Directive,\n    args: [{\n      selector: 'cdk-virtual-scroll-viewport[scrollWindow]',\n      providers: [{\n        provide: VIRTUAL_SCROLLABLE,\n        useExisting: CdkVirtualScrollableWindow\n      }]\n    }]\n  }], function () {\n    return [{\n      type: ScrollDispatcher\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i2.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar CdkScrollableModule = /*#__PURE__*/_createClass(function CdkScrollableModule() {\n  _classCallCheck(this, CdkScrollableModule);\n});\n\nCdkScrollableModule.ɵfac = function CdkScrollableModule_Factory(t) {\n  return new (t || CdkScrollableModule)();\n};\n\nCdkScrollableModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: CdkScrollableModule\n});\nCdkScrollableModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkScrollableModule, [{\n    type: NgModule,\n    args: [{\n      exports: [CdkScrollable],\n      declarations: [CdkScrollable]\n    }]\n  }], null, null);\n})();\n/**\n * @docs-primary-export\n */\n\n\nvar ScrollingModule = /*#__PURE__*/_createClass(function ScrollingModule() {\n  _classCallCheck(this, ScrollingModule);\n});\n\nScrollingModule.ɵfac = function ScrollingModule_Factory(t) {\n  return new (t || ScrollingModule)();\n};\n\nScrollingModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: ScrollingModule\n});\nScrollingModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [BidiModule, CdkScrollableModule, BidiModule, CdkScrollableModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ScrollingModule, [{\n    type: NgModule,\n    args: [{\n      imports: [BidiModule, CdkScrollableModule],\n      exports: [BidiModule, CdkScrollableModule, CdkFixedSizeVirtualScroll, CdkVirtualForOf, CdkVirtualScrollViewport, CdkVirtualScrollableWindow, CdkVirtualScrollableElement],\n      declarations: [CdkFixedSizeVirtualScroll, CdkVirtualForOf, CdkVirtualScrollViewport, CdkVirtualScrollableWindow, CdkVirtualScrollableElement]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CdkFixedSizeVirtualScroll, CdkScrollable, CdkScrollableModule, CdkVirtualForOf, CdkVirtualScrollViewport, CdkVirtualScrollable, CdkVirtualScrollableElement, CdkVirtualScrollableWindow, DEFAULT_RESIZE_TIME, DEFAULT_SCROLL_TIME, FixedSizeVirtualScrollStrategy, ScrollDispatcher, ScrollingModule, VIRTUAL_SCROLLABLE, VIRTUAL_SCROLL_STRATEGY, ViewportRuler, _fixedSizeVirtualScrollStrategyFactory };","map":{"version":3,"names":["coerceNumberProperty","coerceElement","coerceBooleanProperty","i0","InjectionToken","forwardRef","Directive","Input","Injectable","Optional","Inject","Component","ViewEncapsulation","ChangeDetectionStrategy","Output","ViewChild","SkipSelf","ElementRef","NgModule","Subject","of","Observable","fromEvent","animationFrameScheduler","asapScheduler","Subscription","isObservable","distinctUntilChanged","auditTime","filter","takeUntil","startWith","pairwise","switchMap","shareReplay","DOCUMENT","i1","getRtlScrollAxisType","supportsScrollBehavior","i2","BidiModule","i2$1","isDataSource","ArrayDataSource","_VIEW_REPEATER_STRATEGY","_RecycleViewRepeaterStrategy","VIRTUAL_SCROLL_STRATEGY","FixedSizeVirtualScrollStrategy","itemSize","minBufferPx","maxBufferPx","_scrolledIndexChange","scrolledIndexChange","pipe","_viewport","_itemSize","_minBufferPx","_maxBufferPx","viewport","_updateTotalContentSize","_updateRenderedRange","complete","ngDevMode","Error","index","behavior","scrollToOffset","setTotalContentSize","getDataLength","renderedRange","getRenderedRange","newRange","start","end","viewportSize","getViewportSize","dataLength","scrollOffset","measureScrollOffset","firstVisibleIndex","maxVisibleItems","Math","ceil","newVisibleIndex","max","min","floor","startBuffer","expandStart","endBuffer","expandEnd","setRenderedRange","setRenderedContentOffset","next","_fixedSizeVirtualScrollStrategyFactory","fixedSizeDir","_scrollStrategy","CdkFixedSizeVirtualScroll","value","updateItemAndBufferSize","ɵfac","ɵdir","provide","useFactory","deps","type","args","selector","providers","DEFAULT_SCROLL_TIME","ScrollDispatcher","_ngZone","_platform","document","_scrolled","_globalSubscription","_scrolledCount","scrollContainers","Map","_document","scrollable","has","set","elementScrolled","subscribe","scrollableReference","get","unsubscribe","delete","auditTimeInMs","isBrowser","observer","_addGlobalListener","subscription","_removeGlobalListener","forEach","_","container","deregister","elementOrElementRef","ancestors","getAncestorScrollContainers","scrolled","target","indexOf","scrollingContainers","_subscription","_scrollableContainsElement","push","defaultView","window","element","scrollableElement","getElementRef","nativeElement","parentElement","runOutsideAngular","_getWindow","NgZone","Platform","ɵprov","providedIn","undefined","decorators","CdkScrollable","elementRef","scrollDispatcher","ngZone","dir","_destroyed","_elementScrolled","register","options","el","isRtl","left","right","bottom","top","scrollHeight","clientHeight","scrollWidth","clientWidth","_applyScrollToOptions","scrollTo","scrollTop","scrollLeft","from","LEFT","RIGHT","Directionality","VIRTUAL_SCROLLABLE","CdkVirtualScrollable","orientation","viewportEl","DEFAULT_RESIZE_TIME","ViewportRuler","_change","_changeListener","event","addEventListener","change","_viewportSize","removeEventListener","_updateViewportSize","output","width","height","scrollPosition","getViewportScrollPosition","documentElement","documentRect","getBoundingClientRect","body","scrollY","scrollX","throttleTime","innerWidth","innerHeight","rangesEqual","r1","r2","SCROLL_SCHEDULER","requestAnimationFrame","CdkVirtualScrollViewport","_changeDetectorRef","viewportRuler","_detachedSubject","_renderedRangeSubject","_orientation","_appendOnly","Promise","resolve","then","run","renderedRangeStream","_totalContentSize","_totalContentWidth","_totalContentHeight","_renderedRange","_dataLength","_renderedContentOffset","_renderedContentOffsetNeedsRewrite","_isChangeDetectionPending","_runAfterChangeDetection","_viewportChanges","EMPTY","checkViewportSize","classList","add","_calculateSpacerSize","_measureViewportSize","attach","onContentScrolled","_markChangeDetectionNeeded","detach","forOf","_forOf","dataStream","data","newLength","length","onDataLengthChanged","_doChangeDetection","size","range","appendOnly","onContentRendered","offset","to","isHorizontal","axis","axisDirection","transform","Number","_renderedContentTransform","measureRenderedContentSize","onRenderedOffsetChanged","scrollToIndex","_from","measureViewportOffset","_a","fromRect","scrollerClientRect","measureBoundingClientRectWithScrollOffset","viewportClientRect","contentEl","_contentWrapper","offsetWidth","offsetHeight","measureRangeSize","measureViewportSize","runAfter","style","markForCheck","runAfterChangeDetection","fn","ChangeDetectorRef","ɵcmp","virtualScrollable","host","encapsulation","None","changeDetection","OnPush","template","styles","static","getOffset","direction","node","rect","CdkVirtualForOf","_viewContainerRef","_template","_differs","_viewRepeater","viewChange","_dataSourceChanges","prev","cur","_changeDataSource","_differ","_needsUpdate","_data","_onRenderedDataChange","observers","_cdkVirtualForOf","Array","_cdkVirtualForTrackBy","item","viewCacheSize","renderedStartIndex","rangeLen","firstNode","lastNode","i","view","rootNodes","changes","diff","_renderedItems","_updateContext","_applyChanges","slice","find","create","cdkVirtualForTrackBy","oldDs","newDs","disconnect","connect","count","context","_updateComputedContextProperties","detectChanges","applyChanges","record","_adjustedPreviousIndex","currentIndex","_getEmbeddedViewArgs","forEachIdentityChange","$implicit","first","last","even","odd","templateRef","cdkVirtualForOf","ViewContainerRef","TemplateRef","IterableDiffers","useClass","cdkVirtualForTemplate","cdkVirtualForTemplateCacheSize","CdkVirtualScrollableElement","useExisting","CdkVirtualScrollableWindow","CdkScrollableModule","ɵmod","ɵinj","exports","declarations","ScrollingModule","imports"],"sources":["/Users/selim/repo/eryaz/angular/node_modules/@angular/cdk/fesm2015/scrolling.mjs"],"sourcesContent":["import { coerceNumberProperty, coerceElement, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, forwardRef, Directive, Input, Injectable, Optional, Inject, Component, ViewEncapsulation, ChangeDetectionStrategy, Output, ViewChild, SkipSelf, ElementRef, NgModule } from '@angular/core';\nimport { Subject, of, Observable, fromEvent, animationFrameScheduler, asapScheduler, Subscription, isObservable } from 'rxjs';\nimport { distinctUntilChanged, auditTime, filter, takeUntil, startWith, pairwise, switchMap, shareReplay } from 'rxjs/operators';\nimport { DOCUMENT } from '@angular/common';\nimport * as i1 from '@angular/cdk/platform';\nimport { getRtlScrollAxisType, supportsScrollBehavior } from '@angular/cdk/platform';\nimport * as i2 from '@angular/cdk/bidi';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport * as i2$1 from '@angular/cdk/collections';\nimport { isDataSource, ArrayDataSource, _VIEW_REPEATER_STRATEGY, _RecycleViewRepeaterStrategy } from '@angular/cdk/collections';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The injection token used to specify the virtual scrolling strategy. */\nconst VIRTUAL_SCROLL_STRATEGY = new InjectionToken('VIRTUAL_SCROLL_STRATEGY');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Virtual scrolling strategy for lists with items of known fixed size. */\nclass FixedSizeVirtualScrollStrategy {\n    /**\n     * @param itemSize The size of the items in the virtually scrolling list.\n     * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n    constructor(itemSize, minBufferPx, maxBufferPx) {\n        this._scrolledIndexChange = new Subject();\n        /** @docs-private Implemented as part of VirtualScrollStrategy. */\n        this.scrolledIndexChange = this._scrolledIndexChange.pipe(distinctUntilChanged());\n        /** The attached viewport. */\n        this._viewport = null;\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n    }\n    /**\n     * Attaches this scroll strategy to a viewport.\n     * @param viewport The viewport to attach this strategy to.\n     */\n    attach(viewport) {\n        this._viewport = viewport;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** Detaches this scroll strategy from the currently attached viewport. */\n    detach() {\n        this._scrolledIndexChange.complete();\n        this._viewport = null;\n    }\n    /**\n     * Update the item size and buffer size.\n     * @param itemSize The size of the items in the virtually scrolling list.\n     * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n    updateItemAndBufferSize(itemSize, minBufferPx, maxBufferPx) {\n        if (maxBufferPx < minBufferPx && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');\n        }\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onContentScrolled() {\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onDataLengthChanged() {\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onContentRendered() {\n        /* no-op */\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onRenderedOffsetChanged() {\n        /* no-op */\n    }\n    /**\n     * Scroll to the offset for the given index.\n     * @param index The index of the element to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling.\n     */\n    scrollToIndex(index, behavior) {\n        if (this._viewport) {\n            this._viewport.scrollToOffset(index * this._itemSize, behavior);\n        }\n    }\n    /** Update the viewport's total content size. */\n    _updateTotalContentSize() {\n        if (!this._viewport) {\n            return;\n        }\n        this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);\n    }\n    /** Update the viewport's rendered range. */\n    _updateRenderedRange() {\n        if (!this._viewport) {\n            return;\n        }\n        const renderedRange = this._viewport.getRenderedRange();\n        const newRange = { start: renderedRange.start, end: renderedRange.end };\n        const viewportSize = this._viewport.getViewportSize();\n        const dataLength = this._viewport.getDataLength();\n        let scrollOffset = this._viewport.measureScrollOffset();\n        // Prevent NaN as result when dividing by zero.\n        let firstVisibleIndex = this._itemSize > 0 ? scrollOffset / this._itemSize : 0;\n        // If user scrolls to the bottom of the list and data changes to a smaller list\n        if (newRange.end > dataLength) {\n            // We have to recalculate the first visible index based on new data length and viewport size.\n            const maxVisibleItems = Math.ceil(viewportSize / this._itemSize);\n            const newVisibleIndex = Math.max(0, Math.min(firstVisibleIndex, dataLength - maxVisibleItems));\n            // If first visible index changed we must update scroll offset to handle start/end buffers\n            // Current range must also be adjusted to cover the new position (bottom of new list).\n            if (firstVisibleIndex != newVisibleIndex) {\n                firstVisibleIndex = newVisibleIndex;\n                scrollOffset = newVisibleIndex * this._itemSize;\n                newRange.start = Math.floor(firstVisibleIndex);\n            }\n            newRange.end = Math.max(0, Math.min(dataLength, newRange.start + maxVisibleItems));\n        }\n        const startBuffer = scrollOffset - newRange.start * this._itemSize;\n        if (startBuffer < this._minBufferPx && newRange.start != 0) {\n            const expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);\n            newRange.start = Math.max(0, newRange.start - expandStart);\n            newRange.end = Math.min(dataLength, Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize));\n        }\n        else {\n            const endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);\n            if (endBuffer < this._minBufferPx && newRange.end != dataLength) {\n                const expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);\n                if (expandEnd > 0) {\n                    newRange.end = Math.min(dataLength, newRange.end + expandEnd);\n                    newRange.start = Math.max(0, Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize));\n                }\n            }\n        }\n        this._viewport.setRenderedRange(newRange);\n        this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);\n        this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));\n    }\n}\n/**\n * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created\n * `FixedSizeVirtualScrollStrategy` from the given directive.\n * @param fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the\n *     `FixedSizeVirtualScrollStrategy` from.\n */\nfunction _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir) {\n    return fixedSizeDir._scrollStrategy;\n}\n/** A virtual scroll strategy that supports fixed-size items. */\nclass CdkFixedSizeVirtualScroll {\n    constructor() {\n        this._itemSize = 20;\n        this._minBufferPx = 100;\n        this._maxBufferPx = 200;\n        /** The scroll strategy used by this directive. */\n        this._scrollStrategy = new FixedSizeVirtualScrollStrategy(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n    /** The size of the items in the list (in pixels). */\n    get itemSize() {\n        return this._itemSize;\n    }\n    set itemSize(value) {\n        this._itemSize = coerceNumberProperty(value);\n    }\n    /**\n     * The minimum amount of buffer rendered beyond the viewport (in pixels).\n     * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\n     */\n    get minBufferPx() {\n        return this._minBufferPx;\n    }\n    set minBufferPx(value) {\n        this._minBufferPx = coerceNumberProperty(value);\n    }\n    /**\n     * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.\n     */\n    get maxBufferPx() {\n        return this._maxBufferPx;\n    }\n    set maxBufferPx(value) {\n        this._maxBufferPx = coerceNumberProperty(value);\n    }\n    ngOnChanges() {\n        this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n}\nCdkFixedSizeVirtualScroll.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: CdkFixedSizeVirtualScroll, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nCdkFixedSizeVirtualScroll.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.0.1\", type: CdkFixedSizeVirtualScroll, selector: \"cdk-virtual-scroll-viewport[itemSize]\", inputs: { itemSize: \"itemSize\", minBufferPx: \"minBufferPx\", maxBufferPx: \"maxBufferPx\" }, providers: [\n        {\n            provide: VIRTUAL_SCROLL_STRATEGY,\n            useFactory: _fixedSizeVirtualScrollStrategyFactory,\n            deps: [forwardRef(() => CdkFixedSizeVirtualScroll)],\n        },\n    ], usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: CdkFixedSizeVirtualScroll, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-virtual-scroll-viewport[itemSize]',\n                    providers: [\n                        {\n                            provide: VIRTUAL_SCROLL_STRATEGY,\n                            useFactory: _fixedSizeVirtualScrollStrategyFactory,\n                            deps: [forwardRef(() => CdkFixedSizeVirtualScroll)],\n                        },\n                    ],\n                }]\n        }], propDecorators: { itemSize: [{\n                type: Input\n            }], minBufferPx: [{\n                type: Input\n            }], maxBufferPx: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Time in ms to throttle the scrolling events by default. */\nconst DEFAULT_SCROLL_TIME = 20;\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\nclass ScrollDispatcher {\n    constructor(_ngZone, _platform, document) {\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        /** Subject for notifying that a registered scrollable reference element has been scrolled. */\n        this._scrolled = new Subject();\n        /** Keeps track of the global `scroll` and `resize` subscriptions. */\n        this._globalSubscription = null;\n        /** Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards. */\n        this._scrolledCount = 0;\n        /**\n         * Map of all the scrollable references that are registered with the service and their\n         * scroll event subscriptions.\n         */\n        this.scrollContainers = new Map();\n        this._document = document;\n    }\n    /**\n     * Registers a scrollable instance with the service and listens for its scrolled events. When the\n     * scrollable is scrolled, the service emits the event to its scrolled observable.\n     * @param scrollable Scrollable instance to be registered.\n     */\n    register(scrollable) {\n        if (!this.scrollContainers.has(scrollable)) {\n            this.scrollContainers.set(scrollable, scrollable.elementScrolled().subscribe(() => this._scrolled.next(scrollable)));\n        }\n    }\n    /**\n     * De-registers a Scrollable reference and unsubscribes from its scroll event observable.\n     * @param scrollable Scrollable instance to be deregistered.\n     */\n    deregister(scrollable) {\n        const scrollableReference = this.scrollContainers.get(scrollable);\n        if (scrollableReference) {\n            scrollableReference.unsubscribe();\n            this.scrollContainers.delete(scrollable);\n        }\n    }\n    /**\n     * Returns an observable that emits an event whenever any of the registered Scrollable\n     * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n     * to override the default \"throttle\" time.\n     *\n     * **Note:** in order to avoid hitting change detection for every scroll event,\n     * all of the events emitted from this stream will be run outside the Angular zone.\n     * If you need to update any data bindings as a result of a scroll event, you have\n     * to run the callback using `NgZone.run`.\n     */\n    scrolled(auditTimeInMs = DEFAULT_SCROLL_TIME) {\n        if (!this._platform.isBrowser) {\n            return of();\n        }\n        return new Observable((observer) => {\n            if (!this._globalSubscription) {\n                this._addGlobalListener();\n            }\n            // In the case of a 0ms delay, use an observable without auditTime\n            // since it does add a perceptible delay in processing overhead.\n            const subscription = auditTimeInMs > 0\n                ? this._scrolled.pipe(auditTime(auditTimeInMs)).subscribe(observer)\n                : this._scrolled.subscribe(observer);\n            this._scrolledCount++;\n            return () => {\n                subscription.unsubscribe();\n                this._scrolledCount--;\n                if (!this._scrolledCount) {\n                    this._removeGlobalListener();\n                }\n            };\n        });\n    }\n    ngOnDestroy() {\n        this._removeGlobalListener();\n        this.scrollContainers.forEach((_, container) => this.deregister(container));\n        this._scrolled.complete();\n    }\n    /**\n     * Returns an observable that emits whenever any of the\n     * scrollable ancestors of an element are scrolled.\n     * @param elementOrElementRef Element whose ancestors to listen for.\n     * @param auditTimeInMs Time to throttle the scroll events.\n     */\n    ancestorScrolled(elementOrElementRef, auditTimeInMs) {\n        const ancestors = this.getAncestorScrollContainers(elementOrElementRef);\n        return this.scrolled(auditTimeInMs).pipe(filter(target => {\n            return !target || ancestors.indexOf(target) > -1;\n        }));\n    }\n    /** Returns all registered Scrollables that contain the provided element. */\n    getAncestorScrollContainers(elementOrElementRef) {\n        const scrollingContainers = [];\n        this.scrollContainers.forEach((_subscription, scrollable) => {\n            if (this._scrollableContainsElement(scrollable, elementOrElementRef)) {\n                scrollingContainers.push(scrollable);\n            }\n        });\n        return scrollingContainers;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        return this._document.defaultView || window;\n    }\n    /** Returns true if the element is contained within the provided Scrollable. */\n    _scrollableContainsElement(scrollable, elementOrElementRef) {\n        let element = coerceElement(elementOrElementRef);\n        let scrollableElement = scrollable.getElementRef().nativeElement;\n        // Traverse through the element parents until we reach null, checking if any of the elements\n        // are the scrollable's element.\n        do {\n            if (element == scrollableElement) {\n                return true;\n            }\n        } while ((element = element.parentElement));\n        return false;\n    }\n    /** Sets up the global scroll listeners. */\n    _addGlobalListener() {\n        this._globalSubscription = this._ngZone.runOutsideAngular(() => {\n            const window = this._getWindow();\n            return fromEvent(window.document, 'scroll').subscribe(() => this._scrolled.next());\n        });\n    }\n    /** Cleans up the global scroll listener. */\n    _removeGlobalListener() {\n        if (this._globalSubscription) {\n            this._globalSubscription.unsubscribe();\n            this._globalSubscription = null;\n        }\n    }\n}\nScrollDispatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: ScrollDispatcher, deps: [{ token: i0.NgZone }, { token: i1.Platform }, { token: DOCUMENT, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nScrollDispatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: ScrollDispatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: ScrollDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: i0.NgZone }, { type: i1.Platform }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    } });\n\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\nclass CdkScrollable {\n    constructor(elementRef, scrollDispatcher, ngZone, dir) {\n        this.elementRef = elementRef;\n        this.scrollDispatcher = scrollDispatcher;\n        this.ngZone = ngZone;\n        this.dir = dir;\n        this._destroyed = new Subject();\n        this._elementScrolled = new Observable((observer) => this.ngZone.runOutsideAngular(() => fromEvent(this.elementRef.nativeElement, 'scroll')\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(observer)));\n    }\n    ngOnInit() {\n        this.scrollDispatcher.register(this);\n    }\n    ngOnDestroy() {\n        this.scrollDispatcher.deregister(this);\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Returns observable that emits when a scroll event is fired on the host element. */\n    elementScrolled() {\n        return this._elementScrolled;\n    }\n    /** Gets the ElementRef for the viewport. */\n    getElementRef() {\n        return this.elementRef;\n    }\n    /**\n     * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo\n     * method, since browsers are not consistent about what scrollLeft means in RTL. For this method\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param options specified the offsets to scroll to.\n     */\n    scrollTo(options) {\n        const el = this.elementRef.nativeElement;\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        // Rewrite start & end offsets as right or left offsets.\n        if (options.left == null) {\n            options.left = isRtl ? options.end : options.start;\n        }\n        if (options.right == null) {\n            options.right = isRtl ? options.start : options.end;\n        }\n        // Rewrite the bottom offset as a top offset.\n        if (options.bottom != null) {\n            options.top =\n                el.scrollHeight - el.clientHeight - options.bottom;\n        }\n        // Rewrite the right offset as a left offset.\n        if (isRtl && getRtlScrollAxisType() != 0 /* RtlScrollAxisType.NORMAL */) {\n            if (options.left != null) {\n                options.right =\n                    el.scrollWidth - el.clientWidth - options.left;\n            }\n            if (getRtlScrollAxisType() == 2 /* RtlScrollAxisType.INVERTED */) {\n                options.left = options.right;\n            }\n            else if (getRtlScrollAxisType() == 1 /* RtlScrollAxisType.NEGATED */) {\n                options.left = options.right ? -options.right : options.right;\n            }\n        }\n        else {\n            if (options.right != null) {\n                options.left =\n                    el.scrollWidth - el.clientWidth - options.right;\n            }\n        }\n        this._applyScrollToOptions(options);\n    }\n    _applyScrollToOptions(options) {\n        const el = this.elementRef.nativeElement;\n        if (supportsScrollBehavior()) {\n            el.scrollTo(options);\n        }\n        else {\n            if (options.top != null) {\n                el.scrollTop = options.top;\n            }\n            if (options.left != null) {\n                el.scrollLeft = options.left;\n            }\n        }\n    }\n    /**\n     * Measures the scroll offset relative to the specified edge of the viewport. This method can be\n     * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent\n     * about what scrollLeft means in RTL. The values returned by this method are normalized such that\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param from The edge to measure from.\n     */\n    measureScrollOffset(from) {\n        const LEFT = 'left';\n        const RIGHT = 'right';\n        const el = this.elementRef.nativeElement;\n        if (from == 'top') {\n            return el.scrollTop;\n        }\n        if (from == 'bottom') {\n            return el.scrollHeight - el.clientHeight - el.scrollTop;\n        }\n        // Rewrite start & end as left or right offsets.\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        if (from == 'start') {\n            from = isRtl ? RIGHT : LEFT;\n        }\n        else if (from == 'end') {\n            from = isRtl ? LEFT : RIGHT;\n        }\n        if (isRtl && getRtlScrollAxisType() == 2 /* RtlScrollAxisType.INVERTED */) {\n            // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            }\n            else {\n                return el.scrollLeft;\n            }\n        }\n        else if (isRtl && getRtlScrollAxisType() == 1 /* RtlScrollAxisType.NEGATED */) {\n            // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft + el.scrollWidth - el.clientWidth;\n            }\n            else {\n                return -el.scrollLeft;\n            }\n        }\n        else {\n            // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and\n            // (scrollWidth - clientWidth) when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft;\n            }\n            else {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            }\n        }\n    }\n}\nCdkScrollable.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: CdkScrollable, deps: [{ token: i0.ElementRef }, { token: ScrollDispatcher }, { token: i0.NgZone }, { token: i2.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkScrollable.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.0.1\", type: CdkScrollable, selector: \"[cdk-scrollable], [cdkScrollable]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: CdkScrollable, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-scrollable], [cdkScrollable]',\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: ScrollDispatcher }, { type: i0.NgZone }, { type: i2.Directionality, decorators: [{\n                        type: Optional\n                    }] }];\n    } });\n\nconst VIRTUAL_SCROLLABLE = new InjectionToken('VIRTUAL_SCROLLABLE');\n/**\n * Extending the {@link CdkScrollable} to be used as scrolling container for virtual scrolling.\n */\nclass CdkVirtualScrollable extends CdkScrollable {\n    constructor(elementRef, scrollDispatcher, ngZone, dir) {\n        super(elementRef, scrollDispatcher, ngZone, dir);\n    }\n    /**\n     * Measure the viewport size for the provided orientation.\n     *\n     * @param orientation The orientation to measure the size from.\n     */\n    measureViewportSize(orientation) {\n        const viewportEl = this.elementRef.nativeElement;\n        return orientation === 'horizontal' ? viewportEl.clientWidth : viewportEl.clientHeight;\n    }\n}\nCdkVirtualScrollable.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: CdkVirtualScrollable, deps: [{ token: i0.ElementRef }, { token: ScrollDispatcher }, { token: i0.NgZone }, { token: i2.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkVirtualScrollable.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.0.1\", type: CdkVirtualScrollable, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: CdkVirtualScrollable, decorators: [{\n            type: Directive\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: ScrollDispatcher }, { type: i0.NgZone }, { type: i2.Directionality, decorators: [{\n                        type: Optional\n                    }] }];\n    } });\n\n/** Time in ms to throttle the resize events by default. */\nconst DEFAULT_RESIZE_TIME = 20;\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * @docs-private\n */\nclass ViewportRuler {\n    constructor(_platform, ngZone, document) {\n        this._platform = _platform;\n        /** Stream of viewport change events. */\n        this._change = new Subject();\n        /** Event listener that will be used to handle the viewport change events. */\n        this._changeListener = (event) => {\n            this._change.next(event);\n        };\n        this._document = document;\n        ngZone.runOutsideAngular(() => {\n            if (_platform.isBrowser) {\n                const window = this._getWindow();\n                // Note that bind the events ourselves, rather than going through something like RxJS's\n                // `fromEvent` so that we can ensure that they're bound outside of the NgZone.\n                window.addEventListener('resize', this._changeListener);\n                window.addEventListener('orientationchange', this._changeListener);\n            }\n            // Clear the cached position so that the viewport is re-measured next time it is required.\n            // We don't need to keep track of the subscription, because it is completed on destroy.\n            this.change().subscribe(() => (this._viewportSize = null));\n        });\n    }\n    ngOnDestroy() {\n        if (this._platform.isBrowser) {\n            const window = this._getWindow();\n            window.removeEventListener('resize', this._changeListener);\n            window.removeEventListener('orientationchange', this._changeListener);\n        }\n        this._change.complete();\n    }\n    /** Returns the viewport's width and height. */\n    getViewportSize() {\n        if (!this._viewportSize) {\n            this._updateViewportSize();\n        }\n        const output = { width: this._viewportSize.width, height: this._viewportSize.height };\n        // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n        if (!this._platform.isBrowser) {\n            this._viewportSize = null;\n        }\n        return output;\n    }\n    /** Gets a ClientRect for the viewport's bounds. */\n    getViewportRect() {\n        // Use the document element's bounding rect rather than the window scroll properties\n        // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n        // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n        // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n        // can disagree when the page is pinch-zoomed (on devices that support touch).\n        // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n        // We use the documentElement instead of the body because, by default (without a css reset)\n        // browsers typically give the document body an 8px margin, which is not included in\n        // getBoundingClientRect().\n        const scrollPosition = this.getViewportScrollPosition();\n        const { width, height } = this.getViewportSize();\n        return {\n            top: scrollPosition.top,\n            left: scrollPosition.left,\n            bottom: scrollPosition.top + height,\n            right: scrollPosition.left + width,\n            height,\n            width,\n        };\n    }\n    /** Gets the (top, left) scroll position of the viewport. */\n    getViewportScrollPosition() {\n        // While we can get a reference to the fake document\n        // during SSR, it doesn't have getBoundingClientRect.\n        if (!this._platform.isBrowser) {\n            return { top: 0, left: 0 };\n        }\n        // The top-left-corner of the viewport is determined by the scroll position of the document\n        // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n        // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n        // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n        // `document.documentElement` works consistently, where the `top` and `left` values will\n        // equal negative the scroll position.\n        const document = this._document;\n        const window = this._getWindow();\n        const documentElement = document.documentElement;\n        const documentRect = documentElement.getBoundingClientRect();\n        const top = -documentRect.top ||\n            document.body.scrollTop ||\n            window.scrollY ||\n            documentElement.scrollTop ||\n            0;\n        const left = -documentRect.left ||\n            document.body.scrollLeft ||\n            window.scrollX ||\n            documentElement.scrollLeft ||\n            0;\n        return { top, left };\n    }\n    /**\n     * Returns a stream that emits whenever the size of the viewport changes.\n     * This stream emits outside of the Angular zone.\n     * @param throttleTime Time in milliseconds to throttle the stream.\n     */\n    change(throttleTime = DEFAULT_RESIZE_TIME) {\n        return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        return this._document.defaultView || window;\n    }\n    /** Updates the cached viewport size. */\n    _updateViewportSize() {\n        const window = this._getWindow();\n        this._viewportSize = this._platform.isBrowser\n            ? { width: window.innerWidth, height: window.innerHeight }\n            : { width: 0, height: 0 };\n    }\n}\nViewportRuler.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: ViewportRuler, deps: [{ token: i1.Platform }, { token: i0.NgZone }, { token: DOCUMENT, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nViewportRuler.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: ViewportRuler, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: ViewportRuler, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: i1.Platform }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    } });\n\n/** Checks if the given ranges are equal. */\nfunction rangesEqual(r1, r2) {\n    return r1.start == r2.start && r1.end == r2.end;\n}\n/**\n * Scheduler to be used for scroll events. Needs to fall back to\n * something that doesn't rely on requestAnimationFrame on environments\n * that don't support it (e.g. server-side rendering).\n */\nconst SCROLL_SCHEDULER = typeof requestAnimationFrame !== 'undefined' ? animationFrameScheduler : asapScheduler;\n/** A viewport that virtualizes its scrolling with the help of `CdkVirtualForOf`. */\nclass CdkVirtualScrollViewport extends CdkVirtualScrollable {\n    constructor(elementRef, _changeDetectorRef, ngZone, _scrollStrategy, dir, scrollDispatcher, viewportRuler, scrollable) {\n        super(elementRef, scrollDispatcher, ngZone, dir);\n        this.elementRef = elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._scrollStrategy = _scrollStrategy;\n        this.scrollable = scrollable;\n        /** Emits when the viewport is detached from a CdkVirtualForOf. */\n        this._detachedSubject = new Subject();\n        /** Emits when the rendered range changes. */\n        this._renderedRangeSubject = new Subject();\n        this._orientation = 'vertical';\n        this._appendOnly = false;\n        // Note: we don't use the typical EventEmitter here because we need to subscribe to the scroll\n        // strategy lazily (i.e. only if the user is actually listening to the events). We do this because\n        // depending on how the strategy calculates the scrolled index, it may come at a cost to\n        // performance.\n        /** Emits when the index of the first element visible in the viewport changes. */\n        this.scrolledIndexChange = new Observable((observer) => this._scrollStrategy.scrolledIndexChange.subscribe(index => Promise.resolve().then(() => this.ngZone.run(() => observer.next(index)))));\n        /** A stream that emits whenever the rendered range changes. */\n        this.renderedRangeStream = this._renderedRangeSubject;\n        /**\n         * The total size of all content (in pixels), including content that is not currently rendered.\n         */\n        this._totalContentSize = 0;\n        /** A string representing the `style.width` property value to be used for the spacer element. */\n        this._totalContentWidth = '';\n        /** A string representing the `style.height` property value to be used for the spacer element. */\n        this._totalContentHeight = '';\n        /** The currently rendered range of indices. */\n        this._renderedRange = { start: 0, end: 0 };\n        /** The length of the data bound to this viewport (in number of items). */\n        this._dataLength = 0;\n        /** The size of the viewport (in pixels). */\n        this._viewportSize = 0;\n        /** The last rendered content offset that was set. */\n        this._renderedContentOffset = 0;\n        /**\n         * Whether the last rendered content offset was to the end of the content (and therefore needs to\n         * be rewritten as an offset to the start of the content).\n         */\n        this._renderedContentOffsetNeedsRewrite = false;\n        /** Whether there is a pending change detection cycle. */\n        this._isChangeDetectionPending = false;\n        /** A list of functions to run after the next change detection cycle. */\n        this._runAfterChangeDetection = [];\n        /** Subscription to changes in the viewport size. */\n        this._viewportChanges = Subscription.EMPTY;\n        if (!_scrollStrategy && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('Error: cdk-virtual-scroll-viewport requires the \"itemSize\" property to be set.');\n        }\n        this._viewportChanges = viewportRuler.change().subscribe(() => {\n            this.checkViewportSize();\n        });\n        if (!this.scrollable) {\n            // No scrollable is provided, so the virtual-scroll-viewport needs to become a scrollable\n            this.elementRef.nativeElement.classList.add('cdk-virtual-scrollable');\n            this.scrollable = this;\n        }\n    }\n    /** The direction the viewport scrolls. */\n    get orientation() {\n        return this._orientation;\n    }\n    set orientation(orientation) {\n        if (this._orientation !== orientation) {\n            this._orientation = orientation;\n            this._calculateSpacerSize();\n        }\n    }\n    /**\n     * Whether rendered items should persist in the DOM after scrolling out of view. By default, items\n     * will be removed.\n     */\n    get appendOnly() {\n        return this._appendOnly;\n    }\n    set appendOnly(value) {\n        this._appendOnly = coerceBooleanProperty(value);\n    }\n    ngOnInit() {\n        if (this.scrollable === this) {\n            super.ngOnInit();\n        }\n        // It's still too early to measure the viewport at this point. Deferring with a promise allows\n        // the Viewport to be rendered with the correct size before we measure. We run this outside the\n        // zone to avoid causing more change detection cycles. We handle the change detection loop\n        // ourselves instead.\n        this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n            this._measureViewportSize();\n            this._scrollStrategy.attach(this);\n            this.scrollable\n                .elementScrolled()\n                .pipe(\n            // Start off with a fake scroll event so we properly detect our initial position.\n            startWith(null), \n            // Collect multiple events into one until the next animation frame. This way if\n            // there are multiple scroll events in the same frame we only need to recheck\n            // our layout once.\n            auditTime(0, SCROLL_SCHEDULER))\n                .subscribe(() => this._scrollStrategy.onContentScrolled());\n            this._markChangeDetectionNeeded();\n        }));\n    }\n    ngOnDestroy() {\n        this.detach();\n        this._scrollStrategy.detach();\n        // Complete all subjects\n        this._renderedRangeSubject.complete();\n        this._detachedSubject.complete();\n        this._viewportChanges.unsubscribe();\n        super.ngOnDestroy();\n    }\n    /** Attaches a `CdkVirtualScrollRepeater` to this viewport. */\n    attach(forOf) {\n        if (this._forOf && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('CdkVirtualScrollViewport is already attached.');\n        }\n        // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length\n        // changes. Run outside the zone to avoid triggering change detection, since we're managing the\n        // change detection loop ourselves.\n        this.ngZone.runOutsideAngular(() => {\n            this._forOf = forOf;\n            this._forOf.dataStream.pipe(takeUntil(this._detachedSubject)).subscribe(data => {\n                const newLength = data.length;\n                if (newLength !== this._dataLength) {\n                    this._dataLength = newLength;\n                    this._scrollStrategy.onDataLengthChanged();\n                }\n                this._doChangeDetection();\n            });\n        });\n    }\n    /** Detaches the current `CdkVirtualForOf`. */\n    detach() {\n        this._forOf = null;\n        this._detachedSubject.next();\n    }\n    /** Gets the length of the data bound to this viewport (in number of items). */\n    getDataLength() {\n        return this._dataLength;\n    }\n    /** Gets the size of the viewport (in pixels). */\n    getViewportSize() {\n        return this._viewportSize;\n    }\n    // TODO(mmalerba): This is technically out of sync with what's really rendered until a render\n    // cycle happens. I'm being careful to only call it after the render cycle is complete and before\n    // setting it to something else, but its error prone and should probably be split into\n    // `pendingRange` and `renderedRange`, the latter reflecting whats actually in the DOM.\n    /** Get the current rendered range of items. */\n    getRenderedRange() {\n        return this._renderedRange;\n    }\n    measureBoundingClientRectWithScrollOffset(from) {\n        return this.getElementRef().nativeElement.getBoundingClientRect()[from];\n    }\n    /**\n     * Sets the total size of all content (in pixels), including content that is not currently\n     * rendered.\n     */\n    setTotalContentSize(size) {\n        if (this._totalContentSize !== size) {\n            this._totalContentSize = size;\n            this._calculateSpacerSize();\n            this._markChangeDetectionNeeded();\n        }\n    }\n    /** Sets the currently rendered range of indices. */\n    setRenderedRange(range) {\n        if (!rangesEqual(this._renderedRange, range)) {\n            if (this.appendOnly) {\n                range = { start: 0, end: Math.max(this._renderedRange.end, range.end) };\n            }\n            this._renderedRangeSubject.next((this._renderedRange = range));\n            this._markChangeDetectionNeeded(() => this._scrollStrategy.onContentRendered());\n        }\n    }\n    /**\n     * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).\n     */\n    getOffsetToRenderedContentStart() {\n        return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;\n    }\n    /**\n     * Sets the offset from the start of the viewport to either the start or end of the rendered data\n     * (in pixels).\n     */\n    setRenderedContentOffset(offset, to = 'to-start') {\n        // In appendOnly, we always start from the top\n        offset = this.appendOnly && to === 'to-start' ? 0 : offset;\n        // For a horizontal viewport in a right-to-left language we need to translate along the x-axis\n        // in the negative direction.\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        const isHorizontal = this.orientation == 'horizontal';\n        const axis = isHorizontal ? 'X' : 'Y';\n        const axisDirection = isHorizontal && isRtl ? -1 : 1;\n        let transform = `translate${axis}(${Number(axisDirection * offset)}px)`;\n        this._renderedContentOffset = offset;\n        if (to === 'to-end') {\n            transform += ` translate${axis}(-100%)`;\n            // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise\n            // elements will appear to expand in the wrong direction (e.g. `mat-expansion-panel` would\n            // expand upward).\n            this._renderedContentOffsetNeedsRewrite = true;\n        }\n        if (this._renderedContentTransform != transform) {\n            // We know this value is safe because we parse `offset` with `Number()` before passing it\n            // into the string.\n            this._renderedContentTransform = transform;\n            this._markChangeDetectionNeeded(() => {\n                if (this._renderedContentOffsetNeedsRewrite) {\n                    this._renderedContentOffset -= this.measureRenderedContentSize();\n                    this._renderedContentOffsetNeedsRewrite = false;\n                    this.setRenderedContentOffset(this._renderedContentOffset);\n                }\n                else {\n                    this._scrollStrategy.onRenderedOffsetChanged();\n                }\n            });\n        }\n    }\n    /**\n     * Scrolls to the given offset from the start of the viewport. Please note that this is not always\n     * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left\n     * direction, this would be the equivalent of setting a fictional `scrollRight` property.\n     * @param offset The offset to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     */\n    scrollToOffset(offset, behavior = 'auto') {\n        const options = { behavior };\n        if (this.orientation === 'horizontal') {\n            options.start = offset;\n        }\n        else {\n            options.top = offset;\n        }\n        this.scrollable.scrollTo(options);\n    }\n    /**\n     * Scrolls to the offset for the given index.\n     * @param index The index of the element to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     */\n    scrollToIndex(index, behavior = 'auto') {\n        this._scrollStrategy.scrollToIndex(index, behavior);\n    }\n    /**\n     * Gets the current scroll offset from the start of the scrollable (in pixels).\n     * @param from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'\n     *     in horizontal mode.\n     */\n    measureScrollOffset(from) {\n        // This is to break the call cycle\n        let measureScrollOffset;\n        if (this.scrollable == this) {\n            measureScrollOffset = (_from) => super.measureScrollOffset(_from);\n        }\n        else {\n            measureScrollOffset = (_from) => this.scrollable.measureScrollOffset(_from);\n        }\n        return Math.max(0, measureScrollOffset(from !== null && from !== void 0 ? from : (this.orientation === 'horizontal' ? 'start' : 'top')) -\n            this.measureViewportOffset());\n    }\n    /**\n     * Measures the offset of the viewport from the scrolling container\n     * @param from The edge to measure from.\n     */\n    measureViewportOffset(from) {\n        var _a;\n        let fromRect;\n        const LEFT = 'left';\n        const RIGHT = 'right';\n        const isRtl = ((_a = this.dir) === null || _a === void 0 ? void 0 : _a.value) == 'rtl';\n        if (from == 'start') {\n            fromRect = isRtl ? RIGHT : LEFT;\n        }\n        else if (from == 'end') {\n            fromRect = isRtl ? LEFT : RIGHT;\n        }\n        else if (from) {\n            fromRect = from;\n        }\n        else {\n            fromRect = this.orientation === 'horizontal' ? 'left' : 'top';\n        }\n        const scrollerClientRect = this.scrollable.measureBoundingClientRectWithScrollOffset(fromRect);\n        const viewportClientRect = this.elementRef.nativeElement.getBoundingClientRect()[fromRect];\n        return viewportClientRect - scrollerClientRect;\n    }\n    /** Measure the combined size of all of the rendered items. */\n    measureRenderedContentSize() {\n        const contentEl = this._contentWrapper.nativeElement;\n        return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;\n    }\n    /**\n     * Measure the total combined size of the given range. Throws if the range includes items that are\n     * not rendered.\n     */\n    measureRangeSize(range) {\n        if (!this._forOf) {\n            return 0;\n        }\n        return this._forOf.measureRangeSize(range, this.orientation);\n    }\n    /** Update the viewport dimensions and re-render. */\n    checkViewportSize() {\n        // TODO: Cleanup later when add logic for handling content resize\n        this._measureViewportSize();\n        this._scrollStrategy.onDataLengthChanged();\n    }\n    /** Measure the viewport size. */\n    _measureViewportSize() {\n        this._viewportSize = this.scrollable.measureViewportSize(this.orientation);\n    }\n    /** Queue up change detection to run. */\n    _markChangeDetectionNeeded(runAfter) {\n        if (runAfter) {\n            this._runAfterChangeDetection.push(runAfter);\n        }\n        // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of\n        // properties sequentially we only have to run `_doChangeDetection` once at the end.\n        if (!this._isChangeDetectionPending) {\n            this._isChangeDetectionPending = true;\n            this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n                this._doChangeDetection();\n            }));\n        }\n    }\n    /** Run change detection. */\n    _doChangeDetection() {\n        this._isChangeDetectionPending = false;\n        // Apply the content transform. The transform can't be set via an Angular binding because\n        // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of\n        // string literals, a variable that can only be 'X' or 'Y', and user input that is run through\n        // the `Number` function first to coerce it to a numeric value.\n        this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform;\n        // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection\n        // from the root, since the repeated items are content projected in. Calling `detectChanges`\n        // instead does not properly check the projected content.\n        this.ngZone.run(() => this._changeDetectorRef.markForCheck());\n        const runAfterChangeDetection = this._runAfterChangeDetection;\n        this._runAfterChangeDetection = [];\n        for (const fn of runAfterChangeDetection) {\n            fn();\n        }\n    }\n    /** Calculates the `style.width` and `style.height` for the spacer element. */\n    _calculateSpacerSize() {\n        this._totalContentHeight =\n            this.orientation === 'horizontal' ? '' : `${this._totalContentSize}px`;\n        this._totalContentWidth =\n            this.orientation === 'horizontal' ? `${this._totalContentSize}px` : '';\n    }\n}\nCdkVirtualScrollViewport.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: CdkVirtualScrollViewport, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }, { token: VIRTUAL_SCROLL_STRATEGY, optional: true }, { token: i2.Directionality, optional: true }, { token: ScrollDispatcher }, { token: ViewportRuler }, { token: VIRTUAL_SCROLLABLE, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nCdkVirtualScrollViewport.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.0.1\", type: CdkVirtualScrollViewport, selector: \"cdk-virtual-scroll-viewport\", inputs: { orientation: \"orientation\", appendOnly: \"appendOnly\" }, outputs: { scrolledIndexChange: \"scrolledIndexChange\" }, host: { properties: { \"class.cdk-virtual-scroll-orientation-horizontal\": \"orientation === \\\"horizontal\\\"\", \"class.cdk-virtual-scroll-orientation-vertical\": \"orientation !== \\\"horizontal\\\"\" }, classAttribute: \"cdk-virtual-scroll-viewport\" }, providers: [\n        {\n            provide: CdkScrollable,\n            useFactory: (virtualScrollable, viewport) => virtualScrollable || viewport,\n            deps: [CdkVirtualScrollable, CdkVirtualScrollViewport],\n        },\n    ], viewQueries: [{ propertyName: \"_contentWrapper\", first: true, predicate: [\"contentWrapper\"], descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: \"<!--\\n  Wrap the rendered content in an element that will be used to offset it based on the scroll\\n  position.\\n-->\\n<div #contentWrapper class=\\\"cdk-virtual-scroll-content-wrapper\\\">\\n  <ng-content></ng-content>\\n</div>\\n<!--\\n  Spacer used to force the scrolling container to the correct size for the *total* number of items\\n  so that the scrollbar captures the size of the entire data set.\\n-->\\n<div class=\\\"cdk-virtual-scroll-spacer\\\"\\n     [style.width]=\\\"_totalContentWidth\\\" [style.height]=\\\"_totalContentHeight\\\"></div>\\n\", styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;transform:translateZ(0)}.cdk-virtual-scrollable{overflow:auto;will-change:scroll-position;contain:strict;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{height:1px;transform-origin:0 0;flex:0 0 auto}[dir=rtl] .cdk-virtual-scroll-spacer{transform-origin:100% 0}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: CdkVirtualScrollViewport, decorators: [{\n            type: Component,\n            args: [{ selector: 'cdk-virtual-scroll-viewport', host: {\n                        'class': 'cdk-virtual-scroll-viewport',\n                        '[class.cdk-virtual-scroll-orientation-horizontal]': 'orientation === \"horizontal\"',\n                        '[class.cdk-virtual-scroll-orientation-vertical]': 'orientation !== \"horizontal\"',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, providers: [\n                        {\n                            provide: CdkScrollable,\n                            useFactory: (virtualScrollable, viewport) => virtualScrollable || viewport,\n                            deps: [CdkVirtualScrollable, CdkVirtualScrollViewport],\n                        },\n                    ], template: \"<!--\\n  Wrap the rendered content in an element that will be used to offset it based on the scroll\\n  position.\\n-->\\n<div #contentWrapper class=\\\"cdk-virtual-scroll-content-wrapper\\\">\\n  <ng-content></ng-content>\\n</div>\\n<!--\\n  Spacer used to force the scrolling container to the correct size for the *total* number of items\\n  so that the scrollbar captures the size of the entire data set.\\n-->\\n<div class=\\\"cdk-virtual-scroll-spacer\\\"\\n     [style.width]=\\\"_totalContentWidth\\\" [style.height]=\\\"_totalContentHeight\\\"></div>\\n\", styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;transform:translateZ(0)}.cdk-virtual-scrollable{overflow:auto;will-change:scroll-position;contain:strict;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{height:1px;transform-origin:0 0;flex:0 0 auto}[dir=rtl] .cdk-virtual-scroll-spacer{transform-origin:100% 0}\"] }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [VIRTUAL_SCROLL_STRATEGY]\n                    }] }, { type: i2.Directionality, decorators: [{\n                        type: Optional\n                    }] }, { type: ScrollDispatcher }, { type: ViewportRuler }, { type: CdkVirtualScrollable, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [VIRTUAL_SCROLLABLE]\n                    }] }];\n    }, propDecorators: { orientation: [{\n                type: Input\n            }], appendOnly: [{\n                type: Input\n            }], scrolledIndexChange: [{\n                type: Output\n            }], _contentWrapper: [{\n                type: ViewChild,\n                args: ['contentWrapper', { static: true }]\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Helper to extract the offset of a DOM Node in a certain direction. */\nfunction getOffset(orientation, direction, node) {\n    const el = node;\n    if (!el.getBoundingClientRect) {\n        return 0;\n    }\n    const rect = el.getBoundingClientRect();\n    if (orientation === 'horizontal') {\n        return direction === 'start' ? rect.left : rect.right;\n    }\n    return direction === 'start' ? rect.top : rect.bottom;\n}\n/**\n * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling\n * container.\n */\nclass CdkVirtualForOf {\n    constructor(\n    /** The view container to add items to. */\n    _viewContainerRef, \n    /** The template to use when stamping out new items. */\n    _template, \n    /** The set of available differs. */\n    _differs, \n    /** The strategy used to render items in the virtual scroll viewport. */\n    _viewRepeater, \n    /** The virtual scrolling viewport that these items are being rendered in. */\n    _viewport, ngZone) {\n        this._viewContainerRef = _viewContainerRef;\n        this._template = _template;\n        this._differs = _differs;\n        this._viewRepeater = _viewRepeater;\n        this._viewport = _viewport;\n        /** Emits when the rendered view of the data changes. */\n        this.viewChange = new Subject();\n        /** Subject that emits when a new DataSource instance is given. */\n        this._dataSourceChanges = new Subject();\n        /** Emits whenever the data in the current DataSource changes. */\n        this.dataStream = this._dataSourceChanges.pipe(\n        // Start off with null `DataSource`.\n        startWith(null), \n        // Bundle up the previous and current data sources so we can work with both.\n        pairwise(), \n        // Use `_changeDataSource` to disconnect from the previous data source and connect to the\n        // new one, passing back a stream of data changes which we run through `switchMap` to give\n        // us a data stream that emits the latest data from whatever the current `DataSource` is.\n        switchMap(([prev, cur]) => this._changeDataSource(prev, cur)), \n        // Replay the last emitted data when someone subscribes.\n        shareReplay(1));\n        /** The differ used to calculate changes to the data. */\n        this._differ = null;\n        /** Whether the rendered data should be updated during the next ngDoCheck cycle. */\n        this._needsUpdate = false;\n        this._destroyed = new Subject();\n        this.dataStream.subscribe(data => {\n            this._data = data;\n            this._onRenderedDataChange();\n        });\n        this._viewport.renderedRangeStream.pipe(takeUntil(this._destroyed)).subscribe(range => {\n            this._renderedRange = range;\n            if (this.viewChange.observers.length) {\n                ngZone.run(() => this.viewChange.next(this._renderedRange));\n            }\n            this._onRenderedDataChange();\n        });\n        this._viewport.attach(this);\n    }\n    /** The DataSource to display. */\n    get cdkVirtualForOf() {\n        return this._cdkVirtualForOf;\n    }\n    set cdkVirtualForOf(value) {\n        this._cdkVirtualForOf = value;\n        if (isDataSource(value)) {\n            this._dataSourceChanges.next(value);\n        }\n        else {\n            // If value is an an NgIterable, convert it to an array.\n            this._dataSourceChanges.next(new ArrayDataSource(isObservable(value) ? value : Array.from(value || [])));\n        }\n    }\n    /**\n     * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and\n     * the item and produces a value to be used as the item's identity when tracking changes.\n     */\n    get cdkVirtualForTrackBy() {\n        return this._cdkVirtualForTrackBy;\n    }\n    set cdkVirtualForTrackBy(fn) {\n        this._needsUpdate = true;\n        this._cdkVirtualForTrackBy = fn\n            ? (index, item) => fn(index + (this._renderedRange ? this._renderedRange.start : 0), item)\n            : undefined;\n    }\n    /** The template used to stamp out new elements. */\n    set cdkVirtualForTemplate(value) {\n        if (value) {\n            this._needsUpdate = true;\n            this._template = value;\n        }\n    }\n    /**\n     * The size of the cache used to store templates that are not being used for re-use later.\n     * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\n     */\n    get cdkVirtualForTemplateCacheSize() {\n        return this._viewRepeater.viewCacheSize;\n    }\n    set cdkVirtualForTemplateCacheSize(size) {\n        this._viewRepeater.viewCacheSize = coerceNumberProperty(size);\n    }\n    /**\n     * Measures the combined size (width for horizontal orientation, height for vertical) of all items\n     * in the specified range. Throws an error if the range includes items that are not currently\n     * rendered.\n     */\n    measureRangeSize(range, orientation) {\n        if (range.start >= range.end) {\n            return 0;\n        }\n        if ((range.start < this._renderedRange.start || range.end > this._renderedRange.end) &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`Error: attempted to measure an item that isn't rendered.`);\n        }\n        // The index into the list of rendered views for the first item in the range.\n        const renderedStartIndex = range.start - this._renderedRange.start;\n        // The length of the range we're measuring.\n        const rangeLen = range.end - range.start;\n        // Loop over all the views, find the first and land node and compute the size by subtracting\n        // the top of the first node from the bottom of the last one.\n        let firstNode;\n        let lastNode;\n        // Find the first node by starting from the beginning and going forwards.\n        for (let i = 0; i < rangeLen; i++) {\n            const view = this._viewContainerRef.get(i + renderedStartIndex);\n            if (view && view.rootNodes.length) {\n                firstNode = lastNode = view.rootNodes[0];\n                break;\n            }\n        }\n        // Find the last node by starting from the end and going backwards.\n        for (let i = rangeLen - 1; i > -1; i--) {\n            const view = this._viewContainerRef.get(i + renderedStartIndex);\n            if (view && view.rootNodes.length) {\n                lastNode = view.rootNodes[view.rootNodes.length - 1];\n                break;\n            }\n        }\n        return firstNode && lastNode\n            ? getOffset(orientation, 'end', lastNode) - getOffset(orientation, 'start', firstNode)\n            : 0;\n    }\n    ngDoCheck() {\n        if (this._differ && this._needsUpdate) {\n            // TODO(mmalerba): We should differentiate needs update due to scrolling and a new portion of\n            // this list being rendered (can use simpler algorithm) vs needs update due to data actually\n            // changing (need to do this diff).\n            const changes = this._differ.diff(this._renderedItems);\n            if (!changes) {\n                this._updateContext();\n            }\n            else {\n                this._applyChanges(changes);\n            }\n            this._needsUpdate = false;\n        }\n    }\n    ngOnDestroy() {\n        this._viewport.detach();\n        this._dataSourceChanges.next(undefined);\n        this._dataSourceChanges.complete();\n        this.viewChange.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._viewRepeater.detach();\n    }\n    /** React to scroll state changes in the viewport. */\n    _onRenderedDataChange() {\n        if (!this._renderedRange) {\n            return;\n        }\n        this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);\n        if (!this._differ) {\n            // Use a wrapper function for the `trackBy` so any new values are\n            // picked up automatically without having to recreate the differ.\n            this._differ = this._differs.find(this._renderedItems).create((index, item) => {\n                return this.cdkVirtualForTrackBy ? this.cdkVirtualForTrackBy(index, item) : item;\n            });\n        }\n        this._needsUpdate = true;\n    }\n    /** Swap out one `DataSource` for another. */\n    _changeDataSource(oldDs, newDs) {\n        if (oldDs) {\n            oldDs.disconnect(this);\n        }\n        this._needsUpdate = true;\n        return newDs ? newDs.connect(this) : of();\n    }\n    /** Update the `CdkVirtualForOfContext` for all views. */\n    _updateContext() {\n        const count = this._data.length;\n        let i = this._viewContainerRef.length;\n        while (i--) {\n            const view = this._viewContainerRef.get(i);\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n            view.detectChanges();\n        }\n    }\n    /** Apply changes to the DOM. */\n    _applyChanges(changes) {\n        this._viewRepeater.applyChanges(changes, this._viewContainerRef, (record, _adjustedPreviousIndex, currentIndex) => this._getEmbeddedViewArgs(record, currentIndex), record => record.item);\n        // Update $implicit for any items that had an identity change.\n        changes.forEachIdentityChange((record) => {\n            const view = this._viewContainerRef.get(record.currentIndex);\n            view.context.$implicit = record.item;\n        });\n        // Update the context variables on all items.\n        const count = this._data.length;\n        let i = this._viewContainerRef.length;\n        while (i--) {\n            const view = this._viewContainerRef.get(i);\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n        }\n    }\n    /** Update the computed properties on the `CdkVirtualForOfContext`. */\n    _updateComputedContextProperties(context) {\n        context.first = context.index === 0;\n        context.last = context.index === context.count - 1;\n        context.even = context.index % 2 === 0;\n        context.odd = !context.even;\n    }\n    _getEmbeddedViewArgs(record, index) {\n        // Note that it's important that we insert the item directly at the proper index,\n        // rather than inserting it and the moving it in place, because if there's a directive\n        // on the same node that injects the `ViewContainerRef`, Angular will insert another\n        // comment node which can throw off the move when it's being repeated for all items.\n        return {\n            templateRef: this._template,\n            context: {\n                $implicit: record.item,\n                // It's guaranteed that the iterable is not \"undefined\" or \"null\" because we only\n                // generate views for elements if the \"cdkVirtualForOf\" iterable has elements.\n                cdkVirtualForOf: this._cdkVirtualForOf,\n                index: -1,\n                count: -1,\n                first: false,\n                last: false,\n                odd: false,\n                even: false,\n            },\n            index,\n        };\n    }\n}\nCdkVirtualForOf.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: CdkVirtualForOf, deps: [{ token: i0.ViewContainerRef }, { token: i0.TemplateRef }, { token: i0.IterableDiffers }, { token: _VIEW_REPEATER_STRATEGY }, { token: CdkVirtualScrollViewport, skipSelf: true }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });\nCdkVirtualForOf.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.0.1\", type: CdkVirtualForOf, selector: \"[cdkVirtualFor][cdkVirtualForOf]\", inputs: { cdkVirtualForOf: \"cdkVirtualForOf\", cdkVirtualForTrackBy: \"cdkVirtualForTrackBy\", cdkVirtualForTemplate: \"cdkVirtualForTemplate\", cdkVirtualForTemplateCacheSize: \"cdkVirtualForTemplateCacheSize\" }, providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: CdkVirtualForOf, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkVirtualFor][cdkVirtualForOf]',\n                    providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }],\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ViewContainerRef }, { type: i0.TemplateRef }, { type: i0.IterableDiffers }, { type: i2$1._RecycleViewRepeaterStrategy, decorators: [{\n                        type: Inject,\n                        args: [_VIEW_REPEATER_STRATEGY]\n                    }] }, { type: CdkVirtualScrollViewport, decorators: [{\n                        type: SkipSelf\n                    }] }, { type: i0.NgZone }];\n    }, propDecorators: { cdkVirtualForOf: [{\n                type: Input\n            }], cdkVirtualForTrackBy: [{\n                type: Input\n            }], cdkVirtualForTemplate: [{\n                type: Input\n            }], cdkVirtualForTemplateCacheSize: [{\n                type: Input\n            }] } });\n\n/**\n * Provides a virtual scrollable for the element it is attached to.\n */\nclass CdkVirtualScrollableElement extends CdkVirtualScrollable {\n    constructor(elementRef, scrollDispatcher, ngZone, dir) {\n        super(elementRef, scrollDispatcher, ngZone, dir);\n    }\n    measureBoundingClientRectWithScrollOffset(from) {\n        return (this.getElementRef().nativeElement.getBoundingClientRect()[from] -\n            this.measureScrollOffset(from));\n    }\n}\nCdkVirtualScrollableElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: CdkVirtualScrollableElement, deps: [{ token: i0.ElementRef }, { token: ScrollDispatcher }, { token: i0.NgZone }, { token: i2.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkVirtualScrollableElement.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.0.1\", type: CdkVirtualScrollableElement, selector: \"[cdkVirtualScrollingElement]\", host: { classAttribute: \"cdk-virtual-scrollable\" }, providers: [{ provide: VIRTUAL_SCROLLABLE, useExisting: CdkVirtualScrollableElement }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: CdkVirtualScrollableElement, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkVirtualScrollingElement]',\n                    providers: [{ provide: VIRTUAL_SCROLLABLE, useExisting: CdkVirtualScrollableElement }],\n                    host: {\n                        'class': 'cdk-virtual-scrollable',\n                    },\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: ScrollDispatcher }, { type: i0.NgZone }, { type: i2.Directionality, decorators: [{\n                        type: Optional\n                    }] }];\n    } });\n\n/**\n * Provides as virtual scrollable for the global / window scrollbar.\n */\nclass CdkVirtualScrollableWindow extends CdkVirtualScrollable {\n    constructor(scrollDispatcher, ngZone, dir) {\n        super(new ElementRef(document.documentElement), scrollDispatcher, ngZone, dir);\n        this._elementScrolled = new Observable((observer) => this.ngZone.runOutsideAngular(() => fromEvent(document, 'scroll').pipe(takeUntil(this._destroyed)).subscribe(observer)));\n    }\n    measureBoundingClientRectWithScrollOffset(from) {\n        return this.getElementRef().nativeElement.getBoundingClientRect()[from];\n    }\n}\nCdkVirtualScrollableWindow.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: CdkVirtualScrollableWindow, deps: [{ token: ScrollDispatcher }, { token: i0.NgZone }, { token: i2.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkVirtualScrollableWindow.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.0.1\", type: CdkVirtualScrollableWindow, selector: \"cdk-virtual-scroll-viewport[scrollWindow]\", providers: [{ provide: VIRTUAL_SCROLLABLE, useExisting: CdkVirtualScrollableWindow }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: CdkVirtualScrollableWindow, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-virtual-scroll-viewport[scrollWindow]',\n                    providers: [{ provide: VIRTUAL_SCROLLABLE, useExisting: CdkVirtualScrollableWindow }],\n                }]\n        }], ctorParameters: function () {\n        return [{ type: ScrollDispatcher }, { type: i0.NgZone }, { type: i2.Directionality, decorators: [{\n                        type: Optional\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass CdkScrollableModule {\n}\nCdkScrollableModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: CdkScrollableModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nCdkScrollableModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.0.1\", ngImport: i0, type: CdkScrollableModule, declarations: [CdkScrollable], exports: [CdkScrollable] });\nCdkScrollableModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: CdkScrollableModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: CdkScrollableModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [CdkScrollable],\n                    declarations: [CdkScrollable],\n                }]\n        }] });\n/**\n * @docs-primary-export\n */\nclass ScrollingModule {\n}\nScrollingModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: ScrollingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nScrollingModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.0.1\", ngImport: i0, type: ScrollingModule, declarations: [CdkFixedSizeVirtualScroll,\n        CdkVirtualForOf,\n        CdkVirtualScrollViewport,\n        CdkVirtualScrollableWindow,\n        CdkVirtualScrollableElement], imports: [BidiModule, CdkScrollableModule], exports: [BidiModule, CdkScrollableModule, CdkFixedSizeVirtualScroll,\n        CdkVirtualForOf,\n        CdkVirtualScrollViewport,\n        CdkVirtualScrollableWindow,\n        CdkVirtualScrollableElement] });\nScrollingModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: ScrollingModule, imports: [BidiModule, CdkScrollableModule, BidiModule, CdkScrollableModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: ScrollingModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [BidiModule, CdkScrollableModule],\n                    exports: [\n                        BidiModule,\n                        CdkScrollableModule,\n                        CdkFixedSizeVirtualScroll,\n                        CdkVirtualForOf,\n                        CdkVirtualScrollViewport,\n                        CdkVirtualScrollableWindow,\n                        CdkVirtualScrollableElement,\n                    ],\n                    declarations: [\n                        CdkFixedSizeVirtualScroll,\n                        CdkVirtualForOf,\n                        CdkVirtualScrollViewport,\n                        CdkVirtualScrollableWindow,\n                        CdkVirtualScrollableElement,\n                    ],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdkFixedSizeVirtualScroll, CdkScrollable, CdkScrollableModule, CdkVirtualForOf, CdkVirtualScrollViewport, CdkVirtualScrollable, CdkVirtualScrollableElement, CdkVirtualScrollableWindow, DEFAULT_RESIZE_TIME, DEFAULT_SCROLL_TIME, FixedSizeVirtualScrollStrategy, ScrollDispatcher, ScrollingModule, VIRTUAL_SCROLLABLE, VIRTUAL_SCROLL_STRATEGY, ViewportRuler, _fixedSizeVirtualScrollStrategyFactory };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}