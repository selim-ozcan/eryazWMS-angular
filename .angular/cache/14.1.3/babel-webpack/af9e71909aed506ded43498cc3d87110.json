{"ast":null,"code":"import _classCallCheck from \"/Users/selim/repo/eryaz/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/selim/repo/eryaz/angular/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { ElementRef } from '@angular/core';\nimport { AppConsts } from '@shared/AppConsts';\nimport { LocalizationService, PermissionCheckerService, FeatureCheckerService, NotifyService, SettingService, MessageService, AbpMultiTenancyService } from 'abp-ng2-module';\nimport { AppSessionService } from '@shared/session/app-session.service';\nexport var AppComponentBase = /*#__PURE__*/function () {\n  function AppComponentBase(injector) {\n    _classCallCheck(this, AppComponentBase);\n\n    this.localizationSourceName = AppConsts.localization.defaultLocalizationSourceName;\n    this.localization = injector.get(LocalizationService);\n    this.permission = injector.get(PermissionCheckerService);\n    this.feature = injector.get(FeatureCheckerService);\n    this.notify = injector.get(NotifyService);\n    this.setting = injector.get(SettingService);\n    this.message = injector.get(MessageService);\n    this.multiTenancy = injector.get(AbpMultiTenancyService);\n    this.appSession = injector.get(AppSessionService);\n    this.elementRef = injector.get(ElementRef);\n  }\n\n  _createClass(AppComponentBase, [{\n    key: \"l\",\n    value: function l(key) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      var localizedText = this.localization.localize(key, this.localizationSourceName);\n\n      if (!localizedText) {\n        localizedText = key;\n      }\n\n      if (!args || !args.length) {\n        return localizedText;\n      }\n\n      args.unshift(localizedText);\n      return abp.utils.formatString.apply(this, args);\n    }\n  }, {\n    key: \"isGranted\",\n    value: function isGranted(permissionName) {\n      return this.permission.isGranted(permissionName);\n    }\n  }]);\n\n  return AppComponentBase;\n}();","map":{"version":3,"mappings":";;AAAA,SAAmBA,UAAnB,QAAqC,eAArC;AACA,SAASC,SAAT,QAA0B,mBAA1B;AACA,SACIC,mBADJ,EAEIC,wBAFJ,EAGIC,qBAHJ,EAIIC,aAJJ,EAKIC,cALJ,EAMIC,cANJ,EAOIC,sBAPJ,QAQO,gBARP;AAUA,SAASC,iBAAT,QAAkC,qCAAlC;AAEA,WAAsBC,gBAAtB;EAcI,0BAAYC,QAAZ,EAA8B;IAAA;;IAZ9B,8BAAyBV,SAAS,CAACW,YAAV,CAAuBC,6BAAhD;IAaI,KAAKD,YAAL,GAAoBD,QAAQ,CAACG,GAAT,CAAaZ,mBAAb,CAApB;IACA,KAAKa,UAAL,GAAkBJ,QAAQ,CAACG,GAAT,CAAaX,wBAAb,CAAlB;IACA,KAAKa,OAAL,GAAeL,QAAQ,CAACG,GAAT,CAAaV,qBAAb,CAAf;IACA,KAAKa,MAAL,GAAcN,QAAQ,CAACG,GAAT,CAAaT,aAAb,CAAd;IACA,KAAKa,OAAL,GAAeP,QAAQ,CAACG,GAAT,CAAaR,cAAb,CAAf;IACA,KAAKa,OAAL,GAAeR,QAAQ,CAACG,GAAT,CAAaP,cAAb,CAAf;IACA,KAAKa,YAAL,GAAoBT,QAAQ,CAACG,GAAT,CAAaN,sBAAb,CAApB;IACA,KAAKa,UAAL,GAAkBV,QAAQ,CAACG,GAAT,CAAaL,iBAAb,CAAlB;IACA,KAAKa,UAAL,GAAkBX,QAAQ,CAACG,GAAT,CAAad,UAAb,CAAlB;EACH;;EAxBL;IAAA;IAAA,OA0BI,WAAEuB,GAAF,EAA6B;MAAA,kCAAXC,IAAW;QAAXA,IAAW;MAAA;;MACzB,IAAIC,aAAa,GAAG,KAAKb,YAAL,CAAkBc,QAAlB,CAA2BH,GAA3B,EAAgC,KAAKI,sBAArC,CAApB;;MAEA,IAAI,CAACF,aAAL,EAAoB;QAChBA,aAAa,GAAGF,GAAhB;MACH;;MAED,IAAI,CAACC,IAAD,IAAS,CAACA,IAAI,CAACI,MAAnB,EAA2B;QACvB,OAAOH,aAAP;MACH;;MAEDD,IAAI,CAACK,OAAL,CAAaJ,aAAb;MACA,OAAOK,GAAG,CAACC,KAAJ,CAAUC,YAAV,CAAuBC,KAAvB,CAA6B,IAA7B,EAAmCT,IAAnC,CAAP;IACH;EAvCL;IAAA;IAAA,OAyCI,mBAAUU,cAAV,EAAgC;MAC5B,OAAO,KAAKnB,UAAL,CAAgBoB,SAAhB,CAA0BD,cAA1B,CAAP;IACH;EA3CL;;EAAA;AAAA","names":["ElementRef","AppConsts","LocalizationService","PermissionCheckerService","FeatureCheckerService","NotifyService","SettingService","MessageService","AbpMultiTenancyService","AppSessionService","AppComponentBase","injector","localization","defaultLocalizationSourceName","get","permission","feature","notify","setting","message","multiTenancy","appSession","elementRef","key","args","localizedText","localize","localizationSourceName","length","unshift","abp","utils","formatString","apply","permissionName","isGranted"],"sourceRoot":"","sources":["/Users/selim/repo/eryaz/angular/src/shared/app-component-base.ts"],"sourcesContent":["import { Injector, ElementRef } from '@angular/core';\nimport { AppConsts } from '@shared/AppConsts';\nimport {\n    LocalizationService,\n    PermissionCheckerService,\n    FeatureCheckerService,\n    NotifyService,\n    SettingService,\n    MessageService,\n    AbpMultiTenancyService\n} from 'abp-ng2-module';\n\nimport { AppSessionService } from '@shared/session/app-session.service';\n\nexport abstract class AppComponentBase {\n\n    localizationSourceName = AppConsts.localization.defaultLocalizationSourceName;\n\n    localization: LocalizationService;\n    permission: PermissionCheckerService;\n    feature: FeatureCheckerService;\n    notify: NotifyService;\n    setting: SettingService;\n    message: MessageService;\n    multiTenancy: AbpMultiTenancyService;\n    appSession: AppSessionService;\n    elementRef: ElementRef;\n\n    constructor(injector: Injector) {\n        this.localization = injector.get(LocalizationService);\n        this.permission = injector.get(PermissionCheckerService);\n        this.feature = injector.get(FeatureCheckerService);\n        this.notify = injector.get(NotifyService);\n        this.setting = injector.get(SettingService);\n        this.message = injector.get(MessageService);\n        this.multiTenancy = injector.get(AbpMultiTenancyService);\n        this.appSession = injector.get(AppSessionService);\n        this.elementRef = injector.get(ElementRef);\n    }\n\n    l(key: string, ...args: any[]): string {\n        let localizedText = this.localization.localize(key, this.localizationSourceName);\n\n        if (!localizedText) {\n            localizedText = key;\n        }\n\n        if (!args || !args.length) {\n            return localizedText;\n        }\n\n        args.unshift(localizedText);\n        return abp.utils.formatString.apply(this, args);\n    }\n\n    isGranted(permissionName: string): boolean {\n        return this.permission.isGranted(permissionName);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}