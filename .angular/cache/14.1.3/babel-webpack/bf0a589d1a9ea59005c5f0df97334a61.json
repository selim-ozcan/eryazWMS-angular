{"ast":null,"code":"import _assertThisInitialized from \"/Users/selim/repo/eryaz/angular/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/selim/repo/eryaz/angular/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/selim/repo/eryaz/angular/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/selim/repo/eryaz/angular/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/selim/repo/eryaz/angular/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _classCallCheck from \"/Users/selim/repo/eryaz/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/selim/repo/eryaz/angular/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { async } from '../scheduler/async';\nimport { Subscriber } from '../Subscriber';\nimport { isScheduler } from '../util/isScheduler';\nexport function bufferTime(bufferTimeSpan) {\n  var length = arguments.length;\n  var scheduler = async;\n\n  if (isScheduler(arguments[arguments.length - 1])) {\n    scheduler = arguments[arguments.length - 1];\n    length--;\n  }\n\n  var bufferCreationInterval = null;\n\n  if (length >= 2) {\n    bufferCreationInterval = arguments[1];\n  }\n\n  var maxBufferSize = Number.POSITIVE_INFINITY;\n\n  if (length >= 3) {\n    maxBufferSize = arguments[2];\n  }\n\n  return function bufferTimeOperatorFunction(source) {\n    return source.lift(new BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n  };\n}\n\nvar BufferTimeOperator = /*#__PURE__*/function () {\n  function BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {\n    _classCallCheck(this, BufferTimeOperator);\n\n    this.bufferTimeSpan = bufferTimeSpan;\n    this.bufferCreationInterval = bufferCreationInterval;\n    this.maxBufferSize = maxBufferSize;\n    this.scheduler = scheduler;\n  }\n\n  _createClass(BufferTimeOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      return source.subscribe(new BufferTimeSubscriber(subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler));\n    }\n  }]);\n\n  return BufferTimeOperator;\n}();\n\nvar Context = /*#__PURE__*/_createClass(function Context() {\n  _classCallCheck(this, Context);\n\n  this.buffer = [];\n});\n\nvar BufferTimeSubscriber = /*#__PURE__*/function (_Subscriber) {\n  _inherits(BufferTimeSubscriber, _Subscriber);\n\n  var _super = _createSuper(BufferTimeSubscriber);\n\n  function BufferTimeSubscriber(destination, bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {\n    var _this;\n\n    _classCallCheck(this, BufferTimeSubscriber);\n\n    _this = _super.call(this, destination);\n    _this.bufferTimeSpan = bufferTimeSpan;\n    _this.bufferCreationInterval = bufferCreationInterval;\n    _this.maxBufferSize = maxBufferSize;\n    _this.scheduler = scheduler;\n    _this.contexts = [];\n\n    var context = _this.openContext();\n\n    _this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n\n    if (_this.timespanOnly) {\n      var timeSpanOnlyState = {\n        subscriber: _assertThisInitialized(_this),\n        context: context,\n        bufferTimeSpan: bufferTimeSpan\n      };\n\n      _this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    } else {\n      var closeState = {\n        subscriber: _assertThisInitialized(_this),\n        context: context\n      };\n      var creationState = {\n        bufferTimeSpan: bufferTimeSpan,\n        bufferCreationInterval: bufferCreationInterval,\n        subscriber: _assertThisInitialized(_this),\n        scheduler: scheduler\n      };\n\n      _this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));\n\n      _this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));\n    }\n\n    return _this;\n  }\n\n  _createClass(BufferTimeSubscriber, [{\n    key: \"_next\",\n    value: function _next(value) {\n      var contexts = this.contexts;\n      var len = contexts.length;\n      var filledBufferContext;\n\n      for (var i = 0; i < len; i++) {\n        var context = contexts[i];\n        var buffer = context.buffer;\n        buffer.push(value);\n\n        if (buffer.length == this.maxBufferSize) {\n          filledBufferContext = context;\n        }\n      }\n\n      if (filledBufferContext) {\n        this.onBufferFull(filledBufferContext);\n      }\n    }\n  }, {\n    key: \"_error\",\n    value: function _error(err) {\n      this.contexts.length = 0;\n\n      _get(_getPrototypeOf(BufferTimeSubscriber.prototype), \"_error\", this).call(this, err);\n    }\n  }, {\n    key: \"_complete\",\n    value: function _complete() {\n      var contexts = this.contexts,\n          destination = this.destination;\n\n      while (contexts.length > 0) {\n        var context = contexts.shift();\n        destination.next(context.buffer);\n      }\n\n      _get(_getPrototypeOf(BufferTimeSubscriber.prototype), \"_complete\", this).call(this);\n    }\n  }, {\n    key: \"_unsubscribe\",\n    value: function _unsubscribe() {\n      this.contexts = null;\n    }\n  }, {\n    key: \"onBufferFull\",\n    value: function onBufferFull(context) {\n      this.closeContext(context);\n      var closeAction = context.closeAction;\n      closeAction.unsubscribe();\n      this.remove(closeAction);\n\n      if (!this.closed && this.timespanOnly) {\n        context = this.openContext();\n        var bufferTimeSpan = this.bufferTimeSpan;\n        var timeSpanOnlyState = {\n          subscriber: this,\n          context: context,\n          bufferTimeSpan: bufferTimeSpan\n        };\n        this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n      }\n    }\n  }, {\n    key: \"openContext\",\n    value: function openContext() {\n      var context = new Context();\n      this.contexts.push(context);\n      return context;\n    }\n  }, {\n    key: \"closeContext\",\n    value: function closeContext(context) {\n      this.destination.next(context.buffer);\n      var contexts = this.contexts;\n      var spliceIndex = contexts ? contexts.indexOf(context) : -1;\n\n      if (spliceIndex >= 0) {\n        contexts.splice(contexts.indexOf(context), 1);\n      }\n    }\n  }]);\n\n  return BufferTimeSubscriber;\n}(Subscriber);\n\nfunction dispatchBufferTimeSpanOnly(state) {\n  var subscriber = state.subscriber;\n  var prevContext = state.context;\n\n  if (prevContext) {\n    subscriber.closeContext(prevContext);\n  }\n\n  if (!subscriber.closed) {\n    state.context = subscriber.openContext();\n    state.context.closeAction = this.schedule(state, state.bufferTimeSpan);\n  }\n}\n\nfunction dispatchBufferCreation(state) {\n  var bufferCreationInterval = state.bufferCreationInterval,\n      bufferTimeSpan = state.bufferTimeSpan,\n      subscriber = state.subscriber,\n      scheduler = state.scheduler;\n  var context = subscriber.openContext();\n  var action = this;\n\n  if (!subscriber.closed) {\n    subscriber.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, {\n      subscriber: subscriber,\n      context: context\n    }));\n    action.schedule(state, bufferCreationInterval);\n  }\n}\n\nfunction dispatchBufferClose(arg) {\n  var subscriber = arg.subscriber,\n      context = arg.context;\n  subscriber.closeContext(context);\n}","map":{"version":3,"names":["async","Subscriber","isScheduler","bufferTime","bufferTimeSpan","length","arguments","scheduler","bufferCreationInterval","maxBufferSize","Number","POSITIVE_INFINITY","bufferTimeOperatorFunction","source","lift","BufferTimeOperator","subscriber","subscribe","BufferTimeSubscriber","Context","buffer","destination","contexts","context","openContext","timespanOnly","timeSpanOnlyState","add","closeAction","schedule","dispatchBufferTimeSpanOnly","closeState","creationState","dispatchBufferClose","dispatchBufferCreation","value","len","filledBufferContext","i","push","onBufferFull","err","shift","next","closeContext","unsubscribe","remove","closed","spliceIndex","indexOf","splice","state","prevContext","action","arg"],"sources":["/Users/selim/repo/eryaz/angular/node_modules/rxjs/_esm2015/internal/operators/bufferTime.js"],"sourcesContent":["import { async } from '../scheduler/async';\nimport { Subscriber } from '../Subscriber';\nimport { isScheduler } from '../util/isScheduler';\nexport function bufferTime(bufferTimeSpan) {\n    let length = arguments.length;\n    let scheduler = async;\n    if (isScheduler(arguments[arguments.length - 1])) {\n        scheduler = arguments[arguments.length - 1];\n        length--;\n    }\n    let bufferCreationInterval = null;\n    if (length >= 2) {\n        bufferCreationInterval = arguments[1];\n    }\n    let maxBufferSize = Number.POSITIVE_INFINITY;\n    if (length >= 3) {\n        maxBufferSize = arguments[2];\n    }\n    return function bufferTimeOperatorFunction(source) {\n        return source.lift(new BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n    };\n}\nclass BufferTimeOperator {\n    constructor(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {\n        this.bufferTimeSpan = bufferTimeSpan;\n        this.bufferCreationInterval = bufferCreationInterval;\n        this.maxBufferSize = maxBufferSize;\n        this.scheduler = scheduler;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new BufferTimeSubscriber(subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler));\n    }\n}\nclass Context {\n    constructor() {\n        this.buffer = [];\n    }\n}\nclass BufferTimeSubscriber extends Subscriber {\n    constructor(destination, bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {\n        super(destination);\n        this.bufferTimeSpan = bufferTimeSpan;\n        this.bufferCreationInterval = bufferCreationInterval;\n        this.maxBufferSize = maxBufferSize;\n        this.scheduler = scheduler;\n        this.contexts = [];\n        const context = this.openContext();\n        this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n        if (this.timespanOnly) {\n            const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n            this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n        }\n        else {\n            const closeState = { subscriber: this, context };\n            const creationState = { bufferTimeSpan, bufferCreationInterval, subscriber: this, scheduler };\n            this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));\n            this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));\n        }\n    }\n    _next(value) {\n        const contexts = this.contexts;\n        const len = contexts.length;\n        let filledBufferContext;\n        for (let i = 0; i < len; i++) {\n            const context = contexts[i];\n            const buffer = context.buffer;\n            buffer.push(value);\n            if (buffer.length == this.maxBufferSize) {\n                filledBufferContext = context;\n            }\n        }\n        if (filledBufferContext) {\n            this.onBufferFull(filledBufferContext);\n        }\n    }\n    _error(err) {\n        this.contexts.length = 0;\n        super._error(err);\n    }\n    _complete() {\n        const { contexts, destination } = this;\n        while (contexts.length > 0) {\n            const context = contexts.shift();\n            destination.next(context.buffer);\n        }\n        super._complete();\n    }\n    _unsubscribe() {\n        this.contexts = null;\n    }\n    onBufferFull(context) {\n        this.closeContext(context);\n        const closeAction = context.closeAction;\n        closeAction.unsubscribe();\n        this.remove(closeAction);\n        if (!this.closed && this.timespanOnly) {\n            context = this.openContext();\n            const bufferTimeSpan = this.bufferTimeSpan;\n            const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n            this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n        }\n    }\n    openContext() {\n        const context = new Context();\n        this.contexts.push(context);\n        return context;\n    }\n    closeContext(context) {\n        this.destination.next(context.buffer);\n        const contexts = this.contexts;\n        const spliceIndex = contexts ? contexts.indexOf(context) : -1;\n        if (spliceIndex >= 0) {\n            contexts.splice(contexts.indexOf(context), 1);\n        }\n    }\n}\nfunction dispatchBufferTimeSpanOnly(state) {\n    const subscriber = state.subscriber;\n    const prevContext = state.context;\n    if (prevContext) {\n        subscriber.closeContext(prevContext);\n    }\n    if (!subscriber.closed) {\n        state.context = subscriber.openContext();\n        state.context.closeAction = this.schedule(state, state.bufferTimeSpan);\n    }\n}\nfunction dispatchBufferCreation(state) {\n    const { bufferCreationInterval, bufferTimeSpan, subscriber, scheduler } = state;\n    const context = subscriber.openContext();\n    const action = this;\n    if (!subscriber.closed) {\n        subscriber.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, { subscriber, context }));\n        action.schedule(state, bufferCreationInterval);\n    }\n}\nfunction dispatchBufferClose(arg) {\n    const { subscriber, context } = arg;\n    subscriber.closeContext(context);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}