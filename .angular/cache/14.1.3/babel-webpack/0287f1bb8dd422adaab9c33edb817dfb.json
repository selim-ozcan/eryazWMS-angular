{"ast":null,"code":"import _classCallCheck from \"/Users/selim/repo/eryaz/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/selim/repo/eryaz/angular/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { finalize } from 'rxjs/operators';\nimport { AppConsts } from '@shared/AppConsts';\nimport { UrlHelper } from '@shared/helpers/UrlHelper';\nimport { AuthenticateModel } from '@shared/service-proxies/service-proxies';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@shared/service-proxies/service-proxies\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"abp-ng2-module\";\nexport var AppAuthService = /*#__PURE__*/function () {\n  function AppAuthService(_tokenAuthService, _router, _utilsService, _tokenService, _logService) {\n    _classCallCheck(this, AppAuthService);\n\n    this._tokenAuthService = _tokenAuthService;\n    this._router = _router;\n    this._utilsService = _utilsService;\n    this._tokenService = _tokenService;\n    this._logService = _logService;\n    this.clear();\n  }\n\n  _createClass(AppAuthService, [{\n    key: \"logout\",\n    value: function logout(reload) {\n      abp.auth.clearToken();\n      abp.utils.deleteCookie(AppConsts.authorization.encryptedAuthTokenName);\n\n      if (reload !== false) {\n        location.href = AppConsts.appBaseUrl;\n      }\n    }\n  }, {\n    key: \"authenticate\",\n    value: function authenticate(finallyCallback) {\n      var _this = this;\n\n      finallyCallback = finallyCallback || function () {};\n\n      this._tokenAuthService.authenticate(this.authenticateModel).pipe(finalize(function () {\n        finallyCallback();\n      })).subscribe(function (result) {\n        _this.processAuthenticateResult(result);\n      });\n    }\n  }, {\n    key: \"processAuthenticateResult\",\n    value: function processAuthenticateResult(authenticateResult) {\n      this.authenticateResult = authenticateResult;\n\n      if (authenticateResult.accessToken) {\n        // Successfully logged in\n        this.login(authenticateResult.accessToken, authenticateResult.encryptedAccessToken, authenticateResult.expireInSeconds, this.rememberMe);\n      } else {\n        // Unexpected result!\n        this._logService.warn('Unexpected authenticateResult!');\n\n        this._router.navigate(['account/login']);\n      }\n    }\n  }, {\n    key: \"login\",\n    value: function login(accessToken, encryptedAccessToken, expireInSeconds, rememberMe) {\n      var tokenExpireDate = rememberMe ? new Date(new Date().getTime() + 1000 * expireInSeconds) : undefined;\n\n      this._tokenService.setToken(accessToken, tokenExpireDate);\n\n      this._utilsService.setCookieValue(AppConsts.authorization.encryptedAuthTokenName, encryptedAccessToken, tokenExpireDate, abp.appPath);\n\n      var initialUrl = UrlHelper.initialUrl;\n\n      if (initialUrl.indexOf('/login') > 0) {\n        initialUrl = AppConsts.appBaseUrl;\n      }\n\n      location.href = initialUrl;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.authenticateModel = new AuthenticateModel();\n      this.authenticateModel.rememberClient = false;\n      this.authenticateResult = null;\n      this.rememberMe = false;\n    }\n  }]);\n\n  return AppAuthService;\n}();\n\nAppAuthService.ɵfac = function AppAuthService_Factory(t) {\n  return new (t || AppAuthService)(i0.ɵɵinject(i1.TokenAuthServiceProxy), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.UtilsService), i0.ɵɵinject(i3.TokenService), i0.ɵɵinject(i3.LogService));\n};\n\nAppAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AppAuthService,\n  factory: AppAuthService.ɵfac\n});","map":{"version":3,"mappings":";;AAEA,SAASA,QAAT,QAAyB,gBAAzB;AAEA,SAASC,SAAT,QAA0B,mBAA1B;AACA,SAASC,SAAT,QAA0B,2BAA1B;AACA,SACIC,iBADJ,QAIO,yCAJP;;;;;AAOA,WAAaC,cAAb;EAKI,wBACYC,iBADZ,EAEYC,OAFZ,EAGYC,aAHZ,EAIYC,aAJZ,EAKYC,WALZ,EAKmC;IAAA;;IAJvB;IACA;IACA;IACA;IACA;IAER,KAAKC,KAAL;EACH;;EAbL;IAAA;IAAA,OAeI,gBAAOC,MAAP,EAAuB;MACnBC,GAAG,CAACC,IAAJ,CAASC,UAAT;MACAF,GAAG,CAACG,KAAJ,CAAUC,YAAV,CAAuBf,SAAS,CAACgB,aAAV,CAAwBC,sBAA/C;;MAEA,IAAIP,MAAM,KAAK,KAAf,EAAsB;QAClBQ,QAAQ,CAACC,IAAT,GAAgBnB,SAAS,CAACoB,UAA1B;MACH;IACJ;EAtBL;IAAA;IAAA,OAwBI,sBAAaC,eAAb,EAAyC;MAAA;;MACrCA,eAAe,GAAGA,eAAe,IAAK,YAAK,CAAI,CAA/C;;MAEA,KAAKjB,iBAAL,CACKkB,YADL,CACkB,KAAKC,iBADvB,EAEKC,IAFL,CAGQzB,QAAQ,CAAC,YAAK;QACVsB,eAAe;MAClB,CAFO,CAHhB,EAOKI,SAPL,CAOe,UAACC,MAAD,EAAoC;QAC3C,KAAI,CAACC,yBAAL,CAA+BD,MAA/B;MACH,CATL;IAUH;EArCL;IAAA;IAAA,OAuCY,mCACJE,kBADI,EACuC;MAE3C,KAAKA,kBAAL,GAA0BA,kBAA1B;;MAEA,IAAIA,kBAAkB,CAACC,WAAvB,EAAoC;QAChC;QACA,KAAKC,KAAL,CACIF,kBAAkB,CAACC,WADvB,EAEID,kBAAkB,CAACG,oBAFvB,EAGIH,kBAAkB,CAACI,eAHvB,EAII,KAAKC,UAJT;MAMH,CARD,MAQO;QACH;QAEA,KAAKzB,WAAL,CAAiB0B,IAAjB,CAAsB,gCAAtB;;QACA,KAAK7B,OAAL,CAAa8B,QAAb,CAAsB,CAAC,eAAD,CAAtB;MACH;IACJ;EA1DL;IAAA;IAAA,OA4DY,eACJN,WADI,EAEJE,oBAFI,EAGJC,eAHI,EAIJC,UAJI,EAIgB;MAEpB,IAAMG,eAAe,GAAGH,UAAU,GAC5B,IAAII,IAAJ,CAAS,IAAIA,IAAJ,GAAWC,OAAX,KAAuB,OAAON,eAAvC,CAD4B,GAE5BO,SAFN;;MAIA,KAAKhC,aAAL,CAAmBiC,QAAnB,CAA4BX,WAA5B,EAAyCO,eAAzC;;MAEA,KAAK9B,aAAL,CAAmBmC,cAAnB,CACIzC,SAAS,CAACgB,aAAV,CAAwBC,sBAD5B,EAEIc,oBAFJ,EAGIK,eAHJ,EAIIzB,GAAG,CAAC+B,OAJR;;MAOA,IAAIC,UAAU,GAAG1C,SAAS,CAAC0C,UAA3B;;MACA,IAAIA,UAAU,CAACC,OAAX,CAAmB,QAAnB,IAA+B,CAAnC,EAAsC;QAClCD,UAAU,GAAG3C,SAAS,CAACoB,UAAvB;MACH;;MAEDF,QAAQ,CAACC,IAAT,GAAgBwB,UAAhB;IACH;EArFL;IAAA;IAAA,OAuFY,iBAAK;MACT,KAAKpB,iBAAL,GAAyB,IAAIrB,iBAAJ,EAAzB;MACA,KAAKqB,iBAAL,CAAuBsB,cAAvB,GAAwC,KAAxC;MACA,KAAKjB,kBAAL,GAA0B,IAA1B;MACA,KAAKK,UAAL,GAAkB,KAAlB;IACH;EA5FL;;EAAA;AAAA;;;mBAAa9B,gBAAc2C;AAAA;;;SAAd3C;EAAc4C,SAAd5C,cAAc","names":["finalize","AppConsts","UrlHelper","AuthenticateModel","AppAuthService","_tokenAuthService","_router","_utilsService","_tokenService","_logService","clear","reload","abp","auth","clearToken","utils","deleteCookie","authorization","encryptedAuthTokenName","location","href","appBaseUrl","finallyCallback","authenticate","authenticateModel","pipe","subscribe","result","processAuthenticateResult","authenticateResult","accessToken","login","encryptedAccessToken","expireInSeconds","rememberMe","warn","navigate","tokenExpireDate","Date","getTime","undefined","setToken","setCookieValue","appPath","initialUrl","indexOf","rememberClient","i0","factory"],"sourceRoot":"","sources":["/Users/selim/repo/eryaz/angular/src/shared/auth/app-auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { finalize } from 'rxjs/operators';\nimport { TokenService, LogService, UtilsService } from 'abp-ng2-module';\nimport { AppConsts } from '@shared/AppConsts';\nimport { UrlHelper } from '@shared/helpers/UrlHelper';\nimport {\n    AuthenticateModel,\n    AuthenticateResultModel,\n    TokenAuthServiceProxy,\n} from '@shared/service-proxies/service-proxies';\n\n@Injectable()\nexport class AppAuthService {\n    authenticateModel: AuthenticateModel;\n    authenticateResult: AuthenticateResultModel;\n    rememberMe: boolean;\n\n    constructor(\n        private _tokenAuthService: TokenAuthServiceProxy,\n        private _router: Router,\n        private _utilsService: UtilsService,\n        private _tokenService: TokenService,\n        private _logService: LogService\n    ) {\n        this.clear();\n    }\n\n    logout(reload?: boolean): void {\n        abp.auth.clearToken();\n        abp.utils.deleteCookie(AppConsts.authorization.encryptedAuthTokenName);\n        \n        if (reload !== false) {\n            location.href = AppConsts.appBaseUrl;\n        }\n    }\n\n    authenticate(finallyCallback?: () => void): void {\n        finallyCallback = finallyCallback || (() => { });\n\n        this._tokenAuthService\n            .authenticate(this.authenticateModel)\n            .pipe(\n                finalize(() => {\n                    finallyCallback();\n                })\n            )\n            .subscribe((result: AuthenticateResultModel) => {\n                this.processAuthenticateResult(result);\n            });\n    }\n\n    private processAuthenticateResult(\n        authenticateResult: AuthenticateResultModel\n    ) {\n        this.authenticateResult = authenticateResult;\n\n        if (authenticateResult.accessToken) {\n            // Successfully logged in\n            this.login(\n                authenticateResult.accessToken,\n                authenticateResult.encryptedAccessToken,\n                authenticateResult.expireInSeconds,\n                this.rememberMe\n            );\n        } else {\n            // Unexpected result!\n\n            this._logService.warn('Unexpected authenticateResult!');\n            this._router.navigate(['account/login']);\n        }\n    }\n\n    private login(\n        accessToken: string,\n        encryptedAccessToken: string,\n        expireInSeconds: number,\n        rememberMe?: boolean\n    ): void {\n        const tokenExpireDate = rememberMe\n            ? new Date(new Date().getTime() + 1000 * expireInSeconds)\n            : undefined;\n\n        this._tokenService.setToken(accessToken, tokenExpireDate);\n\n        this._utilsService.setCookieValue(\n            AppConsts.authorization.encryptedAuthTokenName,\n            encryptedAccessToken,\n            tokenExpireDate,\n            abp.appPath\n        );\n\n        let initialUrl = UrlHelper.initialUrl;\n        if (initialUrl.indexOf('/login') > 0) {\n            initialUrl = AppConsts.appBaseUrl;\n        }\n\n        location.href = initialUrl;\n    }\n\n    private clear(): void {\n        this.authenticateModel = new AuthenticateModel();\n        this.authenticateModel.rememberClient = false;\n        this.authenticateResult = null;\n        this.rememberMe = false;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}