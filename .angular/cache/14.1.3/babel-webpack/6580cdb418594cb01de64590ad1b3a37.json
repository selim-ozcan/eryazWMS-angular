{"ast":null,"code":"import _classCallCheck from \"/Users/selim/repo/eryaz/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/selim/repo/eryaz/angular/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Injector } from '@angular/core';\nimport { registerLocaleData } from '@angular/common';\nimport * as moment from 'moment-timezone';\nimport { filter as _filter, merge as _merge } from 'lodash-es';\nimport { AppConsts } from '@shared/AppConsts';\nimport { AppSessionService } from '@shared/session/app-session.service';\nimport { environment } from './environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/common/http\";\nexport var AppInitializer = /*#__PURE__*/function () {\n  function AppInitializer(_injector, _platformLocation, _httpClient) {\n    _classCallCheck(this, AppInitializer);\n\n    this._injector = _injector;\n    this._platformLocation = _platformLocation;\n    this._httpClient = _httpClient;\n  }\n\n  _createClass(AppInitializer, [{\n    key: \"init\",\n    value: function init() {\n      var _this = this;\n\n      return function () {\n        abp.ui.setBusy();\n        return new Promise(function (resolve, reject) {\n          AppConsts.appBaseHref = _this.getBaseHref();\n          var appBaseUrl = _this.getDocumentOrigin() + AppConsts.appBaseHref;\n\n          _this.getApplicationConfig(appBaseUrl, function () {\n            _this.getUserConfiguration(function () {\n              abp.event.trigger('abp.dynamicScriptsInitialized'); // do not use constructor injection for AppSessionService\n\n              var appSessionService = _this._injector.get(AppSessionService);\n\n              appSessionService.init().then(function (result) {\n                abp.ui.clearBusy();\n\n                if (_this.shouldLoadLocale()) {\n                  var angularLocale = _this.convertAbpLocaleToAngularLocale(abp.localization.currentLanguage.name);\n\n                  import(\"@angular/common/locales/\".concat(angularLocale, \".js\")).then(function (module) {\n                    registerLocaleData(module.default);\n                    resolve(result);\n                  }, reject);\n                } else {\n                  resolve(result);\n                }\n              }, function (err) {\n                abp.ui.clearBusy();\n                reject(err);\n              });\n            });\n          });\n        });\n      };\n    }\n  }, {\n    key: \"getBaseHref\",\n    value: function getBaseHref() {\n      var baseUrl = this._platformLocation.getBaseHrefFromDOM();\n\n      if (baseUrl) {\n        return baseUrl;\n      }\n\n      return '/';\n    }\n  }, {\n    key: \"getDocumentOrigin\",\n    value: function getDocumentOrigin() {\n      if (!document.location.origin) {\n        var port = document.location.port ? ':' + document.location.port : '';\n        return document.location.protocol + '//' + document.location.hostname + port;\n      }\n\n      return document.location.origin;\n    }\n  }, {\n    key: \"shouldLoadLocale\",\n    value: function shouldLoadLocale() {\n      return abp.localization.currentLanguage.name && abp.localization.currentLanguage.name !== 'en-US';\n    }\n  }, {\n    key: \"convertAbpLocaleToAngularLocale\",\n    value: function convertAbpLocaleToAngularLocale(locale) {\n      if (!AppConsts.localeMappings) {\n        return locale;\n      }\n\n      var localeMapings = _filter(AppConsts.localeMappings, {\n        from: locale\n      });\n\n      if (localeMapings && localeMapings.length) {\n        return localeMapings[0]['to'];\n      }\n\n      return locale;\n    }\n  }, {\n    key: \"getCurrentClockProvider\",\n    value: function getCurrentClockProvider(currentProviderName) {\n      if (currentProviderName === 'unspecifiedClockProvider') {\n        return abp.timing.unspecifiedClockProvider;\n      }\n\n      if (currentProviderName === 'utcClockProvider') {\n        return abp.timing.utcClockProvider;\n      }\n\n      return abp.timing.localClockProvider;\n    }\n  }, {\n    key: \"getUserConfiguration\",\n    value: function getUserConfiguration(callback) {\n      var _this2 = this;\n\n      var cookieLangValue = abp.utils.getCookieValue('Abp.Localization.CultureName');\n      var token = abp.auth.getToken();\n      var requestHeaders = {\n        'Abp.TenantId': \"\".concat(abp.multiTenancy.getTenantIdCookie()),\n        '.AspNetCore.Culture': \"c=\".concat(cookieLangValue, \"|uic=\").concat(cookieLangValue)\n      };\n\n      if (token) {\n        requestHeaders['Authorization'] = \"Bearer \".concat(token);\n      }\n\n      this._httpClient.get(\"\".concat(AppConsts.remoteServiceBaseUrl, \"/AbpUserConfiguration/GetAll\"), {\n        headers: requestHeaders\n      }).subscribe(function (response) {\n        var result = response.result;\n\n        _merge(abp, result);\n\n        abp.clock.provider = _this2.getCurrentClockProvider(result.clock.provider);\n        moment.locale(abp.localization.currentLanguage.name);\n\n        if (abp.clock.provider.supportsMultipleTimezone) {\n          moment.tz.setDefault(abp.timing.timeZoneInfo.iana.timeZoneId);\n        }\n\n        callback();\n      });\n    }\n  }, {\n    key: \"getApplicationConfig\",\n    value: function getApplicationConfig(appRootUrl, callback) {\n      this._httpClient.get(\"\".concat(appRootUrl, \"assets/\").concat(environment.appConfig), {\n        headers: {\n          'Abp.TenantId': \"\".concat(abp.multiTenancy.getTenantIdCookie())\n        }\n      }).subscribe(function (response) {\n        AppConsts.appBaseUrl = response.appBaseUrl;\n        AppConsts.remoteServiceBaseUrl = response.remoteServiceBaseUrl;\n        AppConsts.localeMappings = response.localeMappings;\n        callback();\n      });\n    }\n  }]);\n\n  return AppInitializer;\n}();\n\nAppInitializer.ɵfac = function AppInitializer_Factory(t) {\n  return new (t || AppInitializer)(i0.ɵɵinject(i0.Injector), i0.ɵɵinject(i1.PlatformLocation), i0.ɵɵinject(i2.HttpClient));\n};\n\nAppInitializer.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AppInitializer,\n  factory: AppInitializer.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["Injector","registerLocaleData","moment","filter","_filter","merge","_merge","AppConsts","AppSessionService","environment","AppInitializer","_injector","_platformLocation","_httpClient","abp","ui","setBusy","Promise","resolve","reject","appBaseHref","getBaseHref","appBaseUrl","getDocumentOrigin","getApplicationConfig","getUserConfiguration","event","trigger","appSessionService","get","init","then","result","clearBusy","shouldLoadLocale","angularLocale","convertAbpLocaleToAngularLocale","localization","currentLanguage","name","module","default","err","baseUrl","getBaseHrefFromDOM","document","location","origin","port","protocol","hostname","locale","localeMappings","localeMapings","from","length","currentProviderName","timing","unspecifiedClockProvider","utcClockProvider","localClockProvider","callback","cookieLangValue","utils","getCookieValue","token","auth","getToken","requestHeaders","multiTenancy","getTenantIdCookie","remoteServiceBaseUrl","headers","subscribe","response","clock","provider","getCurrentClockProvider","supportsMultipleTimezone","tz","setDefault","timeZoneInfo","iana","timeZoneId","appRootUrl","appConfig","i0","factory","providedIn"],"sourceRoot":"","sources":["/Users/selim/repo/eryaz/angular/src/app-initializer.ts"],"sourcesContent":["import { Injectable, Injector } from '@angular/core';\nimport { PlatformLocation, registerLocaleData } from '@angular/common';\nimport { HttpClient } from '@angular/common/http';\nimport * as moment from 'moment-timezone';\nimport { filter as _filter, merge as _merge } from 'lodash-es';\nimport { AppConsts } from '@shared/AppConsts';\nimport { AppSessionService } from '@shared/session/app-session.service';\nimport { environment } from './environments/environment';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AppInitializer {\n  constructor(\n    private _injector: Injector,\n    private _platformLocation: PlatformLocation,\n    private _httpClient: HttpClient\n  ) { }\n\n  init(): () => Promise<boolean> {\n    return () => {\n      abp.ui.setBusy();\n      return new Promise<boolean>((resolve, reject) => {\n        AppConsts.appBaseHref = this.getBaseHref();\n        const appBaseUrl = this.getDocumentOrigin() + AppConsts.appBaseHref;\n        this.getApplicationConfig(appBaseUrl, () => {\n          this.getUserConfiguration(() => {\n            abp.event.trigger('abp.dynamicScriptsInitialized');\n            // do not use constructor injection for AppSessionService\n            const appSessionService = this._injector.get(AppSessionService);\n            appSessionService.init().then(\n              (result) => {\n                abp.ui.clearBusy();\n                if (this.shouldLoadLocale()) {\n                  const angularLocale = this.convertAbpLocaleToAngularLocale(\n                    abp.localization.currentLanguage.name\n                  );\n                  import(`@angular/common/locales/${angularLocale}.js`).then(\n                    (module) => {\n                      registerLocaleData(module.default);\n                      resolve(result);\n                    },\n                    reject\n                  );\n                } else {\n                  resolve(result);\n                }\n              },\n              (err) => {\n                abp.ui.clearBusy();\n                reject(err);\n              }\n            );\n          });\n        });\n      });\n    };\n  }\n\n  private getBaseHref(): string {\n    const baseUrl = this._platformLocation.getBaseHrefFromDOM();\n    if (baseUrl) {\n      return baseUrl;\n    }\n\n    return '/';\n  }\n\n  private getDocumentOrigin(): string {\n    if (!document.location.origin) {\n      const port = document.location.port ? ':' + document.location.port : '';\n      return (\n        document.location.protocol + '//' + document.location.hostname + port\n      );\n    }\n\n    return document.location.origin;\n  }\n\n  private shouldLoadLocale(): boolean {\n    return (\n      abp.localization.currentLanguage.name &&\n      abp.localization.currentLanguage.name !== 'en-US'\n    );\n  }\n\n  private convertAbpLocaleToAngularLocale(locale: string): string {\n    if (!AppConsts.localeMappings) {\n      return locale;\n    }\n\n    const localeMapings = _filter(AppConsts.localeMappings, { from: locale });\n    if (localeMapings && localeMapings.length) {\n      return localeMapings[0]['to'];\n    }\n\n    return locale;\n  }\n\n  private getCurrentClockProvider(\n    currentProviderName: string\n  ): abp.timing.IClockProvider {\n    if (currentProviderName === 'unspecifiedClockProvider') {\n      return abp.timing.unspecifiedClockProvider;\n    }\n\n    if (currentProviderName === 'utcClockProvider') {\n      return abp.timing.utcClockProvider;\n    }\n\n    return abp.timing.localClockProvider;\n  }\n\n  private getUserConfiguration(callback: () => void): void {\n    const cookieLangValue = abp.utils.getCookieValue(\n      'Abp.Localization.CultureName'\n    );\n    const token = abp.auth.getToken();\n\n    const requestHeaders = {\n      'Abp.TenantId': `${abp.multiTenancy.getTenantIdCookie()}`,\n      '.AspNetCore.Culture': `c=${cookieLangValue}|uic=${cookieLangValue}`,\n    };\n\n    if (token) {\n      requestHeaders['Authorization'] = `Bearer ${token}`;\n    }\n\n    this._httpClient\n      .get<any>(\n        `${AppConsts.remoteServiceBaseUrl}/AbpUserConfiguration/GetAll`,\n        {\n          headers: requestHeaders,\n        }\n      )\n      .subscribe((response) => {\n        const result = response.result;\n\n        _merge(abp, result);\n\n        abp.clock.provider = this.getCurrentClockProvider(\n          result.clock.provider\n        );\n\n        moment.locale(abp.localization.currentLanguage.name);\n\n        if (abp.clock.provider.supportsMultipleTimezone) {\n          moment.tz.setDefault(abp.timing.timeZoneInfo.iana.timeZoneId);\n        }\n\n        callback();\n      });\n  }\n\n  private getApplicationConfig(appRootUrl: string, callback: () => void) {\n    this._httpClient\n      .get<any>(`${appRootUrl}assets/${environment.appConfig}`, {\n        headers: {\n          'Abp.TenantId': `${abp.multiTenancy.getTenantIdCookie()}`,\n        },\n      })\n      .subscribe((response) => {\n        AppConsts.appBaseUrl = response.appBaseUrl;\n        AppConsts.remoteServiceBaseUrl = response.remoteServiceBaseUrl;\n        AppConsts.localeMappings = response.localeMappings;\n\n        callback();\n      });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}