{"ast":null,"code":"import _get from \"/Users/selim/repo/eryaz/angular/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/selim/repo/eryaz/angular/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _classCallCheck from \"/Users/selim/repo/eryaz/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/selim/repo/eryaz/angular/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/selim/repo/eryaz/angular/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/selim/repo/eryaz/angular/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { SubjectSubscriber } from '../Subject';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\nexport var ConnectableObservable = /*#__PURE__*/function (_Observable) {\n  _inherits(ConnectableObservable, _Observable);\n\n  var _super = _createSuper(ConnectableObservable);\n\n  function ConnectableObservable(source, subjectFactory) {\n    var _this;\n\n    _classCallCheck(this, ConnectableObservable);\n\n    _this = _super.call(this);\n    _this.source = source;\n    _this.subjectFactory = subjectFactory;\n    _this._refCount = 0;\n    _this._isComplete = false;\n    return _this;\n  }\n\n  _createClass(ConnectableObservable, [{\n    key: \"_subscribe\",\n    value: function _subscribe(subscriber) {\n      return this.getSubject().subscribe(subscriber);\n    }\n  }, {\n    key: \"getSubject\",\n    value: function getSubject() {\n      var subject = this._subject;\n\n      if (!subject || subject.isStopped) {\n        this._subject = this.subjectFactory();\n      }\n\n      return this._subject;\n    }\n  }, {\n    key: \"connect\",\n    value: function connect() {\n      var connection = this._connection;\n\n      if (!connection) {\n        this._isComplete = false;\n        connection = this._connection = new Subscription();\n        connection.add(this.source.subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n\n        if (connection.closed) {\n          this._connection = null;\n          connection = Subscription.EMPTY;\n        }\n      }\n\n      return connection;\n    }\n  }, {\n    key: \"refCount\",\n    value: function refCount() {\n      return higherOrderRefCount()(this);\n    }\n  }]);\n\n  return ConnectableObservable;\n}(Observable);\nexport var connectableObservableDescriptor = function () {\n  var connectableProto = ConnectableObservable.prototype;\n  return {\n    operator: {\n      value: null\n    },\n    _refCount: {\n      value: 0,\n      writable: true\n    },\n    _subject: {\n      value: null,\n      writable: true\n    },\n    _connection: {\n      value: null,\n      writable: true\n    },\n    _subscribe: {\n      value: connectableProto._subscribe\n    },\n    _isComplete: {\n      value: connectableProto._isComplete,\n      writable: true\n    },\n    getSubject: {\n      value: connectableProto.getSubject\n    },\n    connect: {\n      value: connectableProto.connect\n    },\n    refCount: {\n      value: connectableProto.refCount\n    }\n  };\n}();\n\nvar ConnectableSubscriber = /*#__PURE__*/function (_SubjectSubscriber) {\n  _inherits(ConnectableSubscriber, _SubjectSubscriber);\n\n  var _super2 = _createSuper(ConnectableSubscriber);\n\n  function ConnectableSubscriber(destination, connectable) {\n    var _this2;\n\n    _classCallCheck(this, ConnectableSubscriber);\n\n    _this2 = _super2.call(this, destination);\n    _this2.connectable = connectable;\n    return _this2;\n  }\n\n  _createClass(ConnectableSubscriber, [{\n    key: \"_error\",\n    value: function _error(err) {\n      this._unsubscribe();\n\n      _get(_getPrototypeOf(ConnectableSubscriber.prototype), \"_error\", this).call(this, err);\n    }\n  }, {\n    key: \"_complete\",\n    value: function _complete() {\n      this.connectable._isComplete = true;\n\n      this._unsubscribe();\n\n      _get(_getPrototypeOf(ConnectableSubscriber.prototype), \"_complete\", this).call(this);\n    }\n  }, {\n    key: \"_unsubscribe\",\n    value: function _unsubscribe() {\n      var connectable = this.connectable;\n\n      if (connectable) {\n        this.connectable = null;\n        var connection = connectable._connection;\n        connectable._refCount = 0;\n        connectable._subject = null;\n        connectable._connection = null;\n\n        if (connection) {\n          connection.unsubscribe();\n        }\n      }\n    }\n  }]);\n\n  return ConnectableSubscriber;\n}(SubjectSubscriber);\n\nvar RefCountOperator = /*#__PURE__*/function () {\n  function RefCountOperator(connectable) {\n    _classCallCheck(this, RefCountOperator);\n\n    this.connectable = connectable;\n  }\n\n  _createClass(RefCountOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      var connectable = this.connectable;\n      connectable._refCount++;\n      var refCounter = new RefCountSubscriber(subscriber, connectable);\n      var subscription = source.subscribe(refCounter);\n\n      if (!refCounter.closed) {\n        refCounter.connection = connectable.connect();\n      }\n\n      return subscription;\n    }\n  }]);\n\n  return RefCountOperator;\n}();\n\nvar RefCountSubscriber = /*#__PURE__*/function (_Subscriber) {\n  _inherits(RefCountSubscriber, _Subscriber);\n\n  var _super3 = _createSuper(RefCountSubscriber);\n\n  function RefCountSubscriber(destination, connectable) {\n    var _this3;\n\n    _classCallCheck(this, RefCountSubscriber);\n\n    _this3 = _super3.call(this, destination);\n    _this3.connectable = connectable;\n    return _this3;\n  }\n\n  _createClass(RefCountSubscriber, [{\n    key: \"_unsubscribe\",\n    value: function _unsubscribe() {\n      var connectable = this.connectable;\n\n      if (!connectable) {\n        this.connection = null;\n        return;\n      }\n\n      this.connectable = null;\n      var refCount = connectable._refCount;\n\n      if (refCount <= 0) {\n        this.connection = null;\n        return;\n      }\n\n      connectable._refCount = refCount - 1;\n\n      if (refCount > 1) {\n        this.connection = null;\n        return;\n      }\n\n      var connection = this.connection;\n      var sharedConnection = connectable._connection;\n      this.connection = null;\n\n      if (sharedConnection && (!connection || sharedConnection === connection)) {\n        sharedConnection.unsubscribe();\n      }\n    }\n  }]);\n\n  return RefCountSubscriber;\n}(Subscriber);","map":{"version":3,"names":["SubjectSubscriber","Observable","Subscriber","Subscription","refCount","higherOrderRefCount","ConnectableObservable","source","subjectFactory","_refCount","_isComplete","subscriber","getSubject","subscribe","subject","_subject","isStopped","connection","_connection","add","ConnectableSubscriber","closed","EMPTY","connectableObservableDescriptor","connectableProto","prototype","operator","value","writable","_subscribe","connect","destination","connectable","err","_unsubscribe","unsubscribe","RefCountOperator","refCounter","RefCountSubscriber","subscription","sharedConnection"],"sources":["/Users/selim/repo/eryaz/angular/node_modules/rxjs/_esm2015/internal/observable/ConnectableObservable.js"],"sourcesContent":["import { SubjectSubscriber } from '../Subject';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\nexport class ConnectableObservable extends Observable {\n    constructor(source, subjectFactory) {\n        super();\n        this.source = source;\n        this.subjectFactory = subjectFactory;\n        this._refCount = 0;\n        this._isComplete = false;\n    }\n    _subscribe(subscriber) {\n        return this.getSubject().subscribe(subscriber);\n    }\n    getSubject() {\n        const subject = this._subject;\n        if (!subject || subject.isStopped) {\n            this._subject = this.subjectFactory();\n        }\n        return this._subject;\n    }\n    connect() {\n        let connection = this._connection;\n        if (!connection) {\n            this._isComplete = false;\n            connection = this._connection = new Subscription();\n            connection.add(this.source\n                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n            if (connection.closed) {\n                this._connection = null;\n                connection = Subscription.EMPTY;\n            }\n        }\n        return connection;\n    }\n    refCount() {\n        return higherOrderRefCount()(this);\n    }\n}\nexport const connectableObservableDescriptor = (() => {\n    const connectableProto = ConnectableObservable.prototype;\n    return {\n        operator: { value: null },\n        _refCount: { value: 0, writable: true },\n        _subject: { value: null, writable: true },\n        _connection: { value: null, writable: true },\n        _subscribe: { value: connectableProto._subscribe },\n        _isComplete: { value: connectableProto._isComplete, writable: true },\n        getSubject: { value: connectableProto.getSubject },\n        connect: { value: connectableProto.connect },\n        refCount: { value: connectableProto.refCount }\n    };\n})();\nclass ConnectableSubscriber extends SubjectSubscriber {\n    constructor(destination, connectable) {\n        super(destination);\n        this.connectable = connectable;\n    }\n    _error(err) {\n        this._unsubscribe();\n        super._error(err);\n    }\n    _complete() {\n        this.connectable._isComplete = true;\n        this._unsubscribe();\n        super._complete();\n    }\n    _unsubscribe() {\n        const connectable = this.connectable;\n        if (connectable) {\n            this.connectable = null;\n            const connection = connectable._connection;\n            connectable._refCount = 0;\n            connectable._subject = null;\n            connectable._connection = null;\n            if (connection) {\n                connection.unsubscribe();\n            }\n        }\n    }\n}\nclass RefCountOperator {\n    constructor(connectable) {\n        this.connectable = connectable;\n    }\n    call(subscriber, source) {\n        const { connectable } = this;\n        connectable._refCount++;\n        const refCounter = new RefCountSubscriber(subscriber, connectable);\n        const subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    }\n}\nclass RefCountSubscriber extends Subscriber {\n    constructor(destination, connectable) {\n        super(destination);\n        this.connectable = connectable;\n    }\n    _unsubscribe() {\n        const { connectable } = this;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        const refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        const { connection } = this;\n        const sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}