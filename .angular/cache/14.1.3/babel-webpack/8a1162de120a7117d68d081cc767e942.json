{"ast":null,"code":"import { Observable } from '../Observable';\nimport { isScheduler } from '../util/isScheduler';\nimport { mergeAll } from '../operators/mergeAll';\nimport { fromArray } from './fromArray';\nexport function merge() {\n  var concurrent = Number.POSITIVE_INFINITY;\n  var scheduler = null;\n\n  for (var _len = arguments.length, observables = new Array(_len), _key = 0; _key < _len; _key++) {\n    observables[_key] = arguments[_key];\n  }\n\n  var last = observables[observables.length - 1];\n\n  if (isScheduler(last)) {\n    scheduler = observables.pop();\n\n    if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n      concurrent = observables.pop();\n    }\n  } else if (typeof last === 'number') {\n    concurrent = observables.pop();\n  }\n\n  if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable) {\n    return observables[0];\n  }\n\n  return mergeAll(concurrent)(fromArray(observables, scheduler));\n}","map":{"version":3,"names":["Observable","isScheduler","mergeAll","fromArray","merge","concurrent","Number","POSITIVE_INFINITY","scheduler","observables","last","length","pop"],"sources":["/Users/selim/repo/eryaz/angular/node_modules/rxjs/_esm2015/internal/observable/merge.js"],"sourcesContent":["import { Observable } from '../Observable';\nimport { isScheduler } from '../util/isScheduler';\nimport { mergeAll } from '../operators/mergeAll';\nimport { fromArray } from './fromArray';\nexport function merge(...observables) {\n    let concurrent = Number.POSITIVE_INFINITY;\n    let scheduler = null;\n    let last = observables[observables.length - 1];\n    if (isScheduler(last)) {\n        scheduler = observables.pop();\n        if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n            concurrent = observables.pop();\n        }\n    }\n    else if (typeof last === 'number') {\n        concurrent = observables.pop();\n    }\n    if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable) {\n        return observables[0];\n    }\n    return mergeAll(concurrent)(fromArray(observables, scheduler));\n}\n"],"mappings":"AAAA,SAASA,UAAT,QAA2B,eAA3B;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,SAASC,QAAT,QAAyB,uBAAzB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAO,SAASC,KAAT,GAA+B;EAClC,IAAIC,UAAU,GAAGC,MAAM,CAACC,iBAAxB;EACA,IAAIC,SAAS,GAAG,IAAhB;;EAFkC,kCAAbC,WAAa;IAAbA,WAAa;EAAA;;EAGlC,IAAIC,IAAI,GAAGD,WAAW,CAACA,WAAW,CAACE,MAAZ,GAAqB,CAAtB,CAAtB;;EACA,IAAIV,WAAW,CAACS,IAAD,CAAf,EAAuB;IACnBF,SAAS,GAAGC,WAAW,CAACG,GAAZ,EAAZ;;IACA,IAAIH,WAAW,CAACE,MAAZ,GAAqB,CAArB,IAA0B,OAAOF,WAAW,CAACA,WAAW,CAACE,MAAZ,GAAqB,CAAtB,CAAlB,KAA+C,QAA7E,EAAuF;MACnFN,UAAU,GAAGI,WAAW,CAACG,GAAZ,EAAb;IACH;EACJ,CALD,MAMK,IAAI,OAAOF,IAAP,KAAgB,QAApB,EAA8B;IAC/BL,UAAU,GAAGI,WAAW,CAACG,GAAZ,EAAb;EACH;;EACD,IAAIJ,SAAS,KAAK,IAAd,IAAsBC,WAAW,CAACE,MAAZ,KAAuB,CAA7C,IAAkDF,WAAW,CAAC,CAAD,CAAX,YAA0BT,UAAhF,EAA4F;IACxF,OAAOS,WAAW,CAAC,CAAD,CAAlB;EACH;;EACD,OAAOP,QAAQ,CAACG,UAAD,CAAR,CAAqBF,SAAS,CAACM,WAAD,EAAcD,SAAd,CAA9B,CAAP;AACH"},"metadata":{},"sourceType":"module"}