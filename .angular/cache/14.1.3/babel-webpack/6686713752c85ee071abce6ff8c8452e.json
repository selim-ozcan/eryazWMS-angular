{"ast":null,"code":"import _classCallCheck from \"/Users/selim/repo/eryaz/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/selim/repo/eryaz/angular/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { forwardRef } from '@angular/core';\nimport { AbstractControl, NG_VALIDATORS } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nexport var EqualValidator = /*#__PURE__*/function () {\n  function EqualValidator(validateEqual, reverse) {\n    _classCallCheck(this, EqualValidator);\n\n    this.validateEqual = validateEqual;\n    this.reverse = reverse;\n  }\n\n  _createClass(EqualValidator, [{\n    key: \"isReverse\",\n    get: function get() {\n      if (!this.reverse) {\n        return false;\n      }\n\n      return this.reverse === 'true' ? true : false;\n    }\n  }, {\n    key: \"validate\",\n    value: function validate(control) {\n      // self value\n      var value = control.value; // second control\n\n      var control2 = control.root.get(this.validateEqual); // value not equal\n\n      if (control2 && value !== control2.value && !this.isReverse) {\n        return {\n          validateEqual: true\n        };\n      } // value equal and reverse\n\n\n      if (control2 && value === control2.value && this.isReverse) {\n        delete control2.errors['validateEqual'];\n\n        if (!Object.keys(control2.errors).length) {\n          control2.setErrors(null);\n        }\n      } // value not equal and reverse\n\n\n      if (control2 && value !== control2.value && this.isReverse) {\n        control2.setErrors({\n          validateEqual: true\n        });\n      }\n\n      return null;\n    }\n  }]);\n\n  return EqualValidator;\n}();\n\nEqualValidator.ɵfac = function EqualValidator_Factory(t) {\n  return new (t || EqualValidator)(i0.ɵɵinjectAttribute('validateEqual'), i0.ɵɵinjectAttribute('reverse'));\n};\n\nEqualValidator.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n  type: EqualValidator,\n  selectors: [[\"\", \"validateEqual\", \"\", \"formControlName\", \"\"], [\"\", \"validateEqual\", \"\", \"formControl\", \"\"], [\"\", \"validateEqual\", \"\", \"ngModel\", \"\"]],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(function () {\n      return EqualValidator;\n    }),\n    multi: true\n  }])]\n});","map":{"version":3,"mappings":";;AAAA,SAAoBA,UAApB,QAAiD,eAAjD;AACA,SAAoBC,eAApB,EAAqCC,aAArC,QAA0D,gBAA1D;;AAcA,WAAaC,cAAb;EACE,wBACqCC,aADrC,EAE+BC,OAF/B,EAE8C;IAAA;;IADT;IACN;EAC3B;;EAJN;IAAA;IAAA,KAME,eAAqB;MACnB,IAAI,CAAC,KAAKA,OAAV,EAAmB;QACjB,OAAO,KAAP;MACD;;MACD,OAAO,KAAKA,OAAL,KAAiB,MAAjB,GAA0B,IAA1B,GAAiC,KAAxC;IACD;EAXH;IAAA;IAAA,OAaE,kBAASC,OAAT,EAAiC;MAC/B;MACA,IAAMC,KAAK,GAAGD,OAAO,CAACC,KAAtB,CAF+B,CAI/B;;MACA,IAAMC,QAAQ,GAAGF,OAAO,CAACG,IAAR,CAAaC,GAAb,CAAiB,KAAKN,aAAtB,CAAjB,CAL+B,CAO/B;;MACA,IAAII,QAAQ,IAAID,KAAK,KAAKC,QAAQ,CAACD,KAA/B,IAAwC,CAAC,KAAKI,SAAlD,EAA6D;QAC3D,OAAO;UACLP,aAAa,EAAE;QADV,CAAP;MAGD,CAZ8B,CAc/B;;;MACA,IAAII,QAAQ,IAAID,KAAK,KAAKC,QAAQ,CAACD,KAA/B,IAAwC,KAAKI,SAAjD,EAA4D;QAC1D,OAAOH,QAAQ,CAACI,MAAT,CAAgB,eAAhB,CAAP;;QACA,IAAI,CAACC,MAAM,CAACC,IAAP,CAAYN,QAAQ,CAACI,MAArB,EAA6BG,MAAlC,EAA0C;UACxCP,QAAQ,CAACQ,SAAT,CAAmB,IAAnB;QACD;MACF,CApB8B,CAsB/B;;;MACA,IAAIR,QAAQ,IAAID,KAAK,KAAKC,QAAQ,CAACD,KAA/B,IAAwC,KAAKI,SAAjD,EAA4D;QAC1DH,QAAQ,CAACQ,SAAT,CAAmB;UAAEZ,aAAa,EAAE;QAAjB,CAAnB;MACD;;MAED,OAAO,IAAP;IACD;EAzCH;;EAAA;AAAA;;;mBAAaD,gBAAcc,qBAEZ,eAFY,GAEGA,qBACf,SADe;AACN;;;QAHXd;EAAce;EAAAC,iCARd,CACT;IACEC,OAAO,EAAElB,aADX;IAEEmB,WAAW,EAAErB,UAAU,CAAC;MAAA,OAAMG,cAAN;IAAA,CAAD,CAFzB;IAGEmB,KAAK,EAAE;EAHT,CADS,CAQc","names":["forwardRef","AbstractControl","NG_VALIDATORS","EqualValidator","validateEqual","reverse","control","value","control2","root","get","isReverse","errors","Object","keys","length","setErrors","i0","selectors","features","provide","useExisting","multi"],"sourceRoot":"","sources":["/Users/selim/repo/eryaz/angular/src/shared/directives/equal-validator.directive.ts"],"sourcesContent":["import { Directive, forwardRef, Attribute } from '@angular/core';\nimport { Validator, AbstractControl, NG_VALIDATORS } from '@angular/forms';\n\n@Directive({\n  selector:\n    // tslint:disable-next-line:directive-selector\n    '[validateEqual][formControlName],[validateEqual][formControl],[validateEqual][ngModel]',\n  providers: [\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => EqualValidator),\n      multi: true\n    }\n  ]\n})\nexport class EqualValidator implements Validator {\n  constructor(\n    @Attribute('validateEqual') public validateEqual: string,\n    @Attribute('reverse') public reverse: string\n  ) {}\n\n  private get isReverse() {\n    if (!this.reverse) {\n      return false;\n    }\n    return this.reverse === 'true' ? true : false;\n  }\n\n  validate(control: AbstractControl): { [key: string]: any } {\n    // self value\n    const value = control.value;\n\n    // second control\n    const control2 = control.root.get(this.validateEqual);\n\n    // value not equal\n    if (control2 && value !== control2.value && !this.isReverse) {\n      return {\n        validateEqual: true\n      };\n    }\n\n    // value equal and reverse\n    if (control2 && value === control2.value && this.isReverse) {\n      delete control2.errors['validateEqual'];\n      if (!Object.keys(control2.errors).length) {\n        control2.setErrors(null);\n      }\n    }\n\n    // value not equal and reverse\n    if (control2 && value !== control2.value && this.isReverse) {\n      control2.setErrors({ validateEqual: true });\n    }\n\n    return null;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}