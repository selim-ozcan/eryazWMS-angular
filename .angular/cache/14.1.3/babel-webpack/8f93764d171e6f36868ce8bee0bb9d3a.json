{"ast":null,"code":"import _get from \"/Users/selim/repo/eryaz/angular/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/selim/repo/eryaz/angular/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/selim/repo/eryaz/angular/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/selim/repo/eryaz/angular/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _slicedToArray from \"/Users/selim/repo/eryaz/angular/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"/Users/selim/repo/eryaz/angular/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"/Users/selim/repo/eryaz/angular/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/Users/selim/repo/eryaz/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/selim/repo/eryaz/angular/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as i1 from '@angular/cdk/scrolling';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nexport { CdkScrollable, ScrollDispatcher, ViewportRuler } from '@angular/cdk/scrolling';\nimport * as i6 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Inject, ElementRef, Optional, ApplicationRef, ANIMATION_MODULE_TYPE, InjectionToken, Directive, EventEmitter, Input, Output, NgModule } from '@angular/core';\nimport { coerceCssPixelValue, coerceArray, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i1$1 from '@angular/cdk/platform';\nimport { supportsScrollBehavior, _isTestEnvironment, _getEventTarget } from '@angular/cdk/platform';\nimport * as i5 from '@angular/cdk/bidi';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport { DomPortalOutlet, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { Subject, Subscription, merge } from 'rxjs';\nimport { take, takeUntil, takeWhile } from 'rxjs/operators';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar scrollBehaviorSupported = supportsScrollBehavior();\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\n\nvar BlockScrollStrategy = /*#__PURE__*/function () {\n  function BlockScrollStrategy(_viewportRuler, document) {\n    _classCallCheck(this, BlockScrollStrategy);\n\n    this._viewportRuler = _viewportRuler;\n    this._previousHTMLStyles = {\n      top: '',\n      left: ''\n    };\n    this._isEnabled = false;\n    this._document = document;\n  }\n  /** Attaches this scroll strategy to an overlay. */\n\n\n  _createClass(BlockScrollStrategy, [{\n    key: \"attach\",\n    value: function attach() {}\n    /** Blocks page-level scroll while the attached overlay is open. */\n\n  }, {\n    key: \"enable\",\n    value: function enable() {\n      if (this._canBeEnabled()) {\n        var root = this._document.documentElement;\n        this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition(); // Cache the previous inline styles in case the user had set them.\n\n        this._previousHTMLStyles.left = root.style.left || '';\n        this._previousHTMLStyles.top = root.style.top || ''; // Note: we're using the `html` node, instead of the `body`, because the `body` may\n        // have the user agent margin, whereas the `html` is guaranteed not to have one.\n\n        root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n        root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n        root.classList.add('cdk-global-scrollblock');\n        this._isEnabled = true;\n      }\n    }\n    /** Unblocks page-level scroll while the attached overlay is open. */\n\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      if (this._isEnabled) {\n        var html = this._document.documentElement;\n        var body = this._document.body;\n        var htmlStyle = html.style;\n        var bodyStyle = body.style;\n        var previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n        var previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n        this._isEnabled = false;\n        htmlStyle.left = this._previousHTMLStyles.left;\n        htmlStyle.top = this._previousHTMLStyles.top;\n        html.classList.remove('cdk-global-scrollblock'); // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n        // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n        // Note that we don't mutate the property if the browser doesn't support `scroll-behavior`,\n        // because it can throw off feature detections in `supportsScrollBehavior` which\n        // checks for `'scrollBehavior' in documentElement.style`.\n\n        if (scrollBehaviorSupported) {\n          htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n        }\n\n        window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n\n        if (scrollBehaviorSupported) {\n          htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n          bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n        }\n      }\n    }\n  }, {\n    key: \"_canBeEnabled\",\n    value: function _canBeEnabled() {\n      // Since the scroll strategies can't be singletons, we have to use a global CSS class\n      // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n      // scrolling multiple times.\n      var html = this._document.documentElement;\n\n      if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n        return false;\n      }\n\n      var body = this._document.body;\n\n      var viewport = this._viewportRuler.getViewportSize();\n\n      return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n    }\n  }]);\n\n  return BlockScrollStrategy;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n */\n\n\nfunction getMatScrollStrategyAlreadyAttachedError() {\n  return Error(\"Scroll strategy has already been attached.\");\n}\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\n\n\nvar CloseScrollStrategy = /*#__PURE__*/function () {\n  function CloseScrollStrategy(_scrollDispatcher, _ngZone, _viewportRuler, _config) {\n    var _this = this;\n\n    _classCallCheck(this, CloseScrollStrategy);\n\n    this._scrollDispatcher = _scrollDispatcher;\n    this._ngZone = _ngZone;\n    this._viewportRuler = _viewportRuler;\n    this._config = _config;\n    this._scrollSubscription = null;\n    /** Detaches the overlay ref and disables the scroll strategy. */\n\n    this._detach = function () {\n      _this.disable();\n\n      if (_this._overlayRef.hasAttached()) {\n        _this._ngZone.run(function () {\n          return _this._overlayRef.detach();\n        });\n      }\n    };\n  }\n  /** Attaches this scroll strategy to an overlay. */\n\n\n  _createClass(CloseScrollStrategy, [{\n    key: \"attach\",\n    value: function attach(overlayRef) {\n      if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getMatScrollStrategyAlreadyAttachedError();\n      }\n\n      this._overlayRef = overlayRef;\n    }\n    /** Enables the closing of the attached overlay on scroll. */\n\n  }, {\n    key: \"enable\",\n    value: function enable() {\n      var _this2 = this;\n\n      if (this._scrollSubscription) {\n        return;\n      }\n\n      var stream = this._scrollDispatcher.scrolled(0);\n\n      if (this._config && this._config.threshold && this._config.threshold > 1) {\n        this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n        this._scrollSubscription = stream.subscribe(function () {\n          var scrollPosition = _this2._viewportRuler.getViewportScrollPosition().top;\n\n          if (Math.abs(scrollPosition - _this2._initialScrollPosition) > _this2._config.threshold) {\n            _this2._detach();\n          } else {\n            _this2._overlayRef.updatePosition();\n          }\n        });\n      } else {\n        this._scrollSubscription = stream.subscribe(this._detach);\n      }\n    }\n    /** Disables the closing the attached overlay on scroll. */\n\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      if (this._scrollSubscription) {\n        this._scrollSubscription.unsubscribe();\n\n        this._scrollSubscription = null;\n      }\n    }\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      this.disable();\n      this._overlayRef = null;\n    }\n  }]);\n\n  return CloseScrollStrategy;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Scroll strategy that doesn't do anything. */\n\n\nvar NoopScrollStrategy = /*#__PURE__*/function () {\n  function NoopScrollStrategy() {\n    _classCallCheck(this, NoopScrollStrategy);\n  }\n\n  _createClass(NoopScrollStrategy, [{\n    key: \"enable\",\n    value:\n    /** Does nothing, as this scroll strategy is a no-op. */\n    function enable() {}\n    /** Does nothing, as this scroll strategy is a no-op. */\n\n  }, {\n    key: \"disable\",\n    value: function disable() {}\n    /** Does nothing, as this scroll strategy is a no-op. */\n\n  }, {\n    key: \"attach\",\n    value: function attach() {}\n  }]);\n\n  return NoopScrollStrategy;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is scrolled out of view\n * @docs-private\n */\n\n\nfunction isElementScrolledOutsideView(element, scrollContainers) {\n  return scrollContainers.some(function (containerBounds) {\n    var outsideAbove = element.bottom < containerBounds.top;\n    var outsideBelow = element.top > containerBounds.bottom;\n    var outsideLeft = element.right < containerBounds.left;\n    var outsideRight = element.left > containerBounds.right;\n    return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n  });\n}\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is clipped\n * @docs-private\n */\n\n\nfunction isElementClippedByScrolling(element, scrollContainers) {\n  return scrollContainers.some(function (scrollContainerRect) {\n    var clippedAbove = element.top < scrollContainerRect.top;\n    var clippedBelow = element.bottom > scrollContainerRect.bottom;\n    var clippedLeft = element.left < scrollContainerRect.left;\n    var clippedRight = element.right > scrollContainerRect.right;\n    return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n  });\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\n\n\nvar RepositionScrollStrategy = /*#__PURE__*/function () {\n  function RepositionScrollStrategy(_scrollDispatcher, _viewportRuler, _ngZone, _config) {\n    _classCallCheck(this, RepositionScrollStrategy);\n\n    this._scrollDispatcher = _scrollDispatcher;\n    this._viewportRuler = _viewportRuler;\n    this._ngZone = _ngZone;\n    this._config = _config;\n    this._scrollSubscription = null;\n  }\n  /** Attaches this scroll strategy to an overlay. */\n\n\n  _createClass(RepositionScrollStrategy, [{\n    key: \"attach\",\n    value: function attach(overlayRef) {\n      if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getMatScrollStrategyAlreadyAttachedError();\n      }\n\n      this._overlayRef = overlayRef;\n    }\n    /** Enables repositioning of the attached overlay on scroll. */\n\n  }, {\n    key: \"enable\",\n    value: function enable() {\n      var _this3 = this;\n\n      if (!this._scrollSubscription) {\n        var throttle = this._config ? this._config.scrollThrottle : 0;\n        this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(function () {\n          _this3._overlayRef.updatePosition(); // TODO(crisbeto): make `close` on by default once all components can handle it.\n\n\n          if (_this3._config && _this3._config.autoClose) {\n            var overlayRect = _this3._overlayRef.overlayElement.getBoundingClientRect();\n\n            var _this3$_viewportRuler = _this3._viewportRuler.getViewportSize(),\n                width = _this3$_viewportRuler.width,\n                height = _this3$_viewportRuler.height; // TODO(crisbeto): include all ancestor scroll containers here once\n            // we have a way of exposing the trigger element to the scroll strategy.\n\n\n            var parentRects = [{\n              width: width,\n              height: height,\n              bottom: height,\n              right: width,\n              top: 0,\n              left: 0\n            }];\n\n            if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n              _this3.disable();\n\n              _this3._ngZone.run(function () {\n                return _this3._overlayRef.detach();\n              });\n            }\n          }\n        });\n      }\n    }\n    /** Disables repositioning of the attached overlay on scroll. */\n\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      if (this._scrollSubscription) {\n        this._scrollSubscription.unsubscribe();\n\n        this._scrollSubscription = null;\n      }\n    }\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      this.disable();\n      this._overlayRef = null;\n    }\n  }]);\n\n  return RepositionScrollStrategy;\n}();\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\n\n\nvar ScrollStrategyOptions = /*#__PURE__*/_createClass(function ScrollStrategyOptions(_scrollDispatcher, _viewportRuler, _ngZone, document) {\n  var _this4 = this;\n\n  _classCallCheck(this, ScrollStrategyOptions);\n\n  this._scrollDispatcher = _scrollDispatcher;\n  this._viewportRuler = _viewportRuler;\n  this._ngZone = _ngZone;\n  /** Do nothing on scroll. */\n\n  this.noop = function () {\n    return new NoopScrollStrategy();\n  };\n  /**\n   * Close the overlay as soon as the user scrolls.\n   * @param config Configuration to be used inside the scroll strategy.\n   */\n\n\n  this.close = function (config) {\n    return new CloseScrollStrategy(_this4._scrollDispatcher, _this4._ngZone, _this4._viewportRuler, config);\n  };\n  /** Block scrolling. */\n\n\n  this.block = function () {\n    return new BlockScrollStrategy(_this4._viewportRuler, _this4._document);\n  };\n  /**\n   * Update the overlay's position on scroll.\n   * @param config Configuration to be used inside the scroll strategy.\n   * Allows debouncing the reposition calls.\n   */\n\n\n  this.reposition = function (config) {\n    return new RepositionScrollStrategy(_this4._scrollDispatcher, _this4._viewportRuler, _this4._ngZone, config);\n  };\n\n  this._document = document;\n});\n\nScrollStrategyOptions.ɵfac = function ScrollStrategyOptions_Factory(t) {\n  return new (t || ScrollStrategyOptions)(i0.ɵɵinject(i1.ScrollDispatcher), i0.ɵɵinject(i1.ViewportRuler), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(DOCUMENT));\n};\n\nScrollStrategyOptions.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ScrollStrategyOptions,\n  factory: ScrollStrategyOptions.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ScrollStrategyOptions, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.ScrollDispatcher\n    }, {\n      type: i1.ViewportRuler\n    }, {\n      type: i0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Initial configuration used when creating an overlay. */\n\n\nvar OverlayConfig = /*#__PURE__*/_createClass(function OverlayConfig(config) {\n  _classCallCheck(this, OverlayConfig);\n\n  /** Strategy to be used when handling scroll events while the overlay is open. */\n  this.scrollStrategy = new NoopScrollStrategy();\n  /** Custom class to add to the overlay pane. */\n\n  this.panelClass = '';\n  /** Whether the overlay has a backdrop. */\n\n  this.hasBackdrop = false;\n  /** Custom class to add to the backdrop */\n\n  this.backdropClass = 'cdk-overlay-dark-backdrop';\n  /**\n   * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n\n  this.disposeOnNavigation = false;\n\n  if (config) {\n    // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n    // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n    // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n    var configKeys = Object.keys(config);\n\n    for (var _i = 0, _configKeys = configKeys; _i < _configKeys.length; _i++) {\n      var key = _configKeys[_i];\n\n      if (config[key] !== undefined) {\n        // TypeScript, as of version 3.5, sees the left-hand-side of this expression\n        // as \"I don't know *which* key this is, so the only valid value is the intersection\n        // of all the possible values.\" In this case, that happens to be `undefined`. TypeScript\n        // is not smart enough to see that the right-hand-side is actually an access of the same\n        // exact type with the same exact key, meaning that the value type must be identical.\n        // So we use `any` to work around this.\n        this[key] = config[key];\n      }\n    }\n  }\n});\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** The points of the origin element and the overlay element to connect. */\n\n\nvar ConnectionPositionPair = /*#__PURE__*/_createClass(function ConnectionPositionPair(origin, overlay,\n/** Offset along the X axis. */\noffsetX,\n/** Offset along the Y axis. */\noffsetY,\n/** Class(es) to be applied to the panel while this position is active. */\npanelClass) {\n  _classCallCheck(this, ConnectionPositionPair);\n\n  this.offsetX = offsetX;\n  this.offsetY = offsetY;\n  this.panelClass = panelClass;\n  this.originX = origin.originX;\n  this.originY = origin.originY;\n  this.overlayX = overlay.overlayX;\n  this.overlayY = overlay.overlayY;\n});\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n *  @docs-private\n */\n\n\nvar ScrollingVisibility = /*#__PURE__*/_createClass(function ScrollingVisibility() {\n  _classCallCheck(this, ScrollingVisibility);\n});\n/** The change event emitted by the strategy when a fallback position is used. */\n\n\nvar ConnectedOverlayPositionChange = /*#__PURE__*/_createClass(function ConnectedOverlayPositionChange(\n/** The position used as a result of this change. */\nconnectionPair,\n/** @docs-private */\nscrollableViewProperties) {\n  _classCallCheck(this, ConnectedOverlayPositionChange);\n\n  this.connectionPair = connectionPair;\n  this.scrollableViewProperties = scrollableViewProperties;\n});\n/**\n * Validates whether a vertical position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\n\n\nfunction validateVerticalPosition(property, value) {\n  if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n    throw Error(\"ConnectedPosition: Invalid \".concat(property, \" \\\"\").concat(value, \"\\\". \") + \"Expected \\\"top\\\", \\\"bottom\\\" or \\\"center\\\".\");\n  }\n}\n/**\n * Validates whether a horizontal position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\n\n\nfunction validateHorizontalPosition(property, value) {\n  if (value !== 'start' && value !== 'end' && value !== 'center') {\n    throw Error(\"ConnectedPosition: Invalid \".concat(property, \" \\\"\").concat(value, \"\\\". \") + \"Expected \\\"start\\\", \\\"end\\\" or \\\"center\\\".\");\n  }\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\n\n\nvar OverlayRef = /*#__PURE__*/function () {\n  function OverlayRef(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document, _location, _outsideClickDispatcher) {\n    var _this5 = this;\n\n    var _animationsDisabled = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : false;\n\n    _classCallCheck(this, OverlayRef);\n\n    this._portalOutlet = _portalOutlet;\n    this._host = _host;\n    this._pane = _pane;\n    this._config = _config;\n    this._ngZone = _ngZone;\n    this._keyboardDispatcher = _keyboardDispatcher;\n    this._document = _document;\n    this._location = _location;\n    this._outsideClickDispatcher = _outsideClickDispatcher;\n    this._animationsDisabled = _animationsDisabled;\n    this._backdropElement = null;\n    this._backdropClick = new Subject();\n    this._attachments = new Subject();\n    this._detachments = new Subject();\n    this._locationChanges = Subscription.EMPTY;\n\n    this._backdropClickHandler = function (event) {\n      return _this5._backdropClick.next(event);\n    };\n\n    this._backdropTransitionendHandler = function (event) {\n      _this5._disposeBackdrop(event.target);\n    };\n    /** Stream of keydown events dispatched to this overlay. */\n\n\n    this._keydownEvents = new Subject();\n    /** Stream of mouse outside events dispatched to this overlay. */\n\n    this._outsidePointerEvents = new Subject();\n\n    if (_config.scrollStrategy) {\n      this._scrollStrategy = _config.scrollStrategy;\n\n      this._scrollStrategy.attach(this);\n    }\n\n    this._positionStrategy = _config.positionStrategy;\n  }\n  /** The overlay's HTML element */\n\n\n  _createClass(OverlayRef, [{\n    key: \"overlayElement\",\n    get: function get() {\n      return this._pane;\n    }\n    /** The overlay's backdrop HTML element. */\n\n  }, {\n    key: \"backdropElement\",\n    get: function get() {\n      return this._backdropElement;\n    }\n    /**\n     * Wrapper around the panel element. Can be used for advanced\n     * positioning where a wrapper with specific styling is\n     * required around the overlay pane.\n     */\n\n  }, {\n    key: \"hostElement\",\n    get: function get() {\n      return this._host;\n    }\n    /**\n     * Attaches content, given via a Portal, to the overlay.\n     * If the overlay is configured to have a backdrop, it will be created.\n     *\n     * @param portal Portal instance to which to attach the overlay.\n     * @returns The portal attachment result.\n     */\n\n  }, {\n    key: \"attach\",\n    value: function attach(portal) {\n      var _this6 = this;\n\n      // Insert the host into the DOM before attaching the portal, otherwise\n      // the animations module will skip animations on repeat attachments.\n      if (!this._host.parentElement && this._previousHostParent) {\n        this._previousHostParent.appendChild(this._host);\n      }\n\n      var attachResult = this._portalOutlet.attach(portal);\n\n      if (this._positionStrategy) {\n        this._positionStrategy.attach(this);\n      }\n\n      this._updateStackingOrder();\n\n      this._updateElementSize();\n\n      this._updateElementDirection();\n\n      if (this._scrollStrategy) {\n        this._scrollStrategy.enable();\n      } // Update the position once the zone is stable so that the overlay will be fully rendered\n      // before attempting to position it, as the position may depend on the size of the rendered\n      // content.\n\n\n      this._ngZone.onStable.pipe(take(1)).subscribe(function () {\n        // The overlay could've been detached before the zone has stabilized.\n        if (_this6.hasAttached()) {\n          _this6.updatePosition();\n        }\n      }); // Enable pointer events for the overlay pane element.\n\n\n      this._togglePointerEvents(true);\n\n      if (this._config.hasBackdrop) {\n        this._attachBackdrop();\n      }\n\n      if (this._config.panelClass) {\n        this._toggleClasses(this._pane, this._config.panelClass, true);\n      } // Only emit the `attachments` event once all other setup is done.\n\n\n      this._attachments.next(); // Track this overlay by the keyboard dispatcher\n\n\n      this._keyboardDispatcher.add(this);\n\n      if (this._config.disposeOnNavigation) {\n        this._locationChanges = this._location.subscribe(function () {\n          return _this6.dispose();\n        });\n      }\n\n      this._outsideClickDispatcher.add(this); // TODO(crisbeto): the null check is here, because the portal outlet returns `any`.\n      // We should be guaranteed for the result to be `ComponentRef | EmbeddedViewRef`, but\n      // `instanceof EmbeddedViewRef` doesn't appear to work at the moment.\n\n\n      if (typeof (attachResult === null || attachResult === void 0 ? void 0 : attachResult.onDestroy) === 'function') {\n        // In most cases we control the portal and we know when it is being detached so that\n        // we can finish the disposal process. The exception is if the user passes in a custom\n        // `ViewContainerRef` that isn't destroyed through the overlay API. Note that we use\n        // `detach` here instead of `dispose`, because we don't know if the user intends to\n        // reattach the overlay at a later point. It also has the advantage of waiting for animations.\n        attachResult.onDestroy(function () {\n          if (_this6.hasAttached()) {\n            // We have to delay the `detach` call, because detaching immediately prevents\n            // other destroy hooks from running. This is likely a framework bug similar to\n            // https://github.com/angular/angular/issues/46119\n            _this6._ngZone.runOutsideAngular(function () {\n              return Promise.resolve().then(function () {\n                return _this6.detach();\n              });\n            });\n          }\n        });\n      }\n\n      return attachResult;\n    }\n    /**\n     * Detaches an overlay from a portal.\n     * @returns The portal detachment result.\n     */\n\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      if (!this.hasAttached()) {\n        return;\n      }\n\n      this.detachBackdrop(); // When the overlay is detached, the pane element should disable pointer events.\n      // This is necessary because otherwise the pane element will cover the page and disable\n      // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n\n      this._togglePointerEvents(false);\n\n      if (this._positionStrategy && this._positionStrategy.detach) {\n        this._positionStrategy.detach();\n      }\n\n      if (this._scrollStrategy) {\n        this._scrollStrategy.disable();\n      }\n\n      var detachmentResult = this._portalOutlet.detach(); // Only emit after everything is detached.\n\n\n      this._detachments.next(); // Remove this overlay from keyboard dispatcher tracking.\n\n\n      this._keyboardDispatcher.remove(this); // Keeping the host element in the DOM can cause scroll jank, because it still gets\n      // rendered, even though it's transparent and unclickable which is why we remove it.\n\n\n      this._detachContentWhenStable();\n\n      this._locationChanges.unsubscribe();\n\n      this._outsideClickDispatcher.remove(this);\n\n      return detachmentResult;\n    }\n    /** Cleans up the overlay from the DOM. */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      var _a;\n\n      var isAttached = this.hasAttached();\n\n      if (this._positionStrategy) {\n        this._positionStrategy.dispose();\n      }\n\n      this._disposeScrollStrategy();\n\n      this._disposeBackdrop(this._backdropElement);\n\n      this._locationChanges.unsubscribe();\n\n      this._keyboardDispatcher.remove(this);\n\n      this._portalOutlet.dispose();\n\n      this._attachments.complete();\n\n      this._backdropClick.complete();\n\n      this._keydownEvents.complete();\n\n      this._outsidePointerEvents.complete();\n\n      this._outsideClickDispatcher.remove(this);\n\n      (_a = this._host) === null || _a === void 0 ? void 0 : _a.remove();\n      this._previousHostParent = this._pane = this._host = null;\n\n      if (isAttached) {\n        this._detachments.next();\n      }\n\n      this._detachments.complete();\n    }\n    /** Whether the overlay has attached content. */\n\n  }, {\n    key: \"hasAttached\",\n    value: function hasAttached() {\n      return this._portalOutlet.hasAttached();\n    }\n    /** Gets an observable that emits when the backdrop has been clicked. */\n\n  }, {\n    key: \"backdropClick\",\n    value: function backdropClick() {\n      return this._backdropClick;\n    }\n    /** Gets an observable that emits when the overlay has been attached. */\n\n  }, {\n    key: \"attachments\",\n    value: function attachments() {\n      return this._attachments;\n    }\n    /** Gets an observable that emits when the overlay has been detached. */\n\n  }, {\n    key: \"detachments\",\n    value: function detachments() {\n      return this._detachments;\n    }\n    /** Gets an observable of keydown events targeted to this overlay. */\n\n  }, {\n    key: \"keydownEvents\",\n    value: function keydownEvents() {\n      return this._keydownEvents;\n    }\n    /** Gets an observable of pointer events targeted outside this overlay. */\n\n  }, {\n    key: \"outsidePointerEvents\",\n    value: function outsidePointerEvents() {\n      return this._outsidePointerEvents;\n    }\n    /** Gets the current overlay configuration, which is immutable. */\n\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return this._config;\n    }\n    /** Updates the position of the overlay based on the position strategy. */\n\n  }, {\n    key: \"updatePosition\",\n    value: function updatePosition() {\n      if (this._positionStrategy) {\n        this._positionStrategy.apply();\n      }\n    }\n    /** Switches to a new position strategy and updates the overlay position. */\n\n  }, {\n    key: \"updatePositionStrategy\",\n    value: function updatePositionStrategy(strategy) {\n      if (strategy === this._positionStrategy) {\n        return;\n      }\n\n      if (this._positionStrategy) {\n        this._positionStrategy.dispose();\n      }\n\n      this._positionStrategy = strategy;\n\n      if (this.hasAttached()) {\n        strategy.attach(this);\n        this.updatePosition();\n      }\n    }\n    /** Update the size properties of the overlay. */\n\n  }, {\n    key: \"updateSize\",\n    value: function updateSize(sizeConfig) {\n      this._config = Object.assign(Object.assign({}, this._config), sizeConfig);\n\n      this._updateElementSize();\n    }\n    /** Sets the LTR/RTL direction for the overlay. */\n\n  }, {\n    key: \"setDirection\",\n    value: function setDirection(dir) {\n      this._config = Object.assign(Object.assign({}, this._config), {\n        direction: dir\n      });\n\n      this._updateElementDirection();\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n\n  }, {\n    key: \"addPanelClass\",\n    value: function addPanelClass(classes) {\n      if (this._pane) {\n        this._toggleClasses(this._pane, classes, true);\n      }\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n\n  }, {\n    key: \"removePanelClass\",\n    value: function removePanelClass(classes) {\n      if (this._pane) {\n        this._toggleClasses(this._pane, classes, false);\n      }\n    }\n    /**\n     * Returns the layout direction of the overlay panel.\n     */\n\n  }, {\n    key: \"getDirection\",\n    value: function getDirection() {\n      var direction = this._config.direction;\n\n      if (!direction) {\n        return 'ltr';\n      }\n\n      return typeof direction === 'string' ? direction : direction.value;\n    }\n    /** Switches to a new scroll strategy. */\n\n  }, {\n    key: \"updateScrollStrategy\",\n    value: function updateScrollStrategy(strategy) {\n      if (strategy === this._scrollStrategy) {\n        return;\n      }\n\n      this._disposeScrollStrategy();\n\n      this._scrollStrategy = strategy;\n\n      if (this.hasAttached()) {\n        strategy.attach(this);\n        strategy.enable();\n      }\n    }\n    /** Updates the text direction of the overlay panel. */\n\n  }, {\n    key: \"_updateElementDirection\",\n    value: function _updateElementDirection() {\n      this._host.setAttribute('dir', this.getDirection());\n    }\n    /** Updates the size of the overlay element based on the overlay config. */\n\n  }, {\n    key: \"_updateElementSize\",\n    value: function _updateElementSize() {\n      if (!this._pane) {\n        return;\n      }\n\n      var style = this._pane.style;\n      style.width = coerceCssPixelValue(this._config.width);\n      style.height = coerceCssPixelValue(this._config.height);\n      style.minWidth = coerceCssPixelValue(this._config.minWidth);\n      style.minHeight = coerceCssPixelValue(this._config.minHeight);\n      style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n      style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n    }\n    /** Toggles the pointer events for the overlay pane element. */\n\n  }, {\n    key: \"_togglePointerEvents\",\n    value: function _togglePointerEvents(enablePointer) {\n      this._pane.style.pointerEvents = enablePointer ? '' : 'none';\n    }\n    /** Attaches a backdrop for this overlay. */\n\n  }, {\n    key: \"_attachBackdrop\",\n    value: function _attachBackdrop() {\n      var _this7 = this;\n\n      var showingClass = 'cdk-overlay-backdrop-showing';\n      this._backdropElement = this._document.createElement('div');\n\n      this._backdropElement.classList.add('cdk-overlay-backdrop');\n\n      if (this._animationsDisabled) {\n        this._backdropElement.classList.add('cdk-overlay-backdrop-noop-animation');\n      }\n\n      if (this._config.backdropClass) {\n        this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n      } // Insert the backdrop before the pane in the DOM order,\n      // in order to handle stacked overlays properly.\n\n\n      this._host.parentElement.insertBefore(this._backdropElement, this._host); // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n      // action desired when such a click occurs (usually closing the overlay).\n\n\n      this._backdropElement.addEventListener('click', this._backdropClickHandler); // Add class to fade-in the backdrop after one frame.\n\n\n      if (!this._animationsDisabled && typeof requestAnimationFrame !== 'undefined') {\n        this._ngZone.runOutsideAngular(function () {\n          requestAnimationFrame(function () {\n            if (_this7._backdropElement) {\n              _this7._backdropElement.classList.add(showingClass);\n            }\n          });\n        });\n      } else {\n        this._backdropElement.classList.add(showingClass);\n      }\n    }\n    /**\n     * Updates the stacking order of the element, moving it to the top if necessary.\n     * This is required in cases where one overlay was detached, while another one,\n     * that should be behind it, was destroyed. The next time both of them are opened,\n     * the stacking will be wrong, because the detached element's pane will still be\n     * in its original DOM position.\n     */\n\n  }, {\n    key: \"_updateStackingOrder\",\n    value: function _updateStackingOrder() {\n      if (this._host.nextSibling) {\n        this._host.parentNode.appendChild(this._host);\n      }\n    }\n    /** Detaches the backdrop (if any) associated with the overlay. */\n\n  }, {\n    key: \"detachBackdrop\",\n    value: function detachBackdrop() {\n      var _this8 = this;\n\n      var backdropToDetach = this._backdropElement;\n\n      if (!backdropToDetach) {\n        return;\n      }\n\n      if (this._animationsDisabled) {\n        this._disposeBackdrop(backdropToDetach);\n\n        return;\n      }\n\n      backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n\n      this._ngZone.runOutsideAngular(function () {\n        backdropToDetach.addEventListener('transitionend', _this8._backdropTransitionendHandler);\n      }); // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n      // In this case we make it unclickable and we try to remove it after a delay.\n\n\n      backdropToDetach.style.pointerEvents = 'none'; // Run this outside the Angular zone because there's nothing that Angular cares about.\n      // If it were to run inside the Angular zone, every test that used Overlay would have to be\n      // either async or fakeAsync.\n\n      this._backdropTimeout = this._ngZone.runOutsideAngular(function () {\n        return setTimeout(function () {\n          _this8._disposeBackdrop(backdropToDetach);\n        }, 500);\n      });\n    }\n    /** Toggles a single CSS class or an array of classes on an element. */\n\n  }, {\n    key: \"_toggleClasses\",\n    value: function _toggleClasses(element, cssClasses, isAdd) {\n      var classes = coerceArray(cssClasses || []).filter(function (c) {\n        return !!c;\n      });\n\n      if (classes.length) {\n        var _element$classList, _element$classList2;\n\n        isAdd ? (_element$classList = element.classList).add.apply(_element$classList, _toConsumableArray(classes)) : (_element$classList2 = element.classList).remove.apply(_element$classList2, _toConsumableArray(classes));\n      }\n    }\n    /** Detaches the overlay content next time the zone stabilizes. */\n\n  }, {\n    key: \"_detachContentWhenStable\",\n    value: function _detachContentWhenStable() {\n      var _this9 = this;\n\n      // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n      // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n      // be patched to run inside the zone, which will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(function () {\n        // We can't remove the host here immediately, because the overlay pane's content\n        // might still be animating. This stream helps us avoid interrupting the animation\n        // by waiting for the pane to become empty.\n        var subscription = _this9._ngZone.onStable.pipe(takeUntil(merge(_this9._attachments, _this9._detachments))).subscribe(function () {\n          // Needs a couple of checks for the pane and host, because\n          // they may have been removed by the time the zone stabilizes.\n          if (!_this9._pane || !_this9._host || _this9._pane.children.length === 0) {\n            if (_this9._pane && _this9._config.panelClass) {\n              _this9._toggleClasses(_this9._pane, _this9._config.panelClass, false);\n            }\n\n            if (_this9._host && _this9._host.parentElement) {\n              _this9._previousHostParent = _this9._host.parentElement;\n\n              _this9._host.remove();\n            }\n\n            subscription.unsubscribe();\n          }\n        });\n      });\n    }\n    /** Disposes of a scroll strategy. */\n\n  }, {\n    key: \"_disposeScrollStrategy\",\n    value: function _disposeScrollStrategy() {\n      var scrollStrategy = this._scrollStrategy;\n\n      if (scrollStrategy) {\n        scrollStrategy.disable();\n\n        if (scrollStrategy.detach) {\n          scrollStrategy.detach();\n        }\n      }\n    }\n    /** Removes a backdrop element from the DOM. */\n\n  }, {\n    key: \"_disposeBackdrop\",\n    value: function _disposeBackdrop(backdrop) {\n      if (backdrop) {\n        backdrop.removeEventListener('click', this._backdropClickHandler);\n        backdrop.removeEventListener('transitionend', this._backdropTransitionendHandler);\n        backdrop.remove(); // It is possible that a new portal has been attached to this overlay since we started\n        // removing the backdrop. If that is the case, only clear the backdrop reference if it\n        // is still the same instance that we started to remove.\n\n        if (this._backdropElement === backdrop) {\n          this._backdropElement = null;\n        }\n      }\n\n      if (this._backdropTimeout) {\n        clearTimeout(this._backdropTimeout);\n        this._backdropTimeout = undefined;\n      }\n    }\n  }]);\n\n  return OverlayRef;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Container inside which all overlays will render. */\n\n\nvar OverlayContainer = /*#__PURE__*/function () {\n  function OverlayContainer(document, _platform) {\n    _classCallCheck(this, OverlayContainer);\n\n    this._platform = _platform;\n    this._document = document;\n  }\n\n  _createClass(OverlayContainer, [{\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      var _a;\n\n      (_a = this._containerElement) === null || _a === void 0 ? void 0 : _a.remove();\n    }\n    /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time it is called to facilitate using\n     * the container in non-browser environments.\n     * @returns the container element\n     */\n\n  }, {\n    key: \"getContainerElement\",\n    value: function getContainerElement() {\n      if (!this._containerElement) {\n        this._createContainer();\n      }\n\n      return this._containerElement;\n    }\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body.\n     */\n\n  }, {\n    key: \"_createContainer\",\n    value: function _createContainer() {\n      var containerClass = 'cdk-overlay-container'; // TODO(crisbeto): remove the testing check once we have an overlay testing\n      // module or Angular starts tearing down the testing `NgModule`. See:\n      // https://github.com/angular/angular/issues/18831\n\n      if (this._platform.isBrowser || _isTestEnvironment()) {\n        var oppositePlatformContainers = this._document.querySelectorAll(\".\".concat(containerClass, \"[platform=\\\"server\\\"], \") + \".\".concat(containerClass, \"[platform=\\\"test\\\"]\")); // Remove any old containers from the opposite platform.\n        // This can happen when transitioning from the server to the client.\n\n\n        for (var i = 0; i < oppositePlatformContainers.length; i++) {\n          oppositePlatformContainers[i].remove();\n        }\n      }\n\n      var container = this._document.createElement('div');\n\n      container.classList.add(containerClass); // A long time ago we kept adding new overlay containers whenever a new app was instantiated,\n      // but at some point we added logic which clears the duplicate ones in order to avoid leaks.\n      // The new logic was a little too aggressive since it was breaking some legitimate use cases.\n      // To mitigate the problem we made it so that only containers from a different platform are\n      // cleared, but the side-effect was that people started depending on the overly-aggressive\n      // logic to clean up their tests for them. Until we can introduce an overlay-specific testing\n      // module which does the cleanup, we try to detect that we're in a test environment and we\n      // always clear the container. See #17006.\n      // TODO(crisbeto): remove the test environment check once we have an overlay testing module.\n\n      if (_isTestEnvironment()) {\n        container.setAttribute('platform', 'test');\n      } else if (!this._platform.isBrowser) {\n        container.setAttribute('platform', 'server');\n      }\n\n      this._document.body.appendChild(container);\n\n      this._containerElement = container;\n    }\n  }]);\n\n  return OverlayContainer;\n}();\n\nOverlayContainer.ɵfac = function OverlayContainer_Factory(t) {\n  return new (t || OverlayContainer)(i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(i1$1.Platform));\n};\n\nOverlayContainer.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: OverlayContainer,\n  factory: OverlayContainer.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(OverlayContainer, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: i1$1.Platform\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n\n/** Class to be added to the overlay bounding box. */\n\n\nvar boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n/** Regex used to split a string on its CSS units. */\n\nvar cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\n\nvar FlexibleConnectedPositionStrategy = /*#__PURE__*/function () {\n  function FlexibleConnectedPositionStrategy(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {\n    _classCallCheck(this, FlexibleConnectedPositionStrategy);\n\n    this._viewportRuler = _viewportRuler;\n    this._document = _document;\n    this._platform = _platform;\n    this._overlayContainer = _overlayContainer;\n    /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\n\n    this._lastBoundingBoxSize = {\n      width: 0,\n      height: 0\n    };\n    /** Whether the overlay was pushed in a previous positioning. */\n\n    this._isPushed = false;\n    /** Whether the overlay can be pushed on-screen on the initial open. */\n\n    this._canPush = true;\n    /** Whether the overlay can grow via flexible width/height after the initial open. */\n\n    this._growAfterOpen = false;\n    /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n\n    this._hasFlexibleDimensions = true;\n    /** Whether the overlay position is locked. */\n\n    this._positionLocked = false;\n    /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\n\n    this._viewportMargin = 0;\n    /** The Scrollable containers used to check scrollable view properties on position change. */\n\n    this._scrollables = [];\n    /** Ordered list of preferred positions, from most to least desirable. */\n\n    this._preferredPositions = [];\n    /** Subject that emits whenever the position changes. */\n\n    this._positionChanges = new Subject();\n    /** Subscription to viewport size changes. */\n\n    this._resizeSubscription = Subscription.EMPTY;\n    /** Default offset for the overlay along the x axis. */\n\n    this._offsetX = 0;\n    /** Default offset for the overlay along the y axis. */\n\n    this._offsetY = 0;\n    /** Keeps track of the CSS classes that the position strategy has applied on the overlay panel. */\n\n    this._appliedPanelClasses = [];\n    /** Observable sequence of position changes. */\n\n    this.positionChanges = this._positionChanges;\n    this.setOrigin(connectedTo);\n  }\n  /** Ordered list of preferred positions, from most to least desirable. */\n\n\n  _createClass(FlexibleConnectedPositionStrategy, [{\n    key: \"positions\",\n    get: function get() {\n      return this._preferredPositions;\n    }\n    /** Attaches this position strategy to an overlay. */\n\n  }, {\n    key: \"attach\",\n    value: function attach(overlayRef) {\n      var _this10 = this;\n\n      if (this._overlayRef && overlayRef !== this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error('This position strategy is already attached to an overlay');\n      }\n\n      this._validatePositions();\n\n      overlayRef.hostElement.classList.add(boundingBoxClass);\n      this._overlayRef = overlayRef;\n      this._boundingBox = overlayRef.hostElement;\n      this._pane = overlayRef.overlayElement;\n      this._isDisposed = false;\n      this._isInitialRender = true;\n      this._lastPosition = null;\n\n      this._resizeSubscription.unsubscribe();\n\n      this._resizeSubscription = this._viewportRuler.change().subscribe(function () {\n        // When the window is resized, we want to trigger the next reposition as if it\n        // was an initial render, in order for the strategy to pick a new optimal position,\n        // otherwise position locking will cause it to stay at the old one.\n        _this10._isInitialRender = true;\n\n        _this10.apply();\n      });\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin best fits on-screen.\n     *\n     * The selection of a position goes as follows:\n     *  - If any positions fit completely within the viewport as-is,\n     *      choose the first position that does so.\n     *  - If flexible dimensions are enabled and at least one satisfies the given minimum width/height,\n     *      choose the position with the greatest available size modified by the positions' weight.\n     *  - If pushing is enabled, take the position that went off-screen the least and push it\n     *      on-screen.\n     *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n     * @docs-private\n     */\n\n  }, {\n    key: \"apply\",\n    value: function apply() {\n      // We shouldn't do anything if the strategy was disposed or we're on the server.\n      if (this._isDisposed || !this._platform.isBrowser) {\n        return;\n      } // If the position has been applied already (e.g. when the overlay was opened) and the\n      // consumer opted into locking in the position, re-use the old position, in order to\n      // prevent the overlay from jumping around.\n\n\n      if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n        this.reapplyLastPosition();\n        return;\n      }\n\n      this._clearPanelClasses();\n\n      this._resetOverlayElementStyles();\n\n      this._resetBoundingBoxStyles(); // We need the bounding rects for the origin, the overlay and the container to determine how to position\n      // the overlay relative to the origin.\n      // We use the viewport rect to determine whether a position would go off-screen.\n\n\n      this._viewportRect = this._getNarrowedViewportRect();\n      this._originRect = this._getOriginRect();\n      this._overlayRect = this._pane.getBoundingClientRect();\n      this._containerRect = this._overlayContainer.getContainerElement().getBoundingClientRect();\n      var originRect = this._originRect;\n      var overlayRect = this._overlayRect;\n      var viewportRect = this._viewportRect;\n      var containerRect = this._containerRect; // Positions where the overlay will fit with flexible dimensions.\n\n      var flexibleFits = []; // Fallback if none of the preferred positions fit within the viewport.\n\n      var fallback; // Go through each of the preferred positions looking for a good fit.\n      // If a good fit is found, it will be applied immediately.\n\n      var _iterator = _createForOfIteratorHelper(this._preferredPositions),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var pos = _step.value;\n\n          // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n          var originPoint = this._getOriginPoint(originRect, containerRect, pos); // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n          // overlay in this position. We use the top-left corner for calculations and later translate\n          // this into an appropriate (top, left, bottom, right) style.\n\n\n          var overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos); // Calculate how well the overlay would fit into the viewport with this point.\n\n\n          var overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos); // If the overlay, without any further work, fits into the viewport, use this position.\n\n\n          if (overlayFit.isCompletelyWithinViewport) {\n            this._isPushed = false;\n\n            this._applyPosition(pos, originPoint);\n\n            return;\n          } // If the overlay has flexible dimensions, we can use this position\n          // so long as there's enough space for the minimum dimensions.\n\n\n          if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n            // Save positions where the overlay will fit with flexible dimensions. We will use these\n            // if none of the positions fit *without* flexible dimensions.\n            flexibleFits.push({\n              position: pos,\n              origin: originPoint,\n              overlayRect: overlayRect,\n              boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos)\n            });\n            continue;\n          } // If the current preferred position does not fit on the screen, remember the position\n          // if it has more visible area on-screen than we've seen and move onto the next preferred\n          // position.\n\n\n          if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n            fallback = {\n              overlayFit: overlayFit,\n              overlayPoint: overlayPoint,\n              originPoint: originPoint,\n              position: pos,\n              overlayRect: overlayRect\n            };\n          }\n        } // If there are any positions where the overlay would fit with flexible dimensions, choose the\n        // one that has the greatest area available modified by the position's weight\n\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      if (flexibleFits.length) {\n        var bestFit = null;\n        var bestScore = -1;\n\n        var _iterator2 = _createForOfIteratorHelper(flexibleFits),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var fit = _step2.value;\n            var score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n\n            if (score > bestScore) {\n              bestScore = score;\n              bestFit = fit;\n            }\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n\n        this._isPushed = false;\n\n        this._applyPosition(bestFit.position, bestFit.origin);\n\n        return;\n      } // When none of the preferred positions fit within the viewport, take the position\n      // that went off-screen the least and attempt to push it on-screen.\n\n\n      if (this._canPush) {\n        // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n        this._isPushed = true;\n\n        this._applyPosition(fallback.position, fallback.originPoint);\n\n        return;\n      } // All options for getting the overlay within the viewport have been exhausted, so go with the\n      // position that went off-screen the least.\n\n\n      this._applyPosition(fallback.position, fallback.originPoint);\n    }\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      this._clearPanelClasses();\n\n      this._lastPosition = null;\n      this._previousPushAmount = null;\n\n      this._resizeSubscription.unsubscribe();\n    }\n    /** Cleanup after the element gets destroyed. */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      if (this._isDisposed) {\n        return;\n      } // We can't use `_resetBoundingBoxStyles` here, because it resets\n      // some properties to zero, rather than removing them.\n\n\n      if (this._boundingBox) {\n        extendStyles(this._boundingBox.style, {\n          top: '',\n          left: '',\n          right: '',\n          bottom: '',\n          height: '',\n          width: '',\n          alignItems: '',\n          justifyContent: ''\n        });\n      }\n\n      if (this._pane) {\n        this._resetOverlayElementStyles();\n      }\n\n      if (this._overlayRef) {\n        this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n      }\n\n      this.detach();\n\n      this._positionChanges.complete();\n\n      this._overlayRef = this._boundingBox = null;\n      this._isDisposed = true;\n    }\n    /**\n     * This re-aligns the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     */\n\n  }, {\n    key: \"reapplyLastPosition\",\n    value: function reapplyLastPosition() {\n      if (this._isDisposed || !this._platform.isBrowser) {\n        return;\n      }\n\n      var lastPosition = this._lastPosition;\n\n      if (lastPosition) {\n        this._originRect = this._getOriginRect();\n        this._overlayRect = this._pane.getBoundingClientRect();\n        this._viewportRect = this._getNarrowedViewportRect();\n        this._containerRect = this._overlayContainer.getContainerElement().getBoundingClientRect();\n\n        var originPoint = this._getOriginPoint(this._originRect, this._containerRect, lastPosition);\n\n        this._applyPosition(lastPosition, originPoint);\n      } else {\n        this.apply();\n      }\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     */\n\n  }, {\n    key: \"withScrollableContainers\",\n    value: function withScrollableContainers(scrollables) {\n      this._scrollables = scrollables;\n      return this;\n    }\n    /**\n     * Adds new preferred positions.\n     * @param positions List of positions options for this overlay.\n     */\n\n  }, {\n    key: \"withPositions\",\n    value: function withPositions(positions) {\n      this._preferredPositions = positions; // If the last calculated position object isn't part of the positions anymore, clear\n      // it in order to avoid it being picked up if the consumer tries to re-apply.\n\n      if (positions.indexOf(this._lastPosition) === -1) {\n        this._lastPosition = null;\n      }\n\n      this._validatePositions();\n\n      return this;\n    }\n    /**\n     * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n     * @param margin Required margin between the overlay and the viewport edge in pixels.\n     */\n\n  }, {\n    key: \"withViewportMargin\",\n    value: function withViewportMargin(margin) {\n      this._viewportMargin = margin;\n      return this;\n    }\n    /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n\n  }, {\n    key: \"withFlexibleDimensions\",\n    value: function withFlexibleDimensions() {\n      var flexibleDimensions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this._hasFlexibleDimensions = flexibleDimensions;\n      return this;\n    }\n    /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n\n  }, {\n    key: \"withGrowAfterOpen\",\n    value: function withGrowAfterOpen() {\n      var growAfterOpen = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this._growAfterOpen = growAfterOpen;\n      return this;\n    }\n    /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n\n  }, {\n    key: \"withPush\",\n    value: function withPush() {\n      var canPush = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this._canPush = canPush;\n      return this;\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param isLocked Whether the overlay should locked in.\n     */\n\n  }, {\n    key: \"withLockedPosition\",\n    value: function withLockedPosition() {\n      var isLocked = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this._positionLocked = isLocked;\n      return this;\n    }\n    /**\n     * Sets the origin, relative to which to position the overlay.\n     * Using an element origin is useful for building components that need to be positioned\n     * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be\n     * used for cases like contextual menus which open relative to the user's pointer.\n     * @param origin Reference to the new origin.\n     */\n\n  }, {\n    key: \"setOrigin\",\n    value: function setOrigin(origin) {\n      this._origin = origin;\n      return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the x-axis.\n     * @param offset New offset in the X axis.\n     */\n\n  }, {\n    key: \"withDefaultOffsetX\",\n    value: function withDefaultOffsetX(offset) {\n      this._offsetX = offset;\n      return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the y-axis.\n     * @param offset New offset in the Y axis.\n     */\n\n  }, {\n    key: \"withDefaultOffsetY\",\n    value: function withDefaultOffsetY(offset) {\n      this._offsetY = offset;\n      return this;\n    }\n    /**\n     * Configures that the position strategy should set a `transform-origin` on some elements\n     * inside the overlay, depending on the current position that is being applied. This is\n     * useful for the cases where the origin of an animation can change depending on the\n     * alignment of the overlay.\n     * @param selector CSS selector that will be used to find the target\n     *    elements onto which to set the transform origin.\n     */\n\n  }, {\n    key: \"withTransformOriginOn\",\n    value: function withTransformOriginOn(selector) {\n      this._transformOriginSelector = selector;\n      return this;\n    }\n    /**\n     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n     */\n\n  }, {\n    key: \"_getOriginPoint\",\n    value: function _getOriginPoint(originRect, containerRect, pos) {\n      var x;\n\n      if (pos.originX == 'center') {\n        // Note: when centering we should always use the `left`\n        // offset, otherwise the position will be wrong in RTL.\n        x = originRect.left + originRect.width / 2;\n      } else {\n        var startX = this._isRtl() ? originRect.right : originRect.left;\n        var endX = this._isRtl() ? originRect.left : originRect.right;\n        x = pos.originX == 'start' ? startX : endX;\n      } // When zooming in Safari the container rectangle contains negative values for the position\n      // and we need to re-add them to the calculated coordinates.\n\n\n      if (containerRect.left < 0) {\n        x -= containerRect.left;\n      }\n\n      var y;\n\n      if (pos.originY == 'center') {\n        y = originRect.top + originRect.height / 2;\n      } else {\n        y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n      } // Normally the containerRect's top value would be zero, however when the overlay is attached to an input\n      // (e.g. in an autocomplete), mobile browsers will shift everything in order to put the input in the middle\n      // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n      // otherwise our positioning will be thrown off.\n      // Additionally, when zooming in Safari this fixes the vertical position.\n\n\n      if (containerRect.top < 0) {\n        y -= containerRect.top;\n      }\n\n      return {\n        x: x,\n        y: y\n      };\n    }\n    /**\n     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n     * origin point to which the overlay should be connected.\n     */\n\n  }, {\n    key: \"_getOverlayPoint\",\n    value: function _getOverlayPoint(originPoint, overlayRect, pos) {\n      // Calculate the (overlayStartX, overlayStartY), the start of the\n      // potential overlay position relative to the origin point.\n      var overlayStartX;\n\n      if (pos.overlayX == 'center') {\n        overlayStartX = -overlayRect.width / 2;\n      } else if (pos.overlayX === 'start') {\n        overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n      } else {\n        overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n      }\n\n      var overlayStartY;\n\n      if (pos.overlayY == 'center') {\n        overlayStartY = -overlayRect.height / 2;\n      } else {\n        overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n      } // The (x, y) coordinates of the overlay.\n\n\n      return {\n        x: originPoint.x + overlayStartX,\n        y: originPoint.y + overlayStartY\n      };\n    }\n    /** Gets how well an overlay at the given point will fit within the viewport. */\n\n  }, {\n    key: \"_getOverlayFit\",\n    value: function _getOverlayFit(point, rawOverlayRect, viewport, position) {\n      // Round the overlay rect when comparing against the\n      // viewport, because the viewport is always rounded.\n      var overlay = getRoundedBoundingClientRect(rawOverlayRect);\n      var x = point.x,\n          y = point.y;\n\n      var offsetX = this._getOffset(position, 'x');\n\n      var offsetY = this._getOffset(position, 'y'); // Account for the offsets since they could push the overlay out of the viewport.\n\n\n      if (offsetX) {\n        x += offsetX;\n      }\n\n      if (offsetY) {\n        y += offsetY;\n      } // How much the overlay would overflow at this position, on each side.\n\n\n      var leftOverflow = 0 - x;\n      var rightOverflow = x + overlay.width - viewport.width;\n      var topOverflow = 0 - y;\n      var bottomOverflow = y + overlay.height - viewport.height; // Visible parts of the element on each axis.\n\n      var visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n\n      var visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n\n      var visibleArea = visibleWidth * visibleHeight;\n      return {\n        visibleArea: visibleArea,\n        isCompletelyWithinViewport: overlay.width * overlay.height === visibleArea,\n        fitsInViewportVertically: visibleHeight === overlay.height,\n        fitsInViewportHorizontally: visibleWidth == overlay.width\n      };\n    }\n    /**\n     * Whether the overlay can fit within the viewport when it may resize either its width or height.\n     * @param fit How well the overlay fits in the viewport at some position.\n     * @param point The (x, y) coordinates of the overlay at some position.\n     * @param viewport The geometry of the viewport.\n     */\n\n  }, {\n    key: \"_canFitWithFlexibleDimensions\",\n    value: function _canFitWithFlexibleDimensions(fit, point, viewport) {\n      if (this._hasFlexibleDimensions) {\n        var availableHeight = viewport.bottom - point.y;\n        var availableWidth = viewport.right - point.x;\n        var minHeight = getPixelValue(this._overlayRef.getConfig().minHeight);\n        var minWidth = getPixelValue(this._overlayRef.getConfig().minWidth);\n        var verticalFit = fit.fitsInViewportVertically || minHeight != null && minHeight <= availableHeight;\n        var horizontalFit = fit.fitsInViewportHorizontally || minWidth != null && minWidth <= availableWidth;\n        return verticalFit && horizontalFit;\n      }\n\n      return false;\n    }\n    /**\n     * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n     * the viewport, the top-left corner will be pushed on-screen (with overflow occurring on the\n     * right and bottom).\n     *\n     * @param start Starting point from which the overlay is pushed.\n     * @param rawOverlayRect Dimensions of the overlay.\n     * @param scrollPosition Current viewport scroll position.\n     * @returns The point at which to position the overlay after pushing. This is effectively a new\n     *     originPoint.\n     */\n\n  }, {\n    key: \"_pushOverlayOnScreen\",\n    value: function _pushOverlayOnScreen(start, rawOverlayRect, scrollPosition) {\n      // If the position is locked and we've pushed the overlay already, reuse the previous push\n      // amount, rather than pushing it again. If we were to continue pushing, the element would\n      // remain in the viewport, which goes against the expectations when position locking is enabled.\n      if (this._previousPushAmount && this._positionLocked) {\n        return {\n          x: start.x + this._previousPushAmount.x,\n          y: start.y + this._previousPushAmount.y\n        };\n      } // Round the overlay rect when comparing against the\n      // viewport, because the viewport is always rounded.\n\n\n      var overlay = getRoundedBoundingClientRect(rawOverlayRect);\n      var viewport = this._viewportRect; // Determine how much the overlay goes outside the viewport on each\n      // side, which we'll use to decide which direction to push it.\n\n      var overflowRight = Math.max(start.x + overlay.width - viewport.width, 0);\n      var overflowBottom = Math.max(start.y + overlay.height - viewport.height, 0);\n      var overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n      var overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0); // Amount by which to push the overlay in each axis such that it remains on-screen.\n\n      var pushX = 0;\n      var pushY = 0; // If the overlay fits completely within the bounds of the viewport, push it from whichever\n      // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n      // viewport and allow for the trailing end of the overlay to go out of bounds.\n\n      if (overlay.width <= viewport.width) {\n        pushX = overflowLeft || -overflowRight;\n      } else {\n        pushX = start.x < this._viewportMargin ? viewport.left - scrollPosition.left - start.x : 0;\n      }\n\n      if (overlay.height <= viewport.height) {\n        pushY = overflowTop || -overflowBottom;\n      } else {\n        pushY = start.y < this._viewportMargin ? viewport.top - scrollPosition.top - start.y : 0;\n      }\n\n      this._previousPushAmount = {\n        x: pushX,\n        y: pushY\n      };\n      return {\n        x: start.x + pushX,\n        y: start.y + pushY\n      };\n    }\n    /**\n     * Applies a computed position to the overlay and emits a position change.\n     * @param position The position preference\n     * @param originPoint The point on the origin element where the overlay is connected.\n     */\n\n  }, {\n    key: \"_applyPosition\",\n    value: function _applyPosition(position, originPoint) {\n      this._setTransformOrigin(position);\n\n      this._setOverlayElementStyles(originPoint, position);\n\n      this._setBoundingBoxStyles(originPoint, position);\n\n      if (position.panelClass) {\n        this._addPanelClasses(position.panelClass);\n      } // Save the last connected position in case the position needs to be re-calculated.\n\n\n      this._lastPosition = position; // Notify that the position has been changed along with its change properties.\n      // We only emit if we've got any subscriptions, because the scroll visibility\n      // calculations can be somewhat expensive.\n\n      if (this._positionChanges.observers.length) {\n        var scrollableViewProperties = this._getScrollVisibility();\n\n        var changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n\n        this._positionChanges.next(changeEvent);\n      }\n\n      this._isInitialRender = false;\n    }\n    /** Sets the transform origin based on the configured selector and the passed-in position.  */\n\n  }, {\n    key: \"_setTransformOrigin\",\n    value: function _setTransformOrigin(position) {\n      if (!this._transformOriginSelector) {\n        return;\n      }\n\n      var elements = this._boundingBox.querySelectorAll(this._transformOriginSelector);\n\n      var xOrigin;\n      var yOrigin = position.overlayY;\n\n      if (position.overlayX === 'center') {\n        xOrigin = 'center';\n      } else if (this._isRtl()) {\n        xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n      } else {\n        xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n      }\n\n      for (var i = 0; i < elements.length; i++) {\n        elements[i].style.transformOrigin = \"\".concat(xOrigin, \" \").concat(yOrigin);\n      }\n    }\n    /**\n     * Gets the position and size of the overlay's sizing container.\n     *\n     * This method does no measuring and applies no styles so that we can cheaply compute the\n     * bounds for all positions and choose the best fit based on these results.\n     */\n\n  }, {\n    key: \"_calculateBoundingBoxRect\",\n    value: function _calculateBoundingBoxRect(origin, position) {\n      var viewport = this._viewportRect;\n\n      var isRtl = this._isRtl();\n\n      var height, top, bottom;\n\n      if (position.overlayY === 'top') {\n        // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n        top = origin.y;\n        height = viewport.height - top + this._viewportMargin;\n      } else if (position.overlayY === 'bottom') {\n        // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n        // the viewport margin back in, because the viewport rect is narrowed down to remove the\n        // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n        bottom = viewport.height - origin.y + this._viewportMargin * 2;\n        height = viewport.height - bottom + this._viewportMargin;\n      } else {\n        // If neither top nor bottom, it means that the overlay is vertically centered on the\n        // origin point. Note that we want the position relative to the viewport, rather than\n        // the page, which is why we don't use something like `viewport.bottom - origin.y` and\n        // `origin.y - viewport.top`.\n        var smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\n        var previousHeight = this._lastBoundingBoxSize.height;\n        height = smallestDistanceToViewportEdge * 2;\n        top = origin.y - smallestDistanceToViewportEdge;\n\n        if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n          top = origin.y - previousHeight / 2;\n        }\n      } // The overlay is opening 'right-ward' (the content flows to the right).\n\n\n      var isBoundedByRightViewportEdge = position.overlayX === 'start' && !isRtl || position.overlayX === 'end' && isRtl; // The overlay is opening 'left-ward' (the content flows to the left).\n\n      var isBoundedByLeftViewportEdge = position.overlayX === 'end' && !isRtl || position.overlayX === 'start' && isRtl;\n      var width, left, right;\n\n      if (isBoundedByLeftViewportEdge) {\n        right = viewport.width - origin.x + this._viewportMargin;\n        width = origin.x - this._viewportMargin;\n      } else if (isBoundedByRightViewportEdge) {\n        left = origin.x;\n        width = viewport.right - origin.x;\n      } else {\n        // If neither start nor end, it means that the overlay is horizontally centered on the\n        // origin point. Note that we want the position relative to the viewport, rather than\n        // the page, which is why we don't use something like `viewport.right - origin.x` and\n        // `origin.x - viewport.left`.\n        var _smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x + viewport.left, origin.x);\n\n        var previousWidth = this._lastBoundingBoxSize.width;\n        width = _smallestDistanceToViewportEdge * 2;\n        left = origin.x - _smallestDistanceToViewportEdge;\n\n        if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n          left = origin.x - previousWidth / 2;\n        }\n      }\n\n      return {\n        top: top,\n        left: left,\n        bottom: bottom,\n        right: right,\n        width: width,\n        height: height\n      };\n    }\n    /**\n     * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n     * origin's connection point and stretches to the bounds of the viewport.\n     *\n     * @param origin The point on the origin element where the overlay is connected.\n     * @param position The position preference\n     */\n\n  }, {\n    key: \"_setBoundingBoxStyles\",\n    value: function _setBoundingBoxStyles(origin, position) {\n      var boundingBoxRect = this._calculateBoundingBoxRect(origin, position); // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n      // when applying a new size.\n\n\n      if (!this._isInitialRender && !this._growAfterOpen) {\n        boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n        boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n      }\n\n      var styles = {};\n\n      if (this._hasExactPosition()) {\n        styles.top = styles.left = '0';\n        styles.bottom = styles.right = styles.maxHeight = styles.maxWidth = '';\n        styles.width = styles.height = '100%';\n      } else {\n        var maxHeight = this._overlayRef.getConfig().maxHeight;\n\n        var maxWidth = this._overlayRef.getConfig().maxWidth;\n\n        styles.height = coerceCssPixelValue(boundingBoxRect.height);\n        styles.top = coerceCssPixelValue(boundingBoxRect.top);\n        styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n        styles.width = coerceCssPixelValue(boundingBoxRect.width);\n        styles.left = coerceCssPixelValue(boundingBoxRect.left);\n        styles.right = coerceCssPixelValue(boundingBoxRect.right); // Push the pane content towards the proper direction.\n\n        if (position.overlayX === 'center') {\n          styles.alignItems = 'center';\n        } else {\n          styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n        }\n\n        if (position.overlayY === 'center') {\n          styles.justifyContent = 'center';\n        } else {\n          styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n        }\n\n        if (maxHeight) {\n          styles.maxHeight = coerceCssPixelValue(maxHeight);\n        }\n\n        if (maxWidth) {\n          styles.maxWidth = coerceCssPixelValue(maxWidth);\n        }\n      }\n\n      this._lastBoundingBoxSize = boundingBoxRect;\n      extendStyles(this._boundingBox.style, styles);\n    }\n    /** Resets the styles for the bounding box so that a new positioning can be computed. */\n\n  }, {\n    key: \"_resetBoundingBoxStyles\",\n    value: function _resetBoundingBoxStyles() {\n      extendStyles(this._boundingBox.style, {\n        top: '0',\n        left: '0',\n        right: '0',\n        bottom: '0',\n        height: '',\n        width: '',\n        alignItems: '',\n        justifyContent: ''\n      });\n    }\n    /** Resets the styles for the overlay pane so that a new positioning can be computed. */\n\n  }, {\n    key: \"_resetOverlayElementStyles\",\n    value: function _resetOverlayElementStyles() {\n      extendStyles(this._pane.style, {\n        top: '',\n        left: '',\n        bottom: '',\n        right: '',\n        position: '',\n        transform: ''\n      });\n    }\n    /** Sets positioning styles to the overlay element. */\n\n  }, {\n    key: \"_setOverlayElementStyles\",\n    value: function _setOverlayElementStyles(originPoint, position) {\n      var styles = {};\n\n      var hasExactPosition = this._hasExactPosition();\n\n      var hasFlexibleDimensions = this._hasFlexibleDimensions;\n\n      var config = this._overlayRef.getConfig();\n\n      if (hasExactPosition) {\n        var scrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n        extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n        extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n      } else {\n        styles.position = 'static';\n      } // Use a transform to apply the offsets. We do this because the `center` positions rely on\n      // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n      // off the position. We also can't use margins, because they won't have an effect in some\n      // cases where the element doesn't have anything to \"push off of\". Finally, this works\n      // better both with flexible and non-flexible positioning.\n\n\n      var transformString = '';\n\n      var offsetX = this._getOffset(position, 'x');\n\n      var offsetY = this._getOffset(position, 'y');\n\n      if (offsetX) {\n        transformString += \"translateX(\".concat(offsetX, \"px) \");\n      }\n\n      if (offsetY) {\n        transformString += \"translateY(\".concat(offsetY, \"px)\");\n      }\n\n      styles.transform = transformString.trim(); // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n      // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n      // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n      // Note that this doesn't apply when we have an exact position, in which case we do want to\n      // apply them because they'll be cleared from the bounding box.\n\n      if (config.maxHeight) {\n        if (hasExactPosition) {\n          styles.maxHeight = coerceCssPixelValue(config.maxHeight);\n        } else if (hasFlexibleDimensions) {\n          styles.maxHeight = '';\n        }\n      }\n\n      if (config.maxWidth) {\n        if (hasExactPosition) {\n          styles.maxWidth = coerceCssPixelValue(config.maxWidth);\n        } else if (hasFlexibleDimensions) {\n          styles.maxWidth = '';\n        }\n      }\n\n      extendStyles(this._pane.style, styles);\n    }\n    /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\n\n  }, {\n    key: \"_getExactOverlayY\",\n    value: function _getExactOverlayY(position, originPoint, scrollPosition) {\n      // Reset any existing styles. This is necessary in case the\n      // preferred position has changed since the last `apply`.\n      var styles = {\n        top: '',\n        bottom: ''\n      };\n\n      var overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n\n      if (this._isPushed) {\n        overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n      } // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n      // above or below the origin and the direction in which the element will expand.\n\n\n      if (position.overlayY === 'bottom') {\n        // When using `bottom`, we adjust the y position such that it is the distance\n        // from the bottom of the viewport rather than the top.\n        var documentHeight = this._document.documentElement.clientHeight;\n        styles.bottom = \"\".concat(documentHeight - (overlayPoint.y + this._overlayRect.height), \"px\");\n      } else {\n        styles.top = coerceCssPixelValue(overlayPoint.y);\n      }\n\n      return styles;\n    }\n    /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\n\n  }, {\n    key: \"_getExactOverlayX\",\n    value: function _getExactOverlayX(position, originPoint, scrollPosition) {\n      // Reset any existing styles. This is necessary in case the preferred position has\n      // changed since the last `apply`.\n      var styles = {\n        left: '',\n        right: ''\n      };\n\n      var overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n\n      if (this._isPushed) {\n        overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n      } // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n      // or \"after\" the origin, which determines the direction in which the element will expand.\n      // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n      // page is in RTL or LTR.\n\n\n      var horizontalStyleProperty;\n\n      if (this._isRtl()) {\n        horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n      } else {\n        horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n      } // When we're setting `right`, we adjust the x position such that it is the distance\n      // from the right edge of the viewport rather than the left edge.\n\n\n      if (horizontalStyleProperty === 'right') {\n        var documentWidth = this._document.documentElement.clientWidth;\n        styles.right = \"\".concat(documentWidth - (overlayPoint.x + this._overlayRect.width), \"px\");\n      } else {\n        styles.left = coerceCssPixelValue(overlayPoint.x);\n      }\n\n      return styles;\n    }\n    /**\n     * Gets the view properties of the trigger and overlay, including whether they are clipped\n     * or completely outside the view of any of the strategy's scrollables.\n     */\n\n  }, {\n    key: \"_getScrollVisibility\",\n    value: function _getScrollVisibility() {\n      // Note: needs fresh rects since the position could've changed.\n      var originBounds = this._getOriginRect();\n\n      var overlayBounds = this._pane.getBoundingClientRect(); // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n      // every time, we should be able to use the scrollTop of the containers if the size of those\n      // containers hasn't changed.\n\n\n      var scrollContainerBounds = this._scrollables.map(function (scrollable) {\n        return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n      });\n\n      return {\n        isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n        isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n        isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n        isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds)\n      };\n    }\n    /** Subtracts the amount that an element is overflowing on an axis from its length. */\n\n  }, {\n    key: \"_subtractOverflows\",\n    value: function _subtractOverflows(length) {\n      for (var _len = arguments.length, overflows = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        overflows[_key - 1] = arguments[_key];\n      }\n\n      return overflows.reduce(function (currentValue, currentOverflow) {\n        return currentValue - Math.max(currentOverflow, 0);\n      }, length);\n    }\n    /** Narrows the given viewport rect by the current _viewportMargin. */\n\n  }, {\n    key: \"_getNarrowedViewportRect\",\n    value: function _getNarrowedViewportRect() {\n      // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n      // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n      // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n      // and `innerHeight` that do. This is necessary, because the overlay container uses\n      // 100% `width` and `height` which don't include the scrollbar either.\n      var width = this._document.documentElement.clientWidth;\n      var height = this._document.documentElement.clientHeight;\n\n      var scrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n      return {\n        top: scrollPosition.top + this._viewportMargin,\n        left: scrollPosition.left + this._viewportMargin,\n        right: scrollPosition.left + width - this._viewportMargin,\n        bottom: scrollPosition.top + height - this._viewportMargin,\n        width: width - 2 * this._viewportMargin,\n        height: height - 2 * this._viewportMargin\n      };\n    }\n    /** Whether the we're dealing with an RTL context */\n\n  }, {\n    key: \"_isRtl\",\n    value: function _isRtl() {\n      return this._overlayRef.getDirection() === 'rtl';\n    }\n    /** Determines whether the overlay uses exact or flexible positioning. */\n\n  }, {\n    key: \"_hasExactPosition\",\n    value: function _hasExactPosition() {\n      return !this._hasFlexibleDimensions || this._isPushed;\n    }\n    /** Retrieves the offset of a position along the x or y axis. */\n\n  }, {\n    key: \"_getOffset\",\n    value: function _getOffset(position, axis) {\n      if (axis === 'x') {\n        // We don't do something like `position['offset' + axis]` in\n        // order to avoid breaking minifiers that rename properties.\n        return position.offsetX == null ? this._offsetX : position.offsetX;\n      }\n\n      return position.offsetY == null ? this._offsetY : position.offsetY;\n    }\n    /** Validates that the current position match the expected values. */\n\n  }, {\n    key: \"_validatePositions\",\n    value: function _validatePositions() {\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        if (!this._preferredPositions.length) {\n          throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n        } // TODO(crisbeto): remove these once Angular's template type\n        // checking is advanced enough to catch these cases.\n\n\n        this._preferredPositions.forEach(function (pair) {\n          validateHorizontalPosition('originX', pair.originX);\n          validateVerticalPosition('originY', pair.originY);\n          validateHorizontalPosition('overlayX', pair.overlayX);\n          validateVerticalPosition('overlayY', pair.overlayY);\n        });\n      }\n    }\n    /** Adds a single CSS class or an array of classes on the overlay panel. */\n\n  }, {\n    key: \"_addPanelClasses\",\n    value: function _addPanelClasses(cssClasses) {\n      var _this11 = this;\n\n      if (this._pane) {\n        coerceArray(cssClasses).forEach(function (cssClass) {\n          if (cssClass !== '' && _this11._appliedPanelClasses.indexOf(cssClass) === -1) {\n            _this11._appliedPanelClasses.push(cssClass);\n\n            _this11._pane.classList.add(cssClass);\n          }\n        });\n      }\n    }\n    /** Clears the classes that the position strategy has applied from the overlay panel. */\n\n  }, {\n    key: \"_clearPanelClasses\",\n    value: function _clearPanelClasses() {\n      var _this12 = this;\n\n      if (this._pane) {\n        this._appliedPanelClasses.forEach(function (cssClass) {\n          _this12._pane.classList.remove(cssClass);\n        });\n\n        this._appliedPanelClasses = [];\n      }\n    }\n    /** Returns the ClientRect of the current origin. */\n\n  }, {\n    key: \"_getOriginRect\",\n    value: function _getOriginRect() {\n      var origin = this._origin;\n\n      if (origin instanceof ElementRef) {\n        return origin.nativeElement.getBoundingClientRect();\n      } // Check for Element so SVG elements are also supported.\n\n\n      if (origin instanceof Element) {\n        return origin.getBoundingClientRect();\n      }\n\n      var width = origin.width || 0;\n      var height = origin.height || 0; // If the origin is a point, return a client rect as if it was a 0x0 element at the point.\n\n      return {\n        top: origin.y,\n        bottom: origin.y + height,\n        left: origin.x,\n        right: origin.x + width,\n        height: height,\n        width: width\n      };\n    }\n  }]);\n\n  return FlexibleConnectedPositionStrategy;\n}();\n/** Shallow-extends a stylesheet object with another stylesheet object. */\n\n\nfunction extendStyles(destination, source) {\n  for (var key in source) {\n    if (source.hasOwnProperty(key)) {\n      destination[key] = source[key];\n    }\n  }\n\n  return destination;\n}\n/**\n * Extracts the pixel value as a number from a value, if it's a number\n * or a CSS pixel string (e.g. `1337px`). Otherwise returns null.\n */\n\n\nfunction getPixelValue(input) {\n  if (typeof input !== 'number' && input != null) {\n    var _input$split = input.split(cssUnitPattern),\n        _input$split2 = _slicedToArray(_input$split, 2),\n        value = _input$split2[0],\n        units = _input$split2[1];\n\n    return !units || units === 'px' ? parseFloat(value) : null;\n  }\n\n  return input || null;\n}\n/**\n * Gets a version of an element's bounding `ClientRect` where all the values are rounded down to\n * the nearest pixel. This allows us to account for the cases where there may be sub-pixel\n * deviations in the `ClientRect` returned by the browser (e.g. when zoomed in with a percentage\n * size, see #21350).\n */\n\n\nfunction getRoundedBoundingClientRect(clientRect) {\n  return {\n    top: Math.floor(clientRect.top),\n    right: Math.floor(clientRect.right),\n    bottom: Math.floor(clientRect.bottom),\n    left: Math.floor(clientRect.left),\n    width: Math.floor(clientRect.width),\n    height: Math.floor(clientRect.height)\n  };\n}\n\nvar STANDARD_DROPDOWN_BELOW_POSITIONS = [{\n  originX: 'start',\n  originY: 'bottom',\n  overlayX: 'start',\n  overlayY: 'top'\n}, {\n  originX: 'start',\n  originY: 'top',\n  overlayX: 'start',\n  overlayY: 'bottom'\n}, {\n  originX: 'end',\n  originY: 'bottom',\n  overlayX: 'end',\n  overlayY: 'top'\n}, {\n  originX: 'end',\n  originY: 'top',\n  overlayX: 'end',\n  overlayY: 'bottom'\n}];\nvar STANDARD_DROPDOWN_ADJACENT_POSITIONS = [{\n  originX: 'end',\n  originY: 'top',\n  overlayX: 'start',\n  overlayY: 'top'\n}, {\n  originX: 'end',\n  originY: 'bottom',\n  overlayX: 'start',\n  overlayY: 'bottom'\n}, {\n  originX: 'start',\n  originY: 'top',\n  overlayX: 'end',\n  overlayY: 'top'\n}, {\n  originX: 'start',\n  originY: 'bottom',\n  overlayX: 'end',\n  overlayY: 'bottom'\n}];\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Class to be added to the overlay pane wrapper. */\n\nvar wrapperClass = 'cdk-global-overlay-wrapper';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\n\nvar GlobalPositionStrategy = /*#__PURE__*/function () {\n  function GlobalPositionStrategy() {\n    _classCallCheck(this, GlobalPositionStrategy);\n\n    this._cssPosition = 'static';\n    this._topOffset = '';\n    this._bottomOffset = '';\n    this._alignItems = '';\n    this._xPosition = '';\n    this._xOffset = '';\n    this._width = '';\n    this._height = '';\n    this._isDisposed = false;\n  }\n\n  _createClass(GlobalPositionStrategy, [{\n    key: \"attach\",\n    value: function attach(overlayRef) {\n      var config = overlayRef.getConfig();\n      this._overlayRef = overlayRef;\n\n      if (this._width && !config.width) {\n        overlayRef.updateSize({\n          width: this._width\n        });\n      }\n\n      if (this._height && !config.height) {\n        overlayRef.updateSize({\n          height: this._height\n        });\n      }\n\n      overlayRef.hostElement.classList.add(wrapperClass);\n      this._isDisposed = false;\n    }\n    /**\n     * Sets the top position of the overlay. Clears any previously set vertical position.\n     * @param value New top offset.\n     */\n\n  }, {\n    key: \"top\",\n    value: function top() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      this._bottomOffset = '';\n      this._topOffset = value;\n      this._alignItems = 'flex-start';\n      return this;\n    }\n    /**\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\n     * @param value New left offset.\n     */\n\n  }, {\n    key: \"left\",\n    value: function left() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      this._xOffset = value;\n      this._xPosition = 'left';\n      return this;\n    }\n    /**\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\n     * @param value New bottom offset.\n     */\n\n  }, {\n    key: \"bottom\",\n    value: function bottom() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      this._topOffset = '';\n      this._bottomOffset = value;\n      this._alignItems = 'flex-end';\n      return this;\n    }\n    /**\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\n     * @param value New right offset.\n     */\n\n  }, {\n    key: \"right\",\n    value: function right() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      this._xOffset = value;\n      this._xPosition = 'right';\n      return this;\n    }\n    /**\n     * Sets the overlay to the start of the viewport, depending on the overlay direction.\n     * This will be to the left in LTR layouts and to the right in RTL.\n     * @param offset Offset from the edge of the screen.\n     */\n\n  }, {\n    key: \"start\",\n    value: function start() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      this._xOffset = value;\n      this._xPosition = 'start';\n      return this;\n    }\n    /**\n     * Sets the overlay to the end of the viewport, depending on the overlay direction.\n     * This will be to the right in LTR layouts and to the left in RTL.\n     * @param offset Offset from the edge of the screen.\n     */\n\n  }, {\n    key: \"end\",\n    value: function end() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      this._xOffset = value;\n      this._xPosition = 'end';\n      return this;\n    }\n    /**\n     * Sets the overlay width and clears any previously set width.\n     * @param value New width for the overlay\n     * @deprecated Pass the `width` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n\n  }, {\n    key: \"width\",\n    value: function width() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n      if (this._overlayRef) {\n        this._overlayRef.updateSize({\n          width: value\n        });\n      } else {\n        this._width = value;\n      }\n\n      return this;\n    }\n    /**\n     * Sets the overlay height and clears any previously set height.\n     * @param value New height for the overlay\n     * @deprecated Pass the `height` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n\n  }, {\n    key: \"height\",\n    value: function height() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n      if (this._overlayRef) {\n        this._overlayRef.updateSize({\n          height: value\n        });\n      } else {\n        this._height = value;\n      }\n\n      return this;\n    }\n    /**\n     * Centers the overlay horizontally with an optional offset.\n     * Clears any previously set horizontal position.\n     *\n     * @param offset Overlay offset from the horizontal center.\n     */\n\n  }, {\n    key: \"centerHorizontally\",\n    value: function centerHorizontally() {\n      var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      this.left(offset);\n      this._xPosition = 'center';\n      return this;\n    }\n    /**\n     * Centers the overlay vertically with an optional offset.\n     * Clears any previously set vertical position.\n     *\n     * @param offset Overlay offset from the vertical center.\n     */\n\n  }, {\n    key: \"centerVertically\",\n    value: function centerVertically() {\n      var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      this.top(offset);\n      this._alignItems = 'center';\n      return this;\n    }\n    /**\n     * Apply the position to the element.\n     * @docs-private\n     */\n\n  }, {\n    key: \"apply\",\n    value: function apply() {\n      // Since the overlay ref applies the strategy asynchronously, it could\n      // have been disposed before it ends up being applied. If that is the\n      // case, we shouldn't do anything.\n      if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n        return;\n      }\n\n      var styles = this._overlayRef.overlayElement.style;\n      var parentStyles = this._overlayRef.hostElement.style;\n\n      var config = this._overlayRef.getConfig();\n\n      var width = config.width,\n          height = config.height,\n          maxWidth = config.maxWidth,\n          maxHeight = config.maxHeight;\n      var shouldBeFlushHorizontally = (width === '100%' || width === '100vw') && (!maxWidth || maxWidth === '100%' || maxWidth === '100vw');\n      var shouldBeFlushVertically = (height === '100%' || height === '100vh') && (!maxHeight || maxHeight === '100%' || maxHeight === '100vh');\n      var xPosition = this._xPosition;\n      var xOffset = this._xOffset;\n      var isRtl = this._overlayRef.getConfig().direction === 'rtl';\n      var marginLeft = '';\n      var marginRight = '';\n      var justifyContent = '';\n\n      if (shouldBeFlushHorizontally) {\n        justifyContent = 'flex-start';\n      } else if (xPosition === 'center') {\n        justifyContent = 'center';\n\n        if (isRtl) {\n          marginRight = xOffset;\n        } else {\n          marginLeft = xOffset;\n        }\n      } else if (isRtl) {\n        if (xPosition === 'left' || xPosition === 'end') {\n          justifyContent = 'flex-end';\n          marginLeft = xOffset;\n        } else if (xPosition === 'right' || xPosition === 'start') {\n          justifyContent = 'flex-start';\n          marginRight = xOffset;\n        }\n      } else if (xPosition === 'left' || xPosition === 'start') {\n        justifyContent = 'flex-start';\n        marginLeft = xOffset;\n      } else if (xPosition === 'right' || xPosition === 'end') {\n        justifyContent = 'flex-end';\n        marginRight = xOffset;\n      }\n\n      styles.position = this._cssPosition;\n      styles.marginLeft = shouldBeFlushHorizontally ? '0' : marginLeft;\n      styles.marginTop = shouldBeFlushVertically ? '0' : this._topOffset;\n      styles.marginBottom = this._bottomOffset;\n      styles.marginRight = shouldBeFlushHorizontally ? '0' : marginRight;\n      parentStyles.justifyContent = justifyContent;\n      parentStyles.alignItems = shouldBeFlushVertically ? 'flex-start' : this._alignItems;\n    }\n    /**\n     * Cleans up the DOM changes from the position strategy.\n     * @docs-private\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      if (this._isDisposed || !this._overlayRef) {\n        return;\n      }\n\n      var styles = this._overlayRef.overlayElement.style;\n      var parent = this._overlayRef.hostElement;\n      var parentStyles = parent.style;\n      parent.classList.remove(wrapperClass);\n      parentStyles.justifyContent = parentStyles.alignItems = styles.marginTop = styles.marginBottom = styles.marginLeft = styles.marginRight = styles.position = '';\n      this._overlayRef = null;\n      this._isDisposed = true;\n    }\n  }]);\n\n  return GlobalPositionStrategy;\n}();\n/** Builder for overlay position strategy. */\n\n\nvar OverlayPositionBuilder = /*#__PURE__*/function () {\n  function OverlayPositionBuilder(_viewportRuler, _document, _platform, _overlayContainer) {\n    _classCallCheck(this, OverlayPositionBuilder);\n\n    this._viewportRuler = _viewportRuler;\n    this._document = _document;\n    this._platform = _platform;\n    this._overlayContainer = _overlayContainer;\n  }\n  /**\n   * Creates a global position strategy.\n   */\n\n\n  _createClass(OverlayPositionBuilder, [{\n    key: \"global\",\n    value: function global() {\n      return new GlobalPositionStrategy();\n    }\n    /**\n     * Creates a flexible position strategy.\n     * @param origin Origin relative to which to position the overlay.\n     */\n\n  }, {\n    key: \"flexibleConnectedTo\",\n    value: function flexibleConnectedTo(origin) {\n      return new FlexibleConnectedPositionStrategy(origin, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    }\n  }]);\n\n  return OverlayPositionBuilder;\n}();\n\nOverlayPositionBuilder.ɵfac = function OverlayPositionBuilder_Factory(t) {\n  return new (t || OverlayPositionBuilder)(i0.ɵɵinject(i1.ViewportRuler), i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(i1$1.Platform), i0.ɵɵinject(OverlayContainer));\n};\n\nOverlayPositionBuilder.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: OverlayPositionBuilder,\n  factory: OverlayPositionBuilder.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(OverlayPositionBuilder, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.ViewportRuler\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: i1$1.Platform\n    }, {\n      type: OverlayContainer\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Service for dispatching events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\n\n\nvar BaseOverlayDispatcher = /*#__PURE__*/function () {\n  function BaseOverlayDispatcher(document) {\n    _classCallCheck(this, BaseOverlayDispatcher);\n\n    /** Currently attached overlays in the order they were attached. */\n    this._attachedOverlays = [];\n    this._document = document;\n  }\n\n  _createClass(BaseOverlayDispatcher, [{\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.detach();\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n\n  }, {\n    key: \"add\",\n    value: function add(overlayRef) {\n      // Ensure that we don't get the same overlay multiple times.\n      this.remove(overlayRef);\n\n      this._attachedOverlays.push(overlayRef);\n    }\n    /** Remove an overlay from the list of attached overlay refs. */\n\n  }, {\n    key: \"remove\",\n    value: function remove(overlayRef) {\n      var index = this._attachedOverlays.indexOf(overlayRef);\n\n      if (index > -1) {\n        this._attachedOverlays.splice(index, 1);\n      } // Remove the global listener once there are no more overlays.\n\n\n      if (this._attachedOverlays.length === 0) {\n        this.detach();\n      }\n    }\n  }]);\n\n  return BaseOverlayDispatcher;\n}();\n\nBaseOverlayDispatcher.ɵfac = function BaseOverlayDispatcher_Factory(t) {\n  return new (t || BaseOverlayDispatcher)(i0.ɵɵinject(DOCUMENT));\n};\n\nBaseOverlayDispatcher.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: BaseOverlayDispatcher,\n  factory: BaseOverlayDispatcher.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BaseOverlayDispatcher, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\n\n\nvar OverlayKeyboardDispatcher = /*#__PURE__*/function (_BaseOverlayDispatche) {\n  _inherits(OverlayKeyboardDispatcher, _BaseOverlayDispatche);\n\n  var _super = _createSuper(OverlayKeyboardDispatcher);\n\n  function OverlayKeyboardDispatcher(document,\n  /** @breaking-change 14.0.0 _ngZone will be required. */\n  _ngZone) {\n    var _this13;\n\n    _classCallCheck(this, OverlayKeyboardDispatcher);\n\n    _this13 = _super.call(this, document);\n    _this13._ngZone = _ngZone;\n    /** Keyboard event listener that will be attached to the body. */\n\n    _this13._keydownListener = function (event) {\n      var overlays = _this13._attachedOverlays;\n\n      for (var i = overlays.length - 1; i > -1; i--) {\n        // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n        // We want to target the most recent overlay, rather than trying to match where the event came\n        // from, because some components might open an overlay, but keep focus on a trigger element\n        // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n        // because we don't want overlays that don't handle keyboard events to block the ones below\n        // them that do.\n        if (overlays[i]._keydownEvents.observers.length > 0) {\n          var _ret = function () {\n            var keydownEvents = overlays[i]._keydownEvents;\n            /** @breaking-change 14.0.0 _ngZone will be required. */\n\n            if (_this13._ngZone) {\n              _this13._ngZone.run(function () {\n                return keydownEvents.next(event);\n              });\n            } else {\n              keydownEvents.next(event);\n            }\n\n            return \"break\";\n          }();\n\n          if (_ret === \"break\") break;\n        }\n      }\n    };\n\n    return _this13;\n  }\n  /** Add a new overlay to the list of attached overlay refs. */\n\n\n  _createClass(OverlayKeyboardDispatcher, [{\n    key: \"add\",\n    value: function add(overlayRef) {\n      var _this14 = this;\n\n      _get(_getPrototypeOf(OverlayKeyboardDispatcher.prototype), \"add\", this).call(this, overlayRef); // Lazily start dispatcher once first overlay is added\n\n\n      if (!this._isAttached) {\n        /** @breaking-change 14.0.0 _ngZone will be required. */\n        if (this._ngZone) {\n          this._ngZone.runOutsideAngular(function () {\n            return _this14._document.body.addEventListener('keydown', _this14._keydownListener);\n          });\n        } else {\n          this._document.body.addEventListener('keydown', this._keydownListener);\n        }\n\n        this._isAttached = true;\n      }\n    }\n    /** Detaches the global keyboard event listener. */\n\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      if (this._isAttached) {\n        this._document.body.removeEventListener('keydown', this._keydownListener);\n\n        this._isAttached = false;\n      }\n    }\n  }]);\n\n  return OverlayKeyboardDispatcher;\n}(BaseOverlayDispatcher);\n\nOverlayKeyboardDispatcher.ɵfac = function OverlayKeyboardDispatcher_Factory(t) {\n  return new (t || OverlayKeyboardDispatcher)(i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(i0.NgZone, 8));\n};\n\nOverlayKeyboardDispatcher.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: OverlayKeyboardDispatcher,\n  factory: OverlayKeyboardDispatcher.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(OverlayKeyboardDispatcher, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: i0.NgZone,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Service for dispatching mouse click events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\n\n\nvar OverlayOutsideClickDispatcher = /*#__PURE__*/function (_BaseOverlayDispatche2) {\n  _inherits(OverlayOutsideClickDispatcher, _BaseOverlayDispatche2);\n\n  var _super2 = _createSuper(OverlayOutsideClickDispatcher);\n\n  function OverlayOutsideClickDispatcher(document, _platform,\n  /** @breaking-change 14.0.0 _ngZone will be required. */\n  _ngZone) {\n    var _this15;\n\n    _classCallCheck(this, OverlayOutsideClickDispatcher);\n\n    _this15 = _super2.call(this, document);\n    _this15._platform = _platform;\n    _this15._ngZone = _ngZone;\n    _this15._cursorStyleIsSet = false;\n    /** Store pointerdown event target to track origin of click. */\n\n    _this15._pointerDownListener = function (event) {\n      _this15._pointerDownEventTarget = _getEventTarget(event);\n    };\n    /** Click event listener that will be attached to the body propagate phase. */\n\n\n    _this15._clickListener = function (event) {\n      var target = _getEventTarget(event); // In case of a click event, we want to check the origin of the click\n      // (e.g. in case where a user starts a click inside the overlay and\n      // releases the click outside of it).\n      // This is done by using the event target of the preceding pointerdown event.\n      // Every click event caused by a pointer device has a preceding pointerdown\n      // event, unless the click was programmatically triggered (e.g. in a unit test).\n\n\n      var origin = event.type === 'click' && _this15._pointerDownEventTarget ? _this15._pointerDownEventTarget : target; // Reset the stored pointerdown event target, to avoid having it interfere\n      // in subsequent events.\n\n      _this15._pointerDownEventTarget = null; // We copy the array because the original may be modified asynchronously if the\n      // outsidePointerEvents listener decides to detach overlays resulting in index errors inside\n      // the for loop.\n\n      var overlays = _this15._attachedOverlays.slice(); // Dispatch the mouse event to the top overlay which has subscribers to its mouse events.\n      // We want to target all overlays for which the click could be considered as outside click.\n      // As soon as we reach an overlay for which the click is not outside click we break off\n      // the loop.\n\n\n      var _loop = function _loop(i) {\n        var overlayRef = overlays[i];\n\n        if (overlayRef._outsidePointerEvents.observers.length < 1 || !overlayRef.hasAttached()) {\n          return \"continue\";\n        } // If it's a click inside the overlay, just break - we should do nothing\n        // If it's an outside click (both origin and target of the click) dispatch the mouse event,\n        // and proceed with the next overlay\n\n\n        if (overlayRef.overlayElement.contains(target) || overlayRef.overlayElement.contains(origin)) {\n          return \"break\";\n        }\n\n        var outsidePointerEvents = overlayRef._outsidePointerEvents;\n        /** @breaking-change 14.0.0 _ngZone will be required. */\n\n        if (_this15._ngZone) {\n          _this15._ngZone.run(function () {\n            return outsidePointerEvents.next(event);\n          });\n        } else {\n          outsidePointerEvents.next(event);\n        }\n      };\n\n      for (var i = overlays.length - 1; i > -1; i--) {\n        var _ret2 = _loop(i);\n\n        if (_ret2 === \"continue\") continue;\n        if (_ret2 === \"break\") break;\n      }\n    };\n\n    return _this15;\n  }\n  /** Add a new overlay to the list of attached overlay refs. */\n\n\n  _createClass(OverlayOutsideClickDispatcher, [{\n    key: \"add\",\n    value: function add(overlayRef) {\n      var _this16 = this;\n\n      _get(_getPrototypeOf(OverlayOutsideClickDispatcher.prototype), \"add\", this).call(this, overlayRef); // Safari on iOS does not generate click events for non-interactive\n      // elements. However, we want to receive a click for any element outside\n      // the overlay. We can force a \"clickable\" state by setting\n      // `cursor: pointer` on the document body. See:\n      // https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event#Safari_Mobile\n      // https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html\n\n\n      if (!this._isAttached) {\n        var body = this._document.body;\n        /** @breaking-change 14.0.0 _ngZone will be required. */\n\n        if (this._ngZone) {\n          this._ngZone.runOutsideAngular(function () {\n            return _this16._addEventListeners(body);\n          });\n        } else {\n          this._addEventListeners(body);\n        } // click event is not fired on iOS. To make element \"clickable\" we are\n        // setting the cursor to pointer\n\n\n        if (this._platform.IOS && !this._cursorStyleIsSet) {\n          this._cursorOriginalValue = body.style.cursor;\n          body.style.cursor = 'pointer';\n          this._cursorStyleIsSet = true;\n        }\n\n        this._isAttached = true;\n      }\n    }\n    /** Detaches the global keyboard event listener. */\n\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      if (this._isAttached) {\n        var body = this._document.body;\n        body.removeEventListener('pointerdown', this._pointerDownListener, true);\n        body.removeEventListener('click', this._clickListener, true);\n        body.removeEventListener('auxclick', this._clickListener, true);\n        body.removeEventListener('contextmenu', this._clickListener, true);\n\n        if (this._platform.IOS && this._cursorStyleIsSet) {\n          body.style.cursor = this._cursorOriginalValue;\n          this._cursorStyleIsSet = false;\n        }\n\n        this._isAttached = false;\n      }\n    }\n  }, {\n    key: \"_addEventListeners\",\n    value: function _addEventListeners(body) {\n      body.addEventListener('pointerdown', this._pointerDownListener, true);\n      body.addEventListener('click', this._clickListener, true);\n      body.addEventListener('auxclick', this._clickListener, true);\n      body.addEventListener('contextmenu', this._clickListener, true);\n    }\n  }]);\n\n  return OverlayOutsideClickDispatcher;\n}(BaseOverlayDispatcher);\n\nOverlayOutsideClickDispatcher.ɵfac = function OverlayOutsideClickDispatcher_Factory(t) {\n  return new (t || OverlayOutsideClickDispatcher)(i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(i1$1.Platform), i0.ɵɵinject(i0.NgZone, 8));\n};\n\nOverlayOutsideClickDispatcher.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: OverlayOutsideClickDispatcher,\n  factory: OverlayOutsideClickDispatcher.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(OverlayOutsideClickDispatcher, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: i1$1.Platform\n    }, {\n      type: i0.NgZone,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n/** Next overlay unique ID. */\n\n\nvar nextUniqueId = 0; // Note that Overlay is *not* scoped to the app root because of the ComponentFactoryResolver\n// which needs to be different depending on where OverlayModule is imported.\n\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\n\nvar Overlay = /*#__PURE__*/function () {\n  function Overlay(\n  /** Scrolling strategies that can be used when creating an overlay. */\n  scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality, _location, _outsideClickDispatcher, _animationsModuleType) {\n    _classCallCheck(this, Overlay);\n\n    this.scrollStrategies = scrollStrategies;\n    this._overlayContainer = _overlayContainer;\n    this._componentFactoryResolver = _componentFactoryResolver;\n    this._positionBuilder = _positionBuilder;\n    this._keyboardDispatcher = _keyboardDispatcher;\n    this._injector = _injector;\n    this._ngZone = _ngZone;\n    this._document = _document;\n    this._directionality = _directionality;\n    this._location = _location;\n    this._outsideClickDispatcher = _outsideClickDispatcher;\n    this._animationsModuleType = _animationsModuleType;\n  }\n  /**\n   * Creates an overlay.\n   * @param config Configuration applied to the overlay.\n   * @returns Reference to the created overlay.\n   */\n\n\n  _createClass(Overlay, [{\n    key: \"create\",\n    value: function create(config) {\n      var host = this._createHostElement();\n\n      var pane = this._createPaneElement(host);\n\n      var portalOutlet = this._createPortalOutlet(pane);\n\n      var overlayConfig = new OverlayConfig(config);\n      overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n      return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document, this._location, this._outsideClickDispatcher, this._animationsModuleType === 'NoopAnimations');\n    }\n    /**\n     * Gets a position builder that can be used, via fluent API,\n     * to construct and configure a position strategy.\n     * @returns An overlay position builder.\n     */\n\n  }, {\n    key: \"position\",\n    value: function position() {\n      return this._positionBuilder;\n    }\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @returns Newly-created pane element\n     */\n\n  }, {\n    key: \"_createPaneElement\",\n    value: function _createPaneElement(host) {\n      var pane = this._document.createElement('div');\n\n      pane.id = \"cdk-overlay-\".concat(nextUniqueId++);\n      pane.classList.add('cdk-overlay-pane');\n      host.appendChild(pane);\n      return pane;\n    }\n    /**\n     * Creates the host element that wraps around an overlay\n     * and can be used for advanced positioning.\n     * @returns Newly-create host element.\n     */\n\n  }, {\n    key: \"_createHostElement\",\n    value: function _createHostElement() {\n      var host = this._document.createElement('div');\n\n      this._overlayContainer.getContainerElement().appendChild(host);\n\n      return host;\n    }\n    /**\n     * Create a DomPortalOutlet into which the overlay content can be loaded.\n     * @param pane The DOM element to turn into a portal outlet.\n     * @returns A portal outlet for the given DOM element.\n     */\n\n  }, {\n    key: \"_createPortalOutlet\",\n    value: function _createPortalOutlet(pane) {\n      // We have to resolve the ApplicationRef later in order to allow people\n      // to use overlay-based providers during app initialization.\n      if (!this._appRef) {\n        this._appRef = this._injector.get(ApplicationRef);\n      }\n\n      return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector, this._document);\n    }\n  }]);\n\n  return Overlay;\n}();\n\nOverlay.ɵfac = function Overlay_Factory(t) {\n  return new (t || Overlay)(i0.ɵɵinject(ScrollStrategyOptions), i0.ɵɵinject(OverlayContainer), i0.ɵɵinject(i0.ComponentFactoryResolver), i0.ɵɵinject(OverlayPositionBuilder), i0.ɵɵinject(OverlayKeyboardDispatcher), i0.ɵɵinject(i0.Injector), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(i5.Directionality), i0.ɵɵinject(i6.Location), i0.ɵɵinject(OverlayOutsideClickDispatcher), i0.ɵɵinject(ANIMATION_MODULE_TYPE, 8));\n};\n\nOverlay.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: Overlay,\n  factory: Overlay.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Overlay, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: ScrollStrategyOptions\n    }, {\n      type: OverlayContainer\n    }, {\n      type: i0.ComponentFactoryResolver\n    }, {\n      type: OverlayPositionBuilder\n    }, {\n      type: OverlayKeyboardDispatcher\n    }, {\n      type: i0.Injector\n    }, {\n      type: i0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: i5.Directionality\n    }, {\n      type: i6.Location\n    }, {\n      type: OverlayOutsideClickDispatcher\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\n\n\nvar defaultPositionList = [{\n  originX: 'start',\n  originY: 'bottom',\n  overlayX: 'start',\n  overlayY: 'top'\n}, {\n  originX: 'start',\n  originY: 'top',\n  overlayX: 'start',\n  overlayY: 'bottom'\n}, {\n  originX: 'end',\n  originY: 'top',\n  overlayX: 'end',\n  overlayY: 'bottom'\n}, {\n  originX: 'end',\n  originY: 'bottom',\n  overlayX: 'end',\n  overlayY: 'top'\n}];\n/** Injection token that determines the scroll handling while the connected overlay is open. */\n\nvar CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new InjectionToken('cdk-connected-overlay-scroll-strategy');\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\n\nvar CdkOverlayOrigin = /*#__PURE__*/_createClass(function CdkOverlayOrigin(\n/** Reference to the element on which the directive is applied. */\nelementRef) {\n  _classCallCheck(this, CdkOverlayOrigin);\n\n  this.elementRef = elementRef;\n});\n\nCdkOverlayOrigin.ɵfac = function CdkOverlayOrigin_Factory(t) {\n  return new (t || CdkOverlayOrigin)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nCdkOverlayOrigin.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkOverlayOrigin,\n  selectors: [[\"\", \"cdk-overlay-origin\", \"\"], [\"\", \"overlay-origin\", \"\"], [\"\", \"cdkOverlayOrigin\", \"\"]],\n  exportAs: [\"cdkOverlayOrigin\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkOverlayOrigin, [{\n    type: Directive,\n    args: [{\n      selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n      exportAs: 'cdkOverlayOrigin'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }];\n  }, null);\n})();\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\n\n\nvar CdkConnectedOverlay = /*#__PURE__*/function () {\n  // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n  function CdkConnectedOverlay(_overlay, templateRef, viewContainerRef, scrollStrategyFactory, _dir) {\n    _classCallCheck(this, CdkConnectedOverlay);\n\n    this._overlay = _overlay;\n    this._dir = _dir;\n    this._hasBackdrop = false;\n    this._lockPosition = false;\n    this._growAfterOpen = false;\n    this._flexibleDimensions = false;\n    this._push = false;\n    this._backdropSubscription = Subscription.EMPTY;\n    this._attachSubscription = Subscription.EMPTY;\n    this._detachSubscription = Subscription.EMPTY;\n    this._positionSubscription = Subscription.EMPTY;\n    /** Margin between the overlay and the viewport edges. */\n\n    this.viewportMargin = 0;\n    /** Whether the overlay is open. */\n\n    this.open = false;\n    /** Whether the overlay can be closed by user interaction. */\n\n    this.disableClose = false;\n    /** Event emitted when the backdrop is clicked. */\n\n    this.backdropClick = new EventEmitter();\n    /** Event emitted when the position has changed. */\n\n    this.positionChange = new EventEmitter();\n    /** Event emitted when the overlay has been attached. */\n\n    this.attach = new EventEmitter();\n    /** Event emitted when the overlay has been detached. */\n\n    this.detach = new EventEmitter();\n    /** Emits when there are keyboard events that are targeted at the overlay. */\n\n    this.overlayKeydown = new EventEmitter();\n    /** Emits when there are mouse outside click events that are targeted at the overlay. */\n\n    this.overlayOutsideClick = new EventEmitter();\n    this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this.scrollStrategy = this._scrollStrategyFactory();\n  }\n  /** The offset in pixels for the overlay connection point on the x-axis */\n\n\n  _createClass(CdkConnectedOverlay, [{\n    key: \"offsetX\",\n    get: function get() {\n      return this._offsetX;\n    },\n    set: function set(offsetX) {\n      this._offsetX = offsetX;\n\n      if (this._position) {\n        this._updatePositionStrategy(this._position);\n      }\n    }\n    /** The offset in pixels for the overlay connection point on the y-axis */\n\n  }, {\n    key: \"offsetY\",\n    get: function get() {\n      return this._offsetY;\n    },\n    set: function set(offsetY) {\n      this._offsetY = offsetY;\n\n      if (this._position) {\n        this._updatePositionStrategy(this._position);\n      }\n    }\n    /** Whether or not the overlay should attach a backdrop. */\n\n  }, {\n    key: \"hasBackdrop\",\n    get: function get() {\n      return this._hasBackdrop;\n    },\n    set: function set(value) {\n      this._hasBackdrop = coerceBooleanProperty(value);\n    }\n    /** Whether or not the overlay should be locked when scrolling. */\n\n  }, {\n    key: \"lockPosition\",\n    get: function get() {\n      return this._lockPosition;\n    },\n    set: function set(value) {\n      this._lockPosition = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n\n  }, {\n    key: \"flexibleDimensions\",\n    get: function get() {\n      return this._flexibleDimensions;\n    },\n    set: function set(value) {\n      this._flexibleDimensions = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\n\n  }, {\n    key: \"growAfterOpen\",\n    get: function get() {\n      return this._growAfterOpen;\n    },\n    set: function set(value) {\n      this._growAfterOpen = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\n\n  }, {\n    key: \"push\",\n    get: function get() {\n      return this._push;\n    },\n    set: function set(value) {\n      this._push = coerceBooleanProperty(value);\n    }\n    /** The associated overlay reference. */\n\n  }, {\n    key: \"overlayRef\",\n    get: function get() {\n      return this._overlayRef;\n    }\n    /** The element's layout direction. */\n\n  }, {\n    key: \"dir\",\n    get: function get() {\n      return this._dir ? this._dir.value : 'ltr';\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._attachSubscription.unsubscribe();\n\n      this._detachSubscription.unsubscribe();\n\n      this._backdropSubscription.unsubscribe();\n\n      this._positionSubscription.unsubscribe();\n\n      if (this._overlayRef) {\n        this._overlayRef.dispose();\n      }\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      if (this._position) {\n        this._updatePositionStrategy(this._position);\n\n        this._overlayRef.updateSize({\n          width: this.width,\n          minWidth: this.minWidth,\n          height: this.height,\n          minHeight: this.minHeight\n        });\n\n        if (changes['origin'] && this.open) {\n          this._position.apply();\n        }\n      }\n\n      if (changes['open']) {\n        this.open ? this._attachOverlay() : this._detachOverlay();\n      }\n    }\n    /** Creates an overlay */\n\n  }, {\n    key: \"_createOverlay\",\n    value: function _createOverlay() {\n      var _this17 = this;\n\n      if (!this.positions || !this.positions.length) {\n        this.positions = defaultPositionList;\n      }\n\n      var overlayRef = this._overlayRef = this._overlay.create(this._buildConfig());\n\n      this._attachSubscription = overlayRef.attachments().subscribe(function () {\n        return _this17.attach.emit();\n      });\n      this._detachSubscription = overlayRef.detachments().subscribe(function () {\n        return _this17.detach.emit();\n      });\n      overlayRef.keydownEvents().subscribe(function (event) {\n        _this17.overlayKeydown.next(event);\n\n        if (event.keyCode === ESCAPE && !_this17.disableClose && !hasModifierKey(event)) {\n          event.preventDefault();\n\n          _this17._detachOverlay();\n        }\n      });\n\n      this._overlayRef.outsidePointerEvents().subscribe(function (event) {\n        _this17.overlayOutsideClick.next(event);\n      });\n    }\n    /** Builds the overlay config based on the directive's inputs */\n\n  }, {\n    key: \"_buildConfig\",\n    value: function _buildConfig() {\n      var positionStrategy = this._position = this.positionStrategy || this._createPositionStrategy();\n\n      var overlayConfig = new OverlayConfig({\n        direction: this._dir,\n        positionStrategy: positionStrategy,\n        scrollStrategy: this.scrollStrategy,\n        hasBackdrop: this.hasBackdrop\n      });\n\n      if (this.width || this.width === 0) {\n        overlayConfig.width = this.width;\n      }\n\n      if (this.height || this.height === 0) {\n        overlayConfig.height = this.height;\n      }\n\n      if (this.minWidth || this.minWidth === 0) {\n        overlayConfig.minWidth = this.minWidth;\n      }\n\n      if (this.minHeight || this.minHeight === 0) {\n        overlayConfig.minHeight = this.minHeight;\n      }\n\n      if (this.backdropClass) {\n        overlayConfig.backdropClass = this.backdropClass;\n      }\n\n      if (this.panelClass) {\n        overlayConfig.panelClass = this.panelClass;\n      }\n\n      return overlayConfig;\n    }\n    /** Updates the state of a position strategy, based on the values of the directive inputs. */\n\n  }, {\n    key: \"_updatePositionStrategy\",\n    value: function _updatePositionStrategy(positionStrategy) {\n      var _this18 = this;\n\n      var positions = this.positions.map(function (currentPosition) {\n        return {\n          originX: currentPosition.originX,\n          originY: currentPosition.originY,\n          overlayX: currentPosition.overlayX,\n          overlayY: currentPosition.overlayY,\n          offsetX: currentPosition.offsetX || _this18.offsetX,\n          offsetY: currentPosition.offsetY || _this18.offsetY,\n          panelClass: currentPosition.panelClass || undefined\n        };\n      });\n      return positionStrategy.setOrigin(this._getFlexibleConnectedPositionStrategyOrigin()).withPositions(positions).withFlexibleDimensions(this.flexibleDimensions).withPush(this.push).withGrowAfterOpen(this.growAfterOpen).withViewportMargin(this.viewportMargin).withLockedPosition(this.lockPosition).withTransformOriginOn(this.transformOriginSelector);\n    }\n    /** Returns the position strategy of the overlay to be set on the overlay config */\n\n  }, {\n    key: \"_createPositionStrategy\",\n    value: function _createPositionStrategy() {\n      var strategy = this._overlay.position().flexibleConnectedTo(this._getFlexibleConnectedPositionStrategyOrigin());\n\n      this._updatePositionStrategy(strategy);\n\n      return strategy;\n    }\n  }, {\n    key: \"_getFlexibleConnectedPositionStrategyOrigin\",\n    value: function _getFlexibleConnectedPositionStrategyOrigin() {\n      if (this.origin instanceof CdkOverlayOrigin) {\n        return this.origin.elementRef;\n      } else {\n        return this.origin;\n      }\n    }\n    /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\n\n  }, {\n    key: \"_attachOverlay\",\n    value: function _attachOverlay() {\n      var _this19 = this;\n\n      if (!this._overlayRef) {\n        this._createOverlay();\n      } else {\n        // Update the overlay size, in case the directive's inputs have changed\n        this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;\n      }\n\n      if (!this._overlayRef.hasAttached()) {\n        this._overlayRef.attach(this._templatePortal);\n      }\n\n      if (this.hasBackdrop) {\n        this._backdropSubscription = this._overlayRef.backdropClick().subscribe(function (event) {\n          _this19.backdropClick.emit(event);\n        });\n      } else {\n        this._backdropSubscription.unsubscribe();\n      }\n\n      this._positionSubscription.unsubscribe(); // Only subscribe to `positionChanges` if requested, because putting\n      // together all the information for it can be expensive.\n\n\n      if (this.positionChange.observers.length > 0) {\n        this._positionSubscription = this._position.positionChanges.pipe(takeWhile(function () {\n          return _this19.positionChange.observers.length > 0;\n        })).subscribe(function (position) {\n          _this19.positionChange.emit(position);\n\n          if (_this19.positionChange.observers.length === 0) {\n            _this19._positionSubscription.unsubscribe();\n          }\n        });\n      }\n    }\n    /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\n\n  }, {\n    key: \"_detachOverlay\",\n    value: function _detachOverlay() {\n      if (this._overlayRef) {\n        this._overlayRef.detach();\n      }\n\n      this._backdropSubscription.unsubscribe();\n\n      this._positionSubscription.unsubscribe();\n    }\n  }]);\n\n  return CdkConnectedOverlay;\n}();\n\nCdkConnectedOverlay.ɵfac = function CdkConnectedOverlay_Factory(t) {\n  return new (t || CdkConnectedOverlay)(i0.ɵɵdirectiveInject(Overlay), i0.ɵɵdirectiveInject(i0.TemplateRef), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY), i0.ɵɵdirectiveInject(i5.Directionality, 8));\n};\n\nCdkConnectedOverlay.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkConnectedOverlay,\n  selectors: [[\"\", \"cdk-connected-overlay\", \"\"], [\"\", \"connected-overlay\", \"\"], [\"\", \"cdkConnectedOverlay\", \"\"]],\n  inputs: {\n    origin: [\"cdkConnectedOverlayOrigin\", \"origin\"],\n    positions: [\"cdkConnectedOverlayPositions\", \"positions\"],\n    positionStrategy: [\"cdkConnectedOverlayPositionStrategy\", \"positionStrategy\"],\n    offsetX: [\"cdkConnectedOverlayOffsetX\", \"offsetX\"],\n    offsetY: [\"cdkConnectedOverlayOffsetY\", \"offsetY\"],\n    width: [\"cdkConnectedOverlayWidth\", \"width\"],\n    height: [\"cdkConnectedOverlayHeight\", \"height\"],\n    minWidth: [\"cdkConnectedOverlayMinWidth\", \"minWidth\"],\n    minHeight: [\"cdkConnectedOverlayMinHeight\", \"minHeight\"],\n    backdropClass: [\"cdkConnectedOverlayBackdropClass\", \"backdropClass\"],\n    panelClass: [\"cdkConnectedOverlayPanelClass\", \"panelClass\"],\n    viewportMargin: [\"cdkConnectedOverlayViewportMargin\", \"viewportMargin\"],\n    scrollStrategy: [\"cdkConnectedOverlayScrollStrategy\", \"scrollStrategy\"],\n    open: [\"cdkConnectedOverlayOpen\", \"open\"],\n    disableClose: [\"cdkConnectedOverlayDisableClose\", \"disableClose\"],\n    transformOriginSelector: [\"cdkConnectedOverlayTransformOriginOn\", \"transformOriginSelector\"],\n    hasBackdrop: [\"cdkConnectedOverlayHasBackdrop\", \"hasBackdrop\"],\n    lockPosition: [\"cdkConnectedOverlayLockPosition\", \"lockPosition\"],\n    flexibleDimensions: [\"cdkConnectedOverlayFlexibleDimensions\", \"flexibleDimensions\"],\n    growAfterOpen: [\"cdkConnectedOverlayGrowAfterOpen\", \"growAfterOpen\"],\n    push: [\"cdkConnectedOverlayPush\", \"push\"]\n  },\n  outputs: {\n    backdropClick: \"backdropClick\",\n    positionChange: \"positionChange\",\n    attach: \"attach\",\n    detach: \"detach\",\n    overlayKeydown: \"overlayKeydown\",\n    overlayOutsideClick: \"overlayOutsideClick\"\n  },\n  exportAs: [\"cdkConnectedOverlay\"],\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkConnectedOverlay, [{\n    type: Directive,\n    args: [{\n      selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n      exportAs: 'cdkConnectedOverlay'\n    }]\n  }], function () {\n    return [{\n      type: Overlay\n    }, {\n      type: i0.TemplateRef\n    }, {\n      type: i0.ViewContainerRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: i5.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    origin: [{\n      type: Input,\n      args: ['cdkConnectedOverlayOrigin']\n    }],\n    positions: [{\n      type: Input,\n      args: ['cdkConnectedOverlayPositions']\n    }],\n    positionStrategy: [{\n      type: Input,\n      args: ['cdkConnectedOverlayPositionStrategy']\n    }],\n    offsetX: [{\n      type: Input,\n      args: ['cdkConnectedOverlayOffsetX']\n    }],\n    offsetY: [{\n      type: Input,\n      args: ['cdkConnectedOverlayOffsetY']\n    }],\n    width: [{\n      type: Input,\n      args: ['cdkConnectedOverlayWidth']\n    }],\n    height: [{\n      type: Input,\n      args: ['cdkConnectedOverlayHeight']\n    }],\n    minWidth: [{\n      type: Input,\n      args: ['cdkConnectedOverlayMinWidth']\n    }],\n    minHeight: [{\n      type: Input,\n      args: ['cdkConnectedOverlayMinHeight']\n    }],\n    backdropClass: [{\n      type: Input,\n      args: ['cdkConnectedOverlayBackdropClass']\n    }],\n    panelClass: [{\n      type: Input,\n      args: ['cdkConnectedOverlayPanelClass']\n    }],\n    viewportMargin: [{\n      type: Input,\n      args: ['cdkConnectedOverlayViewportMargin']\n    }],\n    scrollStrategy: [{\n      type: Input,\n      args: ['cdkConnectedOverlayScrollStrategy']\n    }],\n    open: [{\n      type: Input,\n      args: ['cdkConnectedOverlayOpen']\n    }],\n    disableClose: [{\n      type: Input,\n      args: ['cdkConnectedOverlayDisableClose']\n    }],\n    transformOriginSelector: [{\n      type: Input,\n      args: ['cdkConnectedOverlayTransformOriginOn']\n    }],\n    hasBackdrop: [{\n      type: Input,\n      args: ['cdkConnectedOverlayHasBackdrop']\n    }],\n    lockPosition: [{\n      type: Input,\n      args: ['cdkConnectedOverlayLockPosition']\n    }],\n    flexibleDimensions: [{\n      type: Input,\n      args: ['cdkConnectedOverlayFlexibleDimensions']\n    }],\n    growAfterOpen: [{\n      type: Input,\n      args: ['cdkConnectedOverlayGrowAfterOpen']\n    }],\n    push: [{\n      type: Input,\n      args: ['cdkConnectedOverlayPush']\n    }],\n    backdropClick: [{\n      type: Output\n    }],\n    positionChange: [{\n      type: Output\n    }],\n    attach: [{\n      type: Output\n    }],\n    detach: [{\n      type: Output\n    }],\n    overlayKeydown: [{\n      type: Output\n    }],\n    overlayOutsideClick: [{\n      type: Output\n    }]\n  });\n})();\n/** @docs-private */\n\n\nfunction CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n  return function () {\n    return overlay.scrollStrategies.reposition();\n  };\n}\n/** @docs-private */\n\n\nvar CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n  provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar OverlayModule = /*#__PURE__*/_createClass(function OverlayModule() {\n  _classCallCheck(this, OverlayModule);\n});\n\nOverlayModule.ɵfac = function OverlayModule_Factory(t) {\n  return new (t || OverlayModule)();\n};\n\nOverlayModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: OverlayModule\n});\nOverlayModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER],\n  imports: [BidiModule, PortalModule, ScrollingModule, ScrollingModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(OverlayModule, [{\n    type: NgModule,\n    args: [{\n      imports: [BidiModule, PortalModule, ScrollingModule],\n      exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\n      declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\n      providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\n\n\nvar FullscreenOverlayContainer = /*#__PURE__*/function (_OverlayContainer) {\n  _inherits(FullscreenOverlayContainer, _OverlayContainer);\n\n  var _super3 = _createSuper(FullscreenOverlayContainer);\n\n  function FullscreenOverlayContainer(_document, platform) {\n    _classCallCheck(this, FullscreenOverlayContainer);\n\n    return _super3.call(this, _document, platform);\n  }\n\n  _createClass(FullscreenOverlayContainer, [{\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      _get(_getPrototypeOf(FullscreenOverlayContainer.prototype), \"ngOnDestroy\", this).call(this);\n\n      if (this._fullScreenEventName && this._fullScreenListener) {\n        this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n      }\n    }\n  }, {\n    key: \"_createContainer\",\n    value: function _createContainer() {\n      var _this20 = this;\n\n      _get(_getPrototypeOf(FullscreenOverlayContainer.prototype), \"_createContainer\", this).call(this);\n\n      this._adjustParentForFullscreenChange();\n\n      this._addFullscreenChangeListener(function () {\n        return _this20._adjustParentForFullscreenChange();\n      });\n    }\n  }, {\n    key: \"_adjustParentForFullscreenChange\",\n    value: function _adjustParentForFullscreenChange() {\n      if (!this._containerElement) {\n        return;\n      }\n\n      var fullscreenElement = this.getFullscreenElement();\n      var parent = fullscreenElement || this._document.body;\n      parent.appendChild(this._containerElement);\n    }\n  }, {\n    key: \"_addFullscreenChangeListener\",\n    value: function _addFullscreenChangeListener(fn) {\n      var eventName = this._getEventName();\n\n      if (eventName) {\n        if (this._fullScreenListener) {\n          this._document.removeEventListener(eventName, this._fullScreenListener);\n        }\n\n        this._document.addEventListener(eventName, fn);\n\n        this._fullScreenListener = fn;\n      }\n    }\n  }, {\n    key: \"_getEventName\",\n    value: function _getEventName() {\n      if (!this._fullScreenEventName) {\n        var _document = this._document;\n\n        if (_document.fullscreenEnabled) {\n          this._fullScreenEventName = 'fullscreenchange';\n        } else if (_document.webkitFullscreenEnabled) {\n          this._fullScreenEventName = 'webkitfullscreenchange';\n        } else if (_document.mozFullScreenEnabled) {\n          this._fullScreenEventName = 'mozfullscreenchange';\n        } else if (_document.msFullscreenEnabled) {\n          this._fullScreenEventName = 'MSFullscreenChange';\n        }\n      }\n\n      return this._fullScreenEventName;\n    }\n    /**\n     * When the page is put into fullscreen mode, a specific element is specified.\n     * Only that element and its children are visible when in fullscreen mode.\n     */\n\n  }, {\n    key: \"getFullscreenElement\",\n    value: function getFullscreenElement() {\n      var _document = this._document;\n      return _document.fullscreenElement || _document.webkitFullscreenElement || _document.mozFullScreenElement || _document.msFullscreenElement || null;\n    }\n  }]);\n\n  return FullscreenOverlayContainer;\n}(OverlayContainer);\n\nFullscreenOverlayContainer.ɵfac = function FullscreenOverlayContainer_Factory(t) {\n  return new (t || FullscreenOverlayContainer)(i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(i1$1.Platform));\n};\n\nFullscreenOverlayContainer.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: FullscreenOverlayContainer,\n  factory: FullscreenOverlayContainer.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FullscreenOverlayContainer, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: i1$1.Platform\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { BlockScrollStrategy, CdkConnectedOverlay, CdkOverlayOrigin, CloseScrollStrategy, ConnectedOverlayPositionChange, ConnectionPositionPair, FlexibleConnectedPositionStrategy, FullscreenOverlayContainer, GlobalPositionStrategy, NoopScrollStrategy, Overlay, OverlayConfig, OverlayContainer, OverlayKeyboardDispatcher, OverlayModule, OverlayOutsideClickDispatcher, OverlayPositionBuilder, OverlayRef, RepositionScrollStrategy, STANDARD_DROPDOWN_ADJACENT_POSITIONS, STANDARD_DROPDOWN_BELOW_POSITIONS, ScrollStrategyOptions, ScrollingVisibility, validateHorizontalPosition, validateVerticalPosition };","map":{"version":3,"names":["i1","ScrollingModule","CdkScrollable","ScrollDispatcher","ViewportRuler","i6","DOCUMENT","i0","Injectable","Inject","ElementRef","Optional","ApplicationRef","ANIMATION_MODULE_TYPE","InjectionToken","Directive","EventEmitter","Input","Output","NgModule","coerceCssPixelValue","coerceArray","coerceBooleanProperty","i1$1","supportsScrollBehavior","_isTestEnvironment","_getEventTarget","i5","BidiModule","DomPortalOutlet","TemplatePortal","PortalModule","Subject","Subscription","merge","take","takeUntil","takeWhile","ESCAPE","hasModifierKey","scrollBehaviorSupported","BlockScrollStrategy","_viewportRuler","document","_previousHTMLStyles","top","left","_isEnabled","_document","_canBeEnabled","root","documentElement","_previousScrollPosition","getViewportScrollPosition","style","classList","add","html","body","htmlStyle","bodyStyle","previousHtmlScrollBehavior","scrollBehavior","previousBodyScrollBehavior","remove","window","scroll","contains","viewport","getViewportSize","scrollHeight","height","scrollWidth","width","getMatScrollStrategyAlreadyAttachedError","Error","CloseScrollStrategy","_scrollDispatcher","_ngZone","_config","_scrollSubscription","_detach","disable","_overlayRef","hasAttached","run","detach","overlayRef","ngDevMode","stream","scrolled","threshold","_initialScrollPosition","subscribe","scrollPosition","Math","abs","updatePosition","unsubscribe","NoopScrollStrategy","isElementScrolledOutsideView","element","scrollContainers","some","containerBounds","outsideAbove","bottom","outsideBelow","outsideLeft","right","outsideRight","isElementClippedByScrolling","scrollContainerRect","clippedAbove","clippedBelow","clippedLeft","clippedRight","RepositionScrollStrategy","throttle","scrollThrottle","autoClose","overlayRect","overlayElement","getBoundingClientRect","parentRects","ScrollStrategyOptions","noop","close","config","block","reposition","ɵfac","NgZone","ɵprov","type","args","providedIn","undefined","decorators","OverlayConfig","scrollStrategy","panelClass","hasBackdrop","backdropClass","disposeOnNavigation","configKeys","Object","keys","key","ConnectionPositionPair","origin","overlay","offsetX","offsetY","originX","originY","overlayX","overlayY","ScrollingVisibility","ConnectedOverlayPositionChange","connectionPair","scrollableViewProperties","validateVerticalPosition","property","value","validateHorizontalPosition","OverlayRef","_portalOutlet","_host","_pane","_keyboardDispatcher","_location","_outsideClickDispatcher","_animationsDisabled","_backdropElement","_backdropClick","_attachments","_detachments","_locationChanges","EMPTY","_backdropClickHandler","event","next","_backdropTransitionendHandler","_disposeBackdrop","target","_keydownEvents","_outsidePointerEvents","_scrollStrategy","attach","_positionStrategy","positionStrategy","portal","parentElement","_previousHostParent","appendChild","attachResult","_updateStackingOrder","_updateElementSize","_updateElementDirection","enable","onStable","pipe","_togglePointerEvents","_attachBackdrop","_toggleClasses","dispose","onDestroy","runOutsideAngular","Promise","resolve","then","detachBackdrop","detachmentResult","_detachContentWhenStable","_a","isAttached","_disposeScrollStrategy","complete","apply","strategy","sizeConfig","assign","dir","direction","classes","setAttribute","getDirection","minWidth","minHeight","maxWidth","maxHeight","enablePointer","pointerEvents","showingClass","createElement","insertBefore","addEventListener","requestAnimationFrame","nextSibling","parentNode","backdropToDetach","_backdropTimeout","setTimeout","cssClasses","isAdd","filter","c","length","subscription","children","backdrop","removeEventListener","clearTimeout","OverlayContainer","_platform","_containerElement","_createContainer","containerClass","isBrowser","oppositePlatformContainers","querySelectorAll","i","container","Platform","boundingBoxClass","cssUnitPattern","FlexibleConnectedPositionStrategy","connectedTo","_overlayContainer","_lastBoundingBoxSize","_isPushed","_canPush","_growAfterOpen","_hasFlexibleDimensions","_positionLocked","_viewportMargin","_scrollables","_preferredPositions","_positionChanges","_resizeSubscription","_offsetX","_offsetY","_appliedPanelClasses","positionChanges","setOrigin","_validatePositions","hostElement","_boundingBox","_isDisposed","_isInitialRender","_lastPosition","change","reapplyLastPosition","_clearPanelClasses","_resetOverlayElementStyles","_resetBoundingBoxStyles","_viewportRect","_getNarrowedViewportRect","_originRect","_getOriginRect","_overlayRect","_containerRect","getContainerElement","originRect","viewportRect","containerRect","flexibleFits","fallback","pos","originPoint","_getOriginPoint","overlayPoint","_getOverlayPoint","overlayFit","_getOverlayFit","isCompletelyWithinViewport","_applyPosition","_canFitWithFlexibleDimensions","push","position","boundingBoxRect","_calculateBoundingBoxRect","visibleArea","bestFit","bestScore","fit","score","weight","_previousPushAmount","extendStyles","alignItems","justifyContent","lastPosition","scrollables","positions","indexOf","margin","flexibleDimensions","growAfterOpen","canPush","isLocked","_origin","offset","selector","_transformOriginSelector","x","startX","_isRtl","endX","y","overlayStartX","overlayStartY","point","rawOverlayRect","getRoundedBoundingClientRect","_getOffset","leftOverflow","rightOverflow","topOverflow","bottomOverflow","visibleWidth","_subtractOverflows","visibleHeight","fitsInViewportVertically","fitsInViewportHorizontally","availableHeight","availableWidth","getPixelValue","getConfig","verticalFit","horizontalFit","start","overflowRight","max","overflowBottom","overflowTop","overflowLeft","pushX","pushY","_setTransformOrigin","_setOverlayElementStyles","_setBoundingBoxStyles","_addPanelClasses","observers","_getScrollVisibility","changeEvent","elements","xOrigin","yOrigin","transformOrigin","isRtl","smallestDistanceToViewportEdge","min","previousHeight","isBoundedByRightViewportEdge","isBoundedByLeftViewportEdge","previousWidth","styles","_hasExactPosition","transform","hasExactPosition","hasFlexibleDimensions","_getExactOverlayY","_getExactOverlayX","transformString","trim","_pushOverlayOnScreen","documentHeight","clientHeight","horizontalStyleProperty","documentWidth","clientWidth","originBounds","overlayBounds","scrollContainerBounds","map","scrollable","getElementRef","nativeElement","isOriginClipped","isOriginOutsideView","isOverlayClipped","isOverlayOutsideView","overflows","reduce","currentValue","currentOverflow","axis","forEach","pair","cssClass","Element","destination","source","hasOwnProperty","input","split","units","parseFloat","clientRect","floor","STANDARD_DROPDOWN_BELOW_POSITIONS","STANDARD_DROPDOWN_ADJACENT_POSITIONS","wrapperClass","GlobalPositionStrategy","_cssPosition","_topOffset","_bottomOffset","_alignItems","_xPosition","_xOffset","_width","_height","updateSize","parentStyles","shouldBeFlushHorizontally","shouldBeFlushVertically","xPosition","xOffset","marginLeft","marginRight","marginTop","marginBottom","parent","OverlayPositionBuilder","BaseOverlayDispatcher","_attachedOverlays","index","splice","OverlayKeyboardDispatcher","_keydownListener","overlays","keydownEvents","_isAttached","OverlayOutsideClickDispatcher","_cursorStyleIsSet","_pointerDownListener","_pointerDownEventTarget","_clickListener","slice","outsidePointerEvents","_addEventListeners","IOS","_cursorOriginalValue","cursor","nextUniqueId","Overlay","scrollStrategies","_componentFactoryResolver","_positionBuilder","_injector","_directionality","_animationsModuleType","host","_createHostElement","pane","_createPaneElement","portalOutlet","_createPortalOutlet","overlayConfig","id","_appRef","get","ComponentFactoryResolver","Injector","Directionality","Location","defaultPositionList","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY","CdkOverlayOrigin","elementRef","ɵdir","exportAs","CdkConnectedOverlay","_overlay","templateRef","viewContainerRef","scrollStrategyFactory","_dir","_hasBackdrop","_lockPosition","_flexibleDimensions","_push","_backdropSubscription","_attachSubscription","_detachSubscription","_positionSubscription","viewportMargin","open","disableClose","backdropClick","positionChange","overlayKeydown","overlayOutsideClick","_templatePortal","_scrollStrategyFactory","_position","_updatePositionStrategy","changes","_attachOverlay","_detachOverlay","create","_buildConfig","attachments","emit","detachments","keyCode","preventDefault","_createPositionStrategy","currentPosition","_getFlexibleConnectedPositionStrategyOrigin","withPositions","withFlexibleDimensions","withPush","withGrowAfterOpen","withViewportMargin","withLockedPosition","lockPosition","withTransformOriginOn","transformOriginSelector","flexibleConnectedTo","_createOverlay","TemplateRef","ViewContainerRef","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","OverlayModule","ɵmod","ɵinj","imports","exports","declarations","providers","FullscreenOverlayContainer","platform","_fullScreenEventName","_fullScreenListener","_adjustParentForFullscreenChange","_addFullscreenChangeListener","fullscreenElement","getFullscreenElement","fn","eventName","_getEventName","fullscreenEnabled","webkitFullscreenEnabled","mozFullScreenEnabled","msFullscreenEnabled","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement"],"sources":["/Users/selim/repo/eryaz/angular/node_modules/@angular/cdk/fesm2015/overlay.mjs"],"sourcesContent":["import * as i1 from '@angular/cdk/scrolling';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nexport { CdkScrollable, ScrollDispatcher, ViewportRuler } from '@angular/cdk/scrolling';\nimport * as i6 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Inject, ElementRef, Optional, ApplicationRef, ANIMATION_MODULE_TYPE, InjectionToken, Directive, EventEmitter, Input, Output, NgModule } from '@angular/core';\nimport { coerceCssPixelValue, coerceArray, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i1$1 from '@angular/cdk/platform';\nimport { supportsScrollBehavior, _isTestEnvironment, _getEventTarget } from '@angular/cdk/platform';\nimport * as i5 from '@angular/cdk/bidi';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport { DomPortalOutlet, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { Subject, Subscription, merge } from 'rxjs';\nimport { take, takeUntil, takeWhile } from 'rxjs/operators';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst scrollBehaviorSupported = supportsScrollBehavior();\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nclass BlockScrollStrategy {\n    constructor(_viewportRuler, document) {\n        this._viewportRuler = _viewportRuler;\n        this._previousHTMLStyles = { top: '', left: '' };\n        this._isEnabled = false;\n        this._document = document;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach() { }\n    /** Blocks page-level scroll while the attached overlay is open. */\n    enable() {\n        if (this._canBeEnabled()) {\n            const root = this._document.documentElement;\n            this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n            // Cache the previous inline styles in case the user had set them.\n            this._previousHTMLStyles.left = root.style.left || '';\n            this._previousHTMLStyles.top = root.style.top || '';\n            // Note: we're using the `html` node, instead of the `body`, because the `body` may\n            // have the user agent margin, whereas the `html` is guaranteed not to have one.\n            root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n            root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n            root.classList.add('cdk-global-scrollblock');\n            this._isEnabled = true;\n        }\n    }\n    /** Unblocks page-level scroll while the attached overlay is open. */\n    disable() {\n        if (this._isEnabled) {\n            const html = this._document.documentElement;\n            const body = this._document.body;\n            const htmlStyle = html.style;\n            const bodyStyle = body.style;\n            const previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n            const previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n            this._isEnabled = false;\n            htmlStyle.left = this._previousHTMLStyles.left;\n            htmlStyle.top = this._previousHTMLStyles.top;\n            html.classList.remove('cdk-global-scrollblock');\n            // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n            // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n            // Note that we don't mutate the property if the browser doesn't support `scroll-behavior`,\n            // because it can throw off feature detections in `supportsScrollBehavior` which\n            // checks for `'scrollBehavior' in documentElement.style`.\n            if (scrollBehaviorSupported) {\n                htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n            }\n            window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n            if (scrollBehaviorSupported) {\n                htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n                bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n            }\n        }\n    }\n    _canBeEnabled() {\n        // Since the scroll strategies can't be singletons, we have to use a global CSS class\n        // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n        // scrolling multiple times.\n        const html = this._document.documentElement;\n        if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n            return false;\n        }\n        const body = this._document.body;\n        const viewport = this._viewportRuler.getViewportSize();\n        return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n */\nfunction getMatScrollStrategyAlreadyAttachedError() {\n    return Error(`Scroll strategy has already been attached.`);\n}\n\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nclass CloseScrollStrategy {\n    constructor(_scrollDispatcher, _ngZone, _viewportRuler, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._config = _config;\n        this._scrollSubscription = null;\n        /** Detaches the overlay ref and disables the scroll strategy. */\n        this._detach = () => {\n            this.disable();\n            if (this._overlayRef.hasAttached()) {\n                this._ngZone.run(() => this._overlayRef.detach());\n            }\n        };\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /** Enables the closing of the attached overlay on scroll. */\n    enable() {\n        if (this._scrollSubscription) {\n            return;\n        }\n        const stream = this._scrollDispatcher.scrolled(0);\n        if (this._config && this._config.threshold && this._config.threshold > 1) {\n            this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n            this._scrollSubscription = stream.subscribe(() => {\n                const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n                if (Math.abs(scrollPosition - this._initialScrollPosition) > this._config.threshold) {\n                    this._detach();\n                }\n                else {\n                    this._overlayRef.updatePosition();\n                }\n            });\n        }\n        else {\n            this._scrollSubscription = stream.subscribe(this._detach);\n        }\n    }\n    /** Disables the closing the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    detach() {\n        this.disable();\n        this._overlayRef = null;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Scroll strategy that doesn't do anything. */\nclass NoopScrollStrategy {\n    /** Does nothing, as this scroll strategy is a no-op. */\n    enable() { }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    disable() { }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    attach() { }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is scrolled out of view\n * @docs-private\n */\nfunction isElementScrolledOutsideView(element, scrollContainers) {\n    return scrollContainers.some(containerBounds => {\n        const outsideAbove = element.bottom < containerBounds.top;\n        const outsideBelow = element.top > containerBounds.bottom;\n        const outsideLeft = element.right < containerBounds.left;\n        const outsideRight = element.left > containerBounds.right;\n        return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n    });\n}\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is clipped\n * @docs-private\n */\nfunction isElementClippedByScrolling(element, scrollContainers) {\n    return scrollContainers.some(scrollContainerRect => {\n        const clippedAbove = element.top < scrollContainerRect.top;\n        const clippedBelow = element.bottom > scrollContainerRect.bottom;\n        const clippedLeft = element.left < scrollContainerRect.left;\n        const clippedRight = element.right > scrollContainerRect.right;\n        return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n    });\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nclass RepositionScrollStrategy {\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        this._config = _config;\n        this._scrollSubscription = null;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /** Enables repositioning of the attached overlay on scroll. */\n    enable() {\n        if (!this._scrollSubscription) {\n            const throttle = this._config ? this._config.scrollThrottle : 0;\n            this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\n                this._overlayRef.updatePosition();\n                // TODO(crisbeto): make `close` on by default once all components can handle it.\n                if (this._config && this._config.autoClose) {\n                    const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n                    const { width, height } = this._viewportRuler.getViewportSize();\n                    // TODO(crisbeto): include all ancestor scroll containers here once\n                    // we have a way of exposing the trigger element to the scroll strategy.\n                    const parentRects = [{ width, height, bottom: height, right: width, top: 0, left: 0 }];\n                    if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n                        this.disable();\n                        this._ngZone.run(() => this._overlayRef.detach());\n                    }\n                }\n            });\n        }\n    }\n    /** Disables repositioning of the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    detach() {\n        this.disable();\n        this._overlayRef = null;\n    }\n}\n\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\nclass ScrollStrategyOptions {\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, document) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        /** Do nothing on scroll. */\n        this.noop = () => new NoopScrollStrategy();\n        /**\n         * Close the overlay as soon as the user scrolls.\n         * @param config Configuration to be used inside the scroll strategy.\n         */\n        this.close = (config) => new CloseScrollStrategy(this._scrollDispatcher, this._ngZone, this._viewportRuler, config);\n        /** Block scrolling. */\n        this.block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\n        /**\n         * Update the overlay's position on scroll.\n         * @param config Configuration to be used inside the scroll strategy.\n         * Allows debouncing the reposition calls.\n         */\n        this.reposition = (config) => new RepositionScrollStrategy(this._scrollDispatcher, this._viewportRuler, this._ngZone, config);\n        this._document = document;\n    }\n}\nScrollStrategyOptions.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: ScrollStrategyOptions, deps: [{ token: i1.ScrollDispatcher }, { token: i1.ViewportRuler }, { token: i0.NgZone }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nScrollStrategyOptions.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: ScrollStrategyOptions, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: ScrollStrategyOptions, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: i1.ScrollDispatcher }, { type: i1.ViewportRuler }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Initial configuration used when creating an overlay. */\nclass OverlayConfig {\n    constructor(config) {\n        /** Strategy to be used when handling scroll events while the overlay is open. */\n        this.scrollStrategy = new NoopScrollStrategy();\n        /** Custom class to add to the overlay pane. */\n        this.panelClass = '';\n        /** Whether the overlay has a backdrop. */\n        this.hasBackdrop = false;\n        /** Custom class to add to the backdrop */\n        this.backdropClass = 'cdk-overlay-dark-backdrop';\n        /**\n         * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.disposeOnNavigation = false;\n        if (config) {\n            // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n            // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n            // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n            const configKeys = Object.keys(config);\n            for (const key of configKeys) {\n                if (config[key] !== undefined) {\n                    // TypeScript, as of version 3.5, sees the left-hand-side of this expression\n                    // as \"I don't know *which* key this is, so the only valid value is the intersection\n                    // of all the possible values.\" In this case, that happens to be `undefined`. TypeScript\n                    // is not smart enough to see that the right-hand-side is actually an access of the same\n                    // exact type with the same exact key, meaning that the value type must be identical.\n                    // So we use `any` to work around this.\n                    this[key] = config[key];\n                }\n            }\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The points of the origin element and the overlay element to connect. */\nclass ConnectionPositionPair {\n    constructor(origin, overlay, \n    /** Offset along the X axis. */\n    offsetX, \n    /** Offset along the Y axis. */\n    offsetY, \n    /** Class(es) to be applied to the panel while this position is active. */\n    panelClass) {\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n        this.panelClass = panelClass;\n        this.originX = origin.originX;\n        this.originY = origin.originY;\n        this.overlayX = overlay.overlayX;\n        this.overlayY = overlay.overlayY;\n    }\n}\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n *  @docs-private\n */\nclass ScrollingVisibility {\n}\n/** The change event emitted by the strategy when a fallback position is used. */\nclass ConnectedOverlayPositionChange {\n    constructor(\n    /** The position used as a result of this change. */\n    connectionPair, \n    /** @docs-private */\n    scrollableViewProperties) {\n        this.connectionPair = connectionPair;\n        this.scrollableViewProperties = scrollableViewProperties;\n    }\n}\n/**\n * Validates whether a vertical position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateVerticalPosition(property, value) {\n    if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"top\", \"bottom\" or \"center\".`);\n    }\n}\n/**\n * Validates whether a horizontal position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateHorizontalPosition(property, value) {\n    if (value !== 'start' && value !== 'end' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"start\", \"end\" or \"center\".`);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nclass OverlayRef {\n    constructor(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document, _location, _outsideClickDispatcher, _animationsDisabled = false) {\n        this._portalOutlet = _portalOutlet;\n        this._host = _host;\n        this._pane = _pane;\n        this._config = _config;\n        this._ngZone = _ngZone;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._document = _document;\n        this._location = _location;\n        this._outsideClickDispatcher = _outsideClickDispatcher;\n        this._animationsDisabled = _animationsDisabled;\n        this._backdropElement = null;\n        this._backdropClick = new Subject();\n        this._attachments = new Subject();\n        this._detachments = new Subject();\n        this._locationChanges = Subscription.EMPTY;\n        this._backdropClickHandler = (event) => this._backdropClick.next(event);\n        this._backdropTransitionendHandler = (event) => {\n            this._disposeBackdrop(event.target);\n        };\n        /** Stream of keydown events dispatched to this overlay. */\n        this._keydownEvents = new Subject();\n        /** Stream of mouse outside events dispatched to this overlay. */\n        this._outsidePointerEvents = new Subject();\n        if (_config.scrollStrategy) {\n            this._scrollStrategy = _config.scrollStrategy;\n            this._scrollStrategy.attach(this);\n        }\n        this._positionStrategy = _config.positionStrategy;\n    }\n    /** The overlay's HTML element */\n    get overlayElement() {\n        return this._pane;\n    }\n    /** The overlay's backdrop HTML element. */\n    get backdropElement() {\n        return this._backdropElement;\n    }\n    /**\n     * Wrapper around the panel element. Can be used for advanced\n     * positioning where a wrapper with specific styling is\n     * required around the overlay pane.\n     */\n    get hostElement() {\n        return this._host;\n    }\n    /**\n     * Attaches content, given via a Portal, to the overlay.\n     * If the overlay is configured to have a backdrop, it will be created.\n     *\n     * @param portal Portal instance to which to attach the overlay.\n     * @returns The portal attachment result.\n     */\n    attach(portal) {\n        // Insert the host into the DOM before attaching the portal, otherwise\n        // the animations module will skip animations on repeat attachments.\n        if (!this._host.parentElement && this._previousHostParent) {\n            this._previousHostParent.appendChild(this._host);\n        }\n        const attachResult = this._portalOutlet.attach(portal);\n        if (this._positionStrategy) {\n            this._positionStrategy.attach(this);\n        }\n        this._updateStackingOrder();\n        this._updateElementSize();\n        this._updateElementDirection();\n        if (this._scrollStrategy) {\n            this._scrollStrategy.enable();\n        }\n        // Update the position once the zone is stable so that the overlay will be fully rendered\n        // before attempting to position it, as the position may depend on the size of the rendered\n        // content.\n        this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n            // The overlay could've been detached before the zone has stabilized.\n            if (this.hasAttached()) {\n                this.updatePosition();\n            }\n        });\n        // Enable pointer events for the overlay pane element.\n        this._togglePointerEvents(true);\n        if (this._config.hasBackdrop) {\n            this._attachBackdrop();\n        }\n        if (this._config.panelClass) {\n            this._toggleClasses(this._pane, this._config.panelClass, true);\n        }\n        // Only emit the `attachments` event once all other setup is done.\n        this._attachments.next();\n        // Track this overlay by the keyboard dispatcher\n        this._keyboardDispatcher.add(this);\n        if (this._config.disposeOnNavigation) {\n            this._locationChanges = this._location.subscribe(() => this.dispose());\n        }\n        this._outsideClickDispatcher.add(this);\n        // TODO(crisbeto): the null check is here, because the portal outlet returns `any`.\n        // We should be guaranteed for the result to be `ComponentRef | EmbeddedViewRef`, but\n        // `instanceof EmbeddedViewRef` doesn't appear to work at the moment.\n        if (typeof (attachResult === null || attachResult === void 0 ? void 0 : attachResult.onDestroy) === 'function') {\n            // In most cases we control the portal and we know when it is being detached so that\n            // we can finish the disposal process. The exception is if the user passes in a custom\n            // `ViewContainerRef` that isn't destroyed through the overlay API. Note that we use\n            // `detach` here instead of `dispose`, because we don't know if the user intends to\n            // reattach the overlay at a later point. It also has the advantage of waiting for animations.\n            attachResult.onDestroy(() => {\n                if (this.hasAttached()) {\n                    // We have to delay the `detach` call, because detaching immediately prevents\n                    // other destroy hooks from running. This is likely a framework bug similar to\n                    // https://github.com/angular/angular/issues/46119\n                    this._ngZone.runOutsideAngular(() => Promise.resolve().then(() => this.detach()));\n                }\n            });\n        }\n        return attachResult;\n    }\n    /**\n     * Detaches an overlay from a portal.\n     * @returns The portal detachment result.\n     */\n    detach() {\n        if (!this.hasAttached()) {\n            return;\n        }\n        this.detachBackdrop();\n        // When the overlay is detached, the pane element should disable pointer events.\n        // This is necessary because otherwise the pane element will cover the page and disable\n        // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n        this._togglePointerEvents(false);\n        if (this._positionStrategy && this._positionStrategy.detach) {\n            this._positionStrategy.detach();\n        }\n        if (this._scrollStrategy) {\n            this._scrollStrategy.disable();\n        }\n        const detachmentResult = this._portalOutlet.detach();\n        // Only emit after everything is detached.\n        this._detachments.next();\n        // Remove this overlay from keyboard dispatcher tracking.\n        this._keyboardDispatcher.remove(this);\n        // Keeping the host element in the DOM can cause scroll jank, because it still gets\n        // rendered, even though it's transparent and unclickable which is why we remove it.\n        this._detachContentWhenStable();\n        this._locationChanges.unsubscribe();\n        this._outsideClickDispatcher.remove(this);\n        return detachmentResult;\n    }\n    /** Cleans up the overlay from the DOM. */\n    dispose() {\n        var _a;\n        const isAttached = this.hasAttached();\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._disposeScrollStrategy();\n        this._disposeBackdrop(this._backdropElement);\n        this._locationChanges.unsubscribe();\n        this._keyboardDispatcher.remove(this);\n        this._portalOutlet.dispose();\n        this._attachments.complete();\n        this._backdropClick.complete();\n        this._keydownEvents.complete();\n        this._outsidePointerEvents.complete();\n        this._outsideClickDispatcher.remove(this);\n        (_a = this._host) === null || _a === void 0 ? void 0 : _a.remove();\n        this._previousHostParent = this._pane = this._host = null;\n        if (isAttached) {\n            this._detachments.next();\n        }\n        this._detachments.complete();\n    }\n    /** Whether the overlay has attached content. */\n    hasAttached() {\n        return this._portalOutlet.hasAttached();\n    }\n    /** Gets an observable that emits when the backdrop has been clicked. */\n    backdropClick() {\n        return this._backdropClick;\n    }\n    /** Gets an observable that emits when the overlay has been attached. */\n    attachments() {\n        return this._attachments;\n    }\n    /** Gets an observable that emits when the overlay has been detached. */\n    detachments() {\n        return this._detachments;\n    }\n    /** Gets an observable of keydown events targeted to this overlay. */\n    keydownEvents() {\n        return this._keydownEvents;\n    }\n    /** Gets an observable of pointer events targeted outside this overlay. */\n    outsidePointerEvents() {\n        return this._outsidePointerEvents;\n    }\n    /** Gets the current overlay configuration, which is immutable. */\n    getConfig() {\n        return this._config;\n    }\n    /** Updates the position of the overlay based on the position strategy. */\n    updatePosition() {\n        if (this._positionStrategy) {\n            this._positionStrategy.apply();\n        }\n    }\n    /** Switches to a new position strategy and updates the overlay position. */\n    updatePositionStrategy(strategy) {\n        if (strategy === this._positionStrategy) {\n            return;\n        }\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._positionStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            this.updatePosition();\n        }\n    }\n    /** Update the size properties of the overlay. */\n    updateSize(sizeConfig) {\n        this._config = Object.assign(Object.assign({}, this._config), sizeConfig);\n        this._updateElementSize();\n    }\n    /** Sets the LTR/RTL direction for the overlay. */\n    setDirection(dir) {\n        this._config = Object.assign(Object.assign({}, this._config), { direction: dir });\n        this._updateElementDirection();\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, true);\n        }\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, false);\n        }\n    }\n    /**\n     * Returns the layout direction of the overlay panel.\n     */\n    getDirection() {\n        const direction = this._config.direction;\n        if (!direction) {\n            return 'ltr';\n        }\n        return typeof direction === 'string' ? direction : direction.value;\n    }\n    /** Switches to a new scroll strategy. */\n    updateScrollStrategy(strategy) {\n        if (strategy === this._scrollStrategy) {\n            return;\n        }\n        this._disposeScrollStrategy();\n        this._scrollStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            strategy.enable();\n        }\n    }\n    /** Updates the text direction of the overlay panel. */\n    _updateElementDirection() {\n        this._host.setAttribute('dir', this.getDirection());\n    }\n    /** Updates the size of the overlay element based on the overlay config. */\n    _updateElementSize() {\n        if (!this._pane) {\n            return;\n        }\n        const style = this._pane.style;\n        style.width = coerceCssPixelValue(this._config.width);\n        style.height = coerceCssPixelValue(this._config.height);\n        style.minWidth = coerceCssPixelValue(this._config.minWidth);\n        style.minHeight = coerceCssPixelValue(this._config.minHeight);\n        style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n        style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n    }\n    /** Toggles the pointer events for the overlay pane element. */\n    _togglePointerEvents(enablePointer) {\n        this._pane.style.pointerEvents = enablePointer ? '' : 'none';\n    }\n    /** Attaches a backdrop for this overlay. */\n    _attachBackdrop() {\n        const showingClass = 'cdk-overlay-backdrop-showing';\n        this._backdropElement = this._document.createElement('div');\n        this._backdropElement.classList.add('cdk-overlay-backdrop');\n        if (this._animationsDisabled) {\n            this._backdropElement.classList.add('cdk-overlay-backdrop-noop-animation');\n        }\n        if (this._config.backdropClass) {\n            this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n        }\n        // Insert the backdrop before the pane in the DOM order,\n        // in order to handle stacked overlays properly.\n        this._host.parentElement.insertBefore(this._backdropElement, this._host);\n        // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n        // action desired when such a click occurs (usually closing the overlay).\n        this._backdropElement.addEventListener('click', this._backdropClickHandler);\n        // Add class to fade-in the backdrop after one frame.\n        if (!this._animationsDisabled && typeof requestAnimationFrame !== 'undefined') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    if (this._backdropElement) {\n                        this._backdropElement.classList.add(showingClass);\n                    }\n                });\n            });\n        }\n        else {\n            this._backdropElement.classList.add(showingClass);\n        }\n    }\n    /**\n     * Updates the stacking order of the element, moving it to the top if necessary.\n     * This is required in cases where one overlay was detached, while another one,\n     * that should be behind it, was destroyed. The next time both of them are opened,\n     * the stacking will be wrong, because the detached element's pane will still be\n     * in its original DOM position.\n     */\n    _updateStackingOrder() {\n        if (this._host.nextSibling) {\n            this._host.parentNode.appendChild(this._host);\n        }\n    }\n    /** Detaches the backdrop (if any) associated with the overlay. */\n    detachBackdrop() {\n        const backdropToDetach = this._backdropElement;\n        if (!backdropToDetach) {\n            return;\n        }\n        if (this._animationsDisabled) {\n            this._disposeBackdrop(backdropToDetach);\n            return;\n        }\n        backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n        this._ngZone.runOutsideAngular(() => {\n            backdropToDetach.addEventListener('transitionend', this._backdropTransitionendHandler);\n        });\n        // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n        // In this case we make it unclickable and we try to remove it after a delay.\n        backdropToDetach.style.pointerEvents = 'none';\n        // Run this outside the Angular zone because there's nothing that Angular cares about.\n        // If it were to run inside the Angular zone, every test that used Overlay would have to be\n        // either async or fakeAsync.\n        this._backdropTimeout = this._ngZone.runOutsideAngular(() => setTimeout(() => {\n            this._disposeBackdrop(backdropToDetach);\n        }, 500));\n    }\n    /** Toggles a single CSS class or an array of classes on an element. */\n    _toggleClasses(element, cssClasses, isAdd) {\n        const classes = coerceArray(cssClasses || []).filter(c => !!c);\n        if (classes.length) {\n            isAdd ? element.classList.add(...classes) : element.classList.remove(...classes);\n        }\n    }\n    /** Detaches the overlay content next time the zone stabilizes. */\n    _detachContentWhenStable() {\n        // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n        // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n        // be patched to run inside the zone, which will throw us into an infinite loop.\n        this._ngZone.runOutsideAngular(() => {\n            // We can't remove the host here immediately, because the overlay pane's content\n            // might still be animating. This stream helps us avoid interrupting the animation\n            // by waiting for the pane to become empty.\n            const subscription = this._ngZone.onStable\n                .pipe(takeUntil(merge(this._attachments, this._detachments)))\n                .subscribe(() => {\n                // Needs a couple of checks for the pane and host, because\n                // they may have been removed by the time the zone stabilizes.\n                if (!this._pane || !this._host || this._pane.children.length === 0) {\n                    if (this._pane && this._config.panelClass) {\n                        this._toggleClasses(this._pane, this._config.panelClass, false);\n                    }\n                    if (this._host && this._host.parentElement) {\n                        this._previousHostParent = this._host.parentElement;\n                        this._host.remove();\n                    }\n                    subscription.unsubscribe();\n                }\n            });\n        });\n    }\n    /** Disposes of a scroll strategy. */\n    _disposeScrollStrategy() {\n        const scrollStrategy = this._scrollStrategy;\n        if (scrollStrategy) {\n            scrollStrategy.disable();\n            if (scrollStrategy.detach) {\n                scrollStrategy.detach();\n            }\n        }\n    }\n    /** Removes a backdrop element from the DOM. */\n    _disposeBackdrop(backdrop) {\n        if (backdrop) {\n            backdrop.removeEventListener('click', this._backdropClickHandler);\n            backdrop.removeEventListener('transitionend', this._backdropTransitionendHandler);\n            backdrop.remove();\n            // It is possible that a new portal has been attached to this overlay since we started\n            // removing the backdrop. If that is the case, only clear the backdrop reference if it\n            // is still the same instance that we started to remove.\n            if (this._backdropElement === backdrop) {\n                this._backdropElement = null;\n            }\n        }\n        if (this._backdropTimeout) {\n            clearTimeout(this._backdropTimeout);\n            this._backdropTimeout = undefined;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Container inside which all overlays will render. */\nclass OverlayContainer {\n    constructor(document, _platform) {\n        this._platform = _platform;\n        this._document = document;\n    }\n    ngOnDestroy() {\n        var _a;\n        (_a = this._containerElement) === null || _a === void 0 ? void 0 : _a.remove();\n    }\n    /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time it is called to facilitate using\n     * the container in non-browser environments.\n     * @returns the container element\n     */\n    getContainerElement() {\n        if (!this._containerElement) {\n            this._createContainer();\n        }\n        return this._containerElement;\n    }\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body.\n     */\n    _createContainer() {\n        const containerClass = 'cdk-overlay-container';\n        // TODO(crisbeto): remove the testing check once we have an overlay testing\n        // module or Angular starts tearing down the testing `NgModule`. See:\n        // https://github.com/angular/angular/issues/18831\n        if (this._platform.isBrowser || _isTestEnvironment()) {\n            const oppositePlatformContainers = this._document.querySelectorAll(`.${containerClass}[platform=\"server\"], ` + `.${containerClass}[platform=\"test\"]`);\n            // Remove any old containers from the opposite platform.\n            // This can happen when transitioning from the server to the client.\n            for (let i = 0; i < oppositePlatformContainers.length; i++) {\n                oppositePlatformContainers[i].remove();\n            }\n        }\n        const container = this._document.createElement('div');\n        container.classList.add(containerClass);\n        // A long time ago we kept adding new overlay containers whenever a new app was instantiated,\n        // but at some point we added logic which clears the duplicate ones in order to avoid leaks.\n        // The new logic was a little too aggressive since it was breaking some legitimate use cases.\n        // To mitigate the problem we made it so that only containers from a different platform are\n        // cleared, but the side-effect was that people started depending on the overly-aggressive\n        // logic to clean up their tests for them. Until we can introduce an overlay-specific testing\n        // module which does the cleanup, we try to detect that we're in a test environment and we\n        // always clear the container. See #17006.\n        // TODO(crisbeto): remove the test environment check once we have an overlay testing module.\n        if (_isTestEnvironment()) {\n            container.setAttribute('platform', 'test');\n        }\n        else if (!this._platform.isBrowser) {\n            container.setAttribute('platform', 'server');\n        }\n        this._document.body.appendChild(container);\n        this._containerElement = container;\n    }\n}\nOverlayContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: OverlayContainer, deps: [{ token: DOCUMENT }, { token: i1$1.Platform }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayContainer.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: OverlayContainer, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: OverlayContainer, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i1$1.Platform }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n/** Class to be added to the overlay bounding box. */\nconst boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n/** Regex used to split a string on its CSS units. */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nclass FlexibleConnectedPositionStrategy {\n    constructor(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n        /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\n        this._lastBoundingBoxSize = { width: 0, height: 0 };\n        /** Whether the overlay was pushed in a previous positioning. */\n        this._isPushed = false;\n        /** Whether the overlay can be pushed on-screen on the initial open. */\n        this._canPush = true;\n        /** Whether the overlay can grow via flexible width/height after the initial open. */\n        this._growAfterOpen = false;\n        /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n        this._hasFlexibleDimensions = true;\n        /** Whether the overlay position is locked. */\n        this._positionLocked = false;\n        /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\n        this._viewportMargin = 0;\n        /** The Scrollable containers used to check scrollable view properties on position change. */\n        this._scrollables = [];\n        /** Ordered list of preferred positions, from most to least desirable. */\n        this._preferredPositions = [];\n        /** Subject that emits whenever the position changes. */\n        this._positionChanges = new Subject();\n        /** Subscription to viewport size changes. */\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Default offset for the overlay along the x axis. */\n        this._offsetX = 0;\n        /** Default offset for the overlay along the y axis. */\n        this._offsetY = 0;\n        /** Keeps track of the CSS classes that the position strategy has applied on the overlay panel. */\n        this._appliedPanelClasses = [];\n        /** Observable sequence of position changes. */\n        this.positionChanges = this._positionChanges;\n        this.setOrigin(connectedTo);\n    }\n    /** Ordered list of preferred positions, from most to least desirable. */\n    get positions() {\n        return this._preferredPositions;\n    }\n    /** Attaches this position strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef &&\n            overlayRef !== this._overlayRef &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('This position strategy is already attached to an overlay');\n        }\n        this._validatePositions();\n        overlayRef.hostElement.classList.add(boundingBoxClass);\n        this._overlayRef = overlayRef;\n        this._boundingBox = overlayRef.hostElement;\n        this._pane = overlayRef.overlayElement;\n        this._isDisposed = false;\n        this._isInitialRender = true;\n        this._lastPosition = null;\n        this._resizeSubscription.unsubscribe();\n        this._resizeSubscription = this._viewportRuler.change().subscribe(() => {\n            // When the window is resized, we want to trigger the next reposition as if it\n            // was an initial render, in order for the strategy to pick a new optimal position,\n            // otherwise position locking will cause it to stay at the old one.\n            this._isInitialRender = true;\n            this.apply();\n        });\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin best fits on-screen.\n     *\n     * The selection of a position goes as follows:\n     *  - If any positions fit completely within the viewport as-is,\n     *      choose the first position that does so.\n     *  - If flexible dimensions are enabled and at least one satisfies the given minimum width/height,\n     *      choose the position with the greatest available size modified by the positions' weight.\n     *  - If pushing is enabled, take the position that went off-screen the least and push it\n     *      on-screen.\n     *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n     * @docs-private\n     */\n    apply() {\n        // We shouldn't do anything if the strategy was disposed or we're on the server.\n        if (this._isDisposed || !this._platform.isBrowser) {\n            return;\n        }\n        // If the position has been applied already (e.g. when the overlay was opened) and the\n        // consumer opted into locking in the position, re-use the old position, in order to\n        // prevent the overlay from jumping around.\n        if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n            this.reapplyLastPosition();\n            return;\n        }\n        this._clearPanelClasses();\n        this._resetOverlayElementStyles();\n        this._resetBoundingBoxStyles();\n        // We need the bounding rects for the origin, the overlay and the container to determine how to position\n        // the overlay relative to the origin.\n        // We use the viewport rect to determine whether a position would go off-screen.\n        this._viewportRect = this._getNarrowedViewportRect();\n        this._originRect = this._getOriginRect();\n        this._overlayRect = this._pane.getBoundingClientRect();\n        this._containerRect = this._overlayContainer.getContainerElement().getBoundingClientRect();\n        const originRect = this._originRect;\n        const overlayRect = this._overlayRect;\n        const viewportRect = this._viewportRect;\n        const containerRect = this._containerRect;\n        // Positions where the overlay will fit with flexible dimensions.\n        const flexibleFits = [];\n        // Fallback if none of the preferred positions fit within the viewport.\n        let fallback;\n        // Go through each of the preferred positions looking for a good fit.\n        // If a good fit is found, it will be applied immediately.\n        for (let pos of this._preferredPositions) {\n            // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n            let originPoint = this._getOriginPoint(originRect, containerRect, pos);\n            // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n            // overlay in this position. We use the top-left corner for calculations and later translate\n            // this into an appropriate (top, left, bottom, right) style.\n            let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n            // Calculate how well the overlay would fit into the viewport with this point.\n            let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n            // If the overlay, without any further work, fits into the viewport, use this position.\n            if (overlayFit.isCompletelyWithinViewport) {\n                this._isPushed = false;\n                this._applyPosition(pos, originPoint);\n                return;\n            }\n            // If the overlay has flexible dimensions, we can use this position\n            // so long as there's enough space for the minimum dimensions.\n            if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n                // Save positions where the overlay will fit with flexible dimensions. We will use these\n                // if none of the positions fit *without* flexible dimensions.\n                flexibleFits.push({\n                    position: pos,\n                    origin: originPoint,\n                    overlayRect,\n                    boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos),\n                });\n                continue;\n            }\n            // If the current preferred position does not fit on the screen, remember the position\n            // if it has more visible area on-screen than we've seen and move onto the next preferred\n            // position.\n            if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n                fallback = { overlayFit, overlayPoint, originPoint, position: pos, overlayRect };\n            }\n        }\n        // If there are any positions where the overlay would fit with flexible dimensions, choose the\n        // one that has the greatest area available modified by the position's weight\n        if (flexibleFits.length) {\n            let bestFit = null;\n            let bestScore = -1;\n            for (const fit of flexibleFits) {\n                const score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n                if (score > bestScore) {\n                    bestScore = score;\n                    bestFit = fit;\n                }\n            }\n            this._isPushed = false;\n            this._applyPosition(bestFit.position, bestFit.origin);\n            return;\n        }\n        // When none of the preferred positions fit within the viewport, take the position\n        // that went off-screen the least and attempt to push it on-screen.\n        if (this._canPush) {\n            // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n            this._isPushed = true;\n            this._applyPosition(fallback.position, fallback.originPoint);\n            return;\n        }\n        // All options for getting the overlay within the viewport have been exhausted, so go with the\n        // position that went off-screen the least.\n        this._applyPosition(fallback.position, fallback.originPoint);\n    }\n    detach() {\n        this._clearPanelClasses();\n        this._lastPosition = null;\n        this._previousPushAmount = null;\n        this._resizeSubscription.unsubscribe();\n    }\n    /** Cleanup after the element gets destroyed. */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        // We can't use `_resetBoundingBoxStyles` here, because it resets\n        // some properties to zero, rather than removing them.\n        if (this._boundingBox) {\n            extendStyles(this._boundingBox.style, {\n                top: '',\n                left: '',\n                right: '',\n                bottom: '',\n                height: '',\n                width: '',\n                alignItems: '',\n                justifyContent: '',\n            });\n        }\n        if (this._pane) {\n            this._resetOverlayElementStyles();\n        }\n        if (this._overlayRef) {\n            this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n        }\n        this.detach();\n        this._positionChanges.complete();\n        this._overlayRef = this._boundingBox = null;\n        this._isDisposed = true;\n    }\n    /**\n     * This re-aligns the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     */\n    reapplyLastPosition() {\n        if (this._isDisposed || !this._platform.isBrowser) {\n            return;\n        }\n        const lastPosition = this._lastPosition;\n        if (lastPosition) {\n            this._originRect = this._getOriginRect();\n            this._overlayRect = this._pane.getBoundingClientRect();\n            this._viewportRect = this._getNarrowedViewportRect();\n            this._containerRect = this._overlayContainer.getContainerElement().getBoundingClientRect();\n            const originPoint = this._getOriginPoint(this._originRect, this._containerRect, lastPosition);\n            this._applyPosition(lastPosition, originPoint);\n        }\n        else {\n            this.apply();\n        }\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     */\n    withScrollableContainers(scrollables) {\n        this._scrollables = scrollables;\n        return this;\n    }\n    /**\n     * Adds new preferred positions.\n     * @param positions List of positions options for this overlay.\n     */\n    withPositions(positions) {\n        this._preferredPositions = positions;\n        // If the last calculated position object isn't part of the positions anymore, clear\n        // it in order to avoid it being picked up if the consumer tries to re-apply.\n        if (positions.indexOf(this._lastPosition) === -1) {\n            this._lastPosition = null;\n        }\n        this._validatePositions();\n        return this;\n    }\n    /**\n     * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n     * @param margin Required margin between the overlay and the viewport edge in pixels.\n     */\n    withViewportMargin(margin) {\n        this._viewportMargin = margin;\n        return this;\n    }\n    /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n    withFlexibleDimensions(flexibleDimensions = true) {\n        this._hasFlexibleDimensions = flexibleDimensions;\n        return this;\n    }\n    /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n    withGrowAfterOpen(growAfterOpen = true) {\n        this._growAfterOpen = growAfterOpen;\n        return this;\n    }\n    /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    withPush(canPush = true) {\n        this._canPush = canPush;\n        return this;\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param isLocked Whether the overlay should locked in.\n     */\n    withLockedPosition(isLocked = true) {\n        this._positionLocked = isLocked;\n        return this;\n    }\n    /**\n     * Sets the origin, relative to which to position the overlay.\n     * Using an element origin is useful for building components that need to be positioned\n     * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be\n     * used for cases like contextual menus which open relative to the user's pointer.\n     * @param origin Reference to the new origin.\n     */\n    setOrigin(origin) {\n        this._origin = origin;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the x-axis.\n     * @param offset New offset in the X axis.\n     */\n    withDefaultOffsetX(offset) {\n        this._offsetX = offset;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the y-axis.\n     * @param offset New offset in the Y axis.\n     */\n    withDefaultOffsetY(offset) {\n        this._offsetY = offset;\n        return this;\n    }\n    /**\n     * Configures that the position strategy should set a `transform-origin` on some elements\n     * inside the overlay, depending on the current position that is being applied. This is\n     * useful for the cases where the origin of an animation can change depending on the\n     * alignment of the overlay.\n     * @param selector CSS selector that will be used to find the target\n     *    elements onto which to set the transform origin.\n     */\n    withTransformOriginOn(selector) {\n        this._transformOriginSelector = selector;\n        return this;\n    }\n    /**\n     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n     */\n    _getOriginPoint(originRect, containerRect, pos) {\n        let x;\n        if (pos.originX == 'center') {\n            // Note: when centering we should always use the `left`\n            // offset, otherwise the position will be wrong in RTL.\n            x = originRect.left + originRect.width / 2;\n        }\n        else {\n            const startX = this._isRtl() ? originRect.right : originRect.left;\n            const endX = this._isRtl() ? originRect.left : originRect.right;\n            x = pos.originX == 'start' ? startX : endX;\n        }\n        // When zooming in Safari the container rectangle contains negative values for the position\n        // and we need to re-add them to the calculated coordinates.\n        if (containerRect.left < 0) {\n            x -= containerRect.left;\n        }\n        let y;\n        if (pos.originY == 'center') {\n            y = originRect.top + originRect.height / 2;\n        }\n        else {\n            y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n        }\n        // Normally the containerRect's top value would be zero, however when the overlay is attached to an input\n        // (e.g. in an autocomplete), mobile browsers will shift everything in order to put the input in the middle\n        // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n        // otherwise our positioning will be thrown off.\n        // Additionally, when zooming in Safari this fixes the vertical position.\n        if (containerRect.top < 0) {\n            y -= containerRect.top;\n        }\n        return { x, y };\n    }\n    /**\n     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n     * origin point to which the overlay should be connected.\n     */\n    _getOverlayPoint(originPoint, overlayRect, pos) {\n        // Calculate the (overlayStartX, overlayStartY), the start of the\n        // potential overlay position relative to the origin point.\n        let overlayStartX;\n        if (pos.overlayX == 'center') {\n            overlayStartX = -overlayRect.width / 2;\n        }\n        else if (pos.overlayX === 'start') {\n            overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n        }\n        else {\n            overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n        }\n        let overlayStartY;\n        if (pos.overlayY == 'center') {\n            overlayStartY = -overlayRect.height / 2;\n        }\n        else {\n            overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n        }\n        // The (x, y) coordinates of the overlay.\n        return {\n            x: originPoint.x + overlayStartX,\n            y: originPoint.y + overlayStartY,\n        };\n    }\n    /** Gets how well an overlay at the given point will fit within the viewport. */\n    _getOverlayFit(point, rawOverlayRect, viewport, position) {\n        // Round the overlay rect when comparing against the\n        // viewport, because the viewport is always rounded.\n        const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n        let { x, y } = point;\n        let offsetX = this._getOffset(position, 'x');\n        let offsetY = this._getOffset(position, 'y');\n        // Account for the offsets since they could push the overlay out of the viewport.\n        if (offsetX) {\n            x += offsetX;\n        }\n        if (offsetY) {\n            y += offsetY;\n        }\n        // How much the overlay would overflow at this position, on each side.\n        let leftOverflow = 0 - x;\n        let rightOverflow = x + overlay.width - viewport.width;\n        let topOverflow = 0 - y;\n        let bottomOverflow = y + overlay.height - viewport.height;\n        // Visible parts of the element on each axis.\n        let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n        let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n        let visibleArea = visibleWidth * visibleHeight;\n        return {\n            visibleArea,\n            isCompletelyWithinViewport: overlay.width * overlay.height === visibleArea,\n            fitsInViewportVertically: visibleHeight === overlay.height,\n            fitsInViewportHorizontally: visibleWidth == overlay.width,\n        };\n    }\n    /**\n     * Whether the overlay can fit within the viewport when it may resize either its width or height.\n     * @param fit How well the overlay fits in the viewport at some position.\n     * @param point The (x, y) coordinates of the overlay at some position.\n     * @param viewport The geometry of the viewport.\n     */\n    _canFitWithFlexibleDimensions(fit, point, viewport) {\n        if (this._hasFlexibleDimensions) {\n            const availableHeight = viewport.bottom - point.y;\n            const availableWidth = viewport.right - point.x;\n            const minHeight = getPixelValue(this._overlayRef.getConfig().minHeight);\n            const minWidth = getPixelValue(this._overlayRef.getConfig().minWidth);\n            const verticalFit = fit.fitsInViewportVertically || (minHeight != null && minHeight <= availableHeight);\n            const horizontalFit = fit.fitsInViewportHorizontally || (minWidth != null && minWidth <= availableWidth);\n            return verticalFit && horizontalFit;\n        }\n        return false;\n    }\n    /**\n     * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n     * the viewport, the top-left corner will be pushed on-screen (with overflow occurring on the\n     * right and bottom).\n     *\n     * @param start Starting point from which the overlay is pushed.\n     * @param rawOverlayRect Dimensions of the overlay.\n     * @param scrollPosition Current viewport scroll position.\n     * @returns The point at which to position the overlay after pushing. This is effectively a new\n     *     originPoint.\n     */\n    _pushOverlayOnScreen(start, rawOverlayRect, scrollPosition) {\n        // If the position is locked and we've pushed the overlay already, reuse the previous push\n        // amount, rather than pushing it again. If we were to continue pushing, the element would\n        // remain in the viewport, which goes against the expectations when position locking is enabled.\n        if (this._previousPushAmount && this._positionLocked) {\n            return {\n                x: start.x + this._previousPushAmount.x,\n                y: start.y + this._previousPushAmount.y,\n            };\n        }\n        // Round the overlay rect when comparing against the\n        // viewport, because the viewport is always rounded.\n        const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n        const viewport = this._viewportRect;\n        // Determine how much the overlay goes outside the viewport on each\n        // side, which we'll use to decide which direction to push it.\n        const overflowRight = Math.max(start.x + overlay.width - viewport.width, 0);\n        const overflowBottom = Math.max(start.y + overlay.height - viewport.height, 0);\n        const overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n        const overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);\n        // Amount by which to push the overlay in each axis such that it remains on-screen.\n        let pushX = 0;\n        let pushY = 0;\n        // If the overlay fits completely within the bounds of the viewport, push it from whichever\n        // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n        // viewport and allow for the trailing end of the overlay to go out of bounds.\n        if (overlay.width <= viewport.width) {\n            pushX = overflowLeft || -overflowRight;\n        }\n        else {\n            pushX = start.x < this._viewportMargin ? viewport.left - scrollPosition.left - start.x : 0;\n        }\n        if (overlay.height <= viewport.height) {\n            pushY = overflowTop || -overflowBottom;\n        }\n        else {\n            pushY = start.y < this._viewportMargin ? viewport.top - scrollPosition.top - start.y : 0;\n        }\n        this._previousPushAmount = { x: pushX, y: pushY };\n        return {\n            x: start.x + pushX,\n            y: start.y + pushY,\n        };\n    }\n    /**\n     * Applies a computed position to the overlay and emits a position change.\n     * @param position The position preference\n     * @param originPoint The point on the origin element where the overlay is connected.\n     */\n    _applyPosition(position, originPoint) {\n        this._setTransformOrigin(position);\n        this._setOverlayElementStyles(originPoint, position);\n        this._setBoundingBoxStyles(originPoint, position);\n        if (position.panelClass) {\n            this._addPanelClasses(position.panelClass);\n        }\n        // Save the last connected position in case the position needs to be re-calculated.\n        this._lastPosition = position;\n        // Notify that the position has been changed along with its change properties.\n        // We only emit if we've got any subscriptions, because the scroll visibility\n        // calculations can be somewhat expensive.\n        if (this._positionChanges.observers.length) {\n            const scrollableViewProperties = this._getScrollVisibility();\n            const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n            this._positionChanges.next(changeEvent);\n        }\n        this._isInitialRender = false;\n    }\n    /** Sets the transform origin based on the configured selector and the passed-in position.  */\n    _setTransformOrigin(position) {\n        if (!this._transformOriginSelector) {\n            return;\n        }\n        const elements = this._boundingBox.querySelectorAll(this._transformOriginSelector);\n        let xOrigin;\n        let yOrigin = position.overlayY;\n        if (position.overlayX === 'center') {\n            xOrigin = 'center';\n        }\n        else if (this._isRtl()) {\n            xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n        }\n        else {\n            xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n        }\n        for (let i = 0; i < elements.length; i++) {\n            elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\n        }\n    }\n    /**\n     * Gets the position and size of the overlay's sizing container.\n     *\n     * This method does no measuring and applies no styles so that we can cheaply compute the\n     * bounds for all positions and choose the best fit based on these results.\n     */\n    _calculateBoundingBoxRect(origin, position) {\n        const viewport = this._viewportRect;\n        const isRtl = this._isRtl();\n        let height, top, bottom;\n        if (position.overlayY === 'top') {\n            // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n            top = origin.y;\n            height = viewport.height - top + this._viewportMargin;\n        }\n        else if (position.overlayY === 'bottom') {\n            // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n            // the viewport margin back in, because the viewport rect is narrowed down to remove the\n            // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n            bottom = viewport.height - origin.y + this._viewportMargin * 2;\n            height = viewport.height - bottom + this._viewportMargin;\n        }\n        else {\n            // If neither top nor bottom, it means that the overlay is vertically centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.bottom - origin.y` and\n            // `origin.y - viewport.top`.\n            const smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\n            const previousHeight = this._lastBoundingBoxSize.height;\n            height = smallestDistanceToViewportEdge * 2;\n            top = origin.y - smallestDistanceToViewportEdge;\n            if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n                top = origin.y - previousHeight / 2;\n            }\n        }\n        // The overlay is opening 'right-ward' (the content flows to the right).\n        const isBoundedByRightViewportEdge = (position.overlayX === 'start' && !isRtl) || (position.overlayX === 'end' && isRtl);\n        // The overlay is opening 'left-ward' (the content flows to the left).\n        const isBoundedByLeftViewportEdge = (position.overlayX === 'end' && !isRtl) || (position.overlayX === 'start' && isRtl);\n        let width, left, right;\n        if (isBoundedByLeftViewportEdge) {\n            right = viewport.width - origin.x + this._viewportMargin;\n            width = origin.x - this._viewportMargin;\n        }\n        else if (isBoundedByRightViewportEdge) {\n            left = origin.x;\n            width = viewport.right - origin.x;\n        }\n        else {\n            // If neither start nor end, it means that the overlay is horizontally centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.right - origin.x` and\n            // `origin.x - viewport.left`.\n            const smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x + viewport.left, origin.x);\n            const previousWidth = this._lastBoundingBoxSize.width;\n            width = smallestDistanceToViewportEdge * 2;\n            left = origin.x - smallestDistanceToViewportEdge;\n            if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n                left = origin.x - previousWidth / 2;\n            }\n        }\n        return { top: top, left: left, bottom: bottom, right: right, width, height };\n    }\n    /**\n     * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n     * origin's connection point and stretches to the bounds of the viewport.\n     *\n     * @param origin The point on the origin element where the overlay is connected.\n     * @param position The position preference\n     */\n    _setBoundingBoxStyles(origin, position) {\n        const boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n        // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n        // when applying a new size.\n        if (!this._isInitialRender && !this._growAfterOpen) {\n            boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n            boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n        }\n        const styles = {};\n        if (this._hasExactPosition()) {\n            styles.top = styles.left = '0';\n            styles.bottom = styles.right = styles.maxHeight = styles.maxWidth = '';\n            styles.width = styles.height = '100%';\n        }\n        else {\n            const maxHeight = this._overlayRef.getConfig().maxHeight;\n            const maxWidth = this._overlayRef.getConfig().maxWidth;\n            styles.height = coerceCssPixelValue(boundingBoxRect.height);\n            styles.top = coerceCssPixelValue(boundingBoxRect.top);\n            styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n            styles.width = coerceCssPixelValue(boundingBoxRect.width);\n            styles.left = coerceCssPixelValue(boundingBoxRect.left);\n            styles.right = coerceCssPixelValue(boundingBoxRect.right);\n            // Push the pane content towards the proper direction.\n            if (position.overlayX === 'center') {\n                styles.alignItems = 'center';\n            }\n            else {\n                styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n            }\n            if (position.overlayY === 'center') {\n                styles.justifyContent = 'center';\n            }\n            else {\n                styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n            }\n            if (maxHeight) {\n                styles.maxHeight = coerceCssPixelValue(maxHeight);\n            }\n            if (maxWidth) {\n                styles.maxWidth = coerceCssPixelValue(maxWidth);\n            }\n        }\n        this._lastBoundingBoxSize = boundingBoxRect;\n        extendStyles(this._boundingBox.style, styles);\n    }\n    /** Resets the styles for the bounding box so that a new positioning can be computed. */\n    _resetBoundingBoxStyles() {\n        extendStyles(this._boundingBox.style, {\n            top: '0',\n            left: '0',\n            right: '0',\n            bottom: '0',\n            height: '',\n            width: '',\n            alignItems: '',\n            justifyContent: '',\n        });\n    }\n    /** Resets the styles for the overlay pane so that a new positioning can be computed. */\n    _resetOverlayElementStyles() {\n        extendStyles(this._pane.style, {\n            top: '',\n            left: '',\n            bottom: '',\n            right: '',\n            position: '',\n            transform: '',\n        });\n    }\n    /** Sets positioning styles to the overlay element. */\n    _setOverlayElementStyles(originPoint, position) {\n        const styles = {};\n        const hasExactPosition = this._hasExactPosition();\n        const hasFlexibleDimensions = this._hasFlexibleDimensions;\n        const config = this._overlayRef.getConfig();\n        if (hasExactPosition) {\n            const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n            extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n            extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n        }\n        else {\n            styles.position = 'static';\n        }\n        // Use a transform to apply the offsets. We do this because the `center` positions rely on\n        // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n        // off the position. We also can't use margins, because they won't have an effect in some\n        // cases where the element doesn't have anything to \"push off of\". Finally, this works\n        // better both with flexible and non-flexible positioning.\n        let transformString = '';\n        let offsetX = this._getOffset(position, 'x');\n        let offsetY = this._getOffset(position, 'y');\n        if (offsetX) {\n            transformString += `translateX(${offsetX}px) `;\n        }\n        if (offsetY) {\n            transformString += `translateY(${offsetY}px)`;\n        }\n        styles.transform = transformString.trim();\n        // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n        // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n        // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n        // Note that this doesn't apply when we have an exact position, in which case we do want to\n        // apply them because they'll be cleared from the bounding box.\n        if (config.maxHeight) {\n            if (hasExactPosition) {\n                styles.maxHeight = coerceCssPixelValue(config.maxHeight);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxHeight = '';\n            }\n        }\n        if (config.maxWidth) {\n            if (hasExactPosition) {\n                styles.maxWidth = coerceCssPixelValue(config.maxWidth);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxWidth = '';\n            }\n        }\n        extendStyles(this._pane.style, styles);\n    }\n    /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\n    _getExactOverlayY(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the\n        // preferred position has changed since the last `apply`.\n        let styles = { top: '', bottom: '' };\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n        // above or below the origin and the direction in which the element will expand.\n        if (position.overlayY === 'bottom') {\n            // When using `bottom`, we adjust the y position such that it is the distance\n            // from the bottom of the viewport rather than the top.\n            const documentHeight = this._document.documentElement.clientHeight;\n            styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n        }\n        else {\n            styles.top = coerceCssPixelValue(overlayPoint.y);\n        }\n        return styles;\n    }\n    /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\n    _getExactOverlayX(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the preferred position has\n        // changed since the last `apply`.\n        let styles = { left: '', right: '' };\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n        // or \"after\" the origin, which determines the direction in which the element will expand.\n        // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n        // page is in RTL or LTR.\n        let horizontalStyleProperty;\n        if (this._isRtl()) {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n        }\n        else {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n        }\n        // When we're setting `right`, we adjust the x position such that it is the distance\n        // from the right edge of the viewport rather than the left edge.\n        if (horizontalStyleProperty === 'right') {\n            const documentWidth = this._document.documentElement.clientWidth;\n            styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n        }\n        else {\n            styles.left = coerceCssPixelValue(overlayPoint.x);\n        }\n        return styles;\n    }\n    /**\n     * Gets the view properties of the trigger and overlay, including whether they are clipped\n     * or completely outside the view of any of the strategy's scrollables.\n     */\n    _getScrollVisibility() {\n        // Note: needs fresh rects since the position could've changed.\n        const originBounds = this._getOriginRect();\n        const overlayBounds = this._pane.getBoundingClientRect();\n        // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n        // every time, we should be able to use the scrollTop of the containers if the size of those\n        // containers hasn't changed.\n        const scrollContainerBounds = this._scrollables.map(scrollable => {\n            return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n        });\n        return {\n            isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n            isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n            isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n            isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n        };\n    }\n    /** Subtracts the amount that an element is overflowing on an axis from its length. */\n    _subtractOverflows(length, ...overflows) {\n        return overflows.reduce((currentValue, currentOverflow) => {\n            return currentValue - Math.max(currentOverflow, 0);\n        }, length);\n    }\n    /** Narrows the given viewport rect by the current _viewportMargin. */\n    _getNarrowedViewportRect() {\n        // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n        // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n        // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n        // and `innerHeight` that do. This is necessary, because the overlay container uses\n        // 100% `width` and `height` which don't include the scrollbar either.\n        const width = this._document.documentElement.clientWidth;\n        const height = this._document.documentElement.clientHeight;\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n        return {\n            top: scrollPosition.top + this._viewportMargin,\n            left: scrollPosition.left + this._viewportMargin,\n            right: scrollPosition.left + width - this._viewportMargin,\n            bottom: scrollPosition.top + height - this._viewportMargin,\n            width: width - 2 * this._viewportMargin,\n            height: height - 2 * this._viewportMargin,\n        };\n    }\n    /** Whether the we're dealing with an RTL context */\n    _isRtl() {\n        return this._overlayRef.getDirection() === 'rtl';\n    }\n    /** Determines whether the overlay uses exact or flexible positioning. */\n    _hasExactPosition() {\n        return !this._hasFlexibleDimensions || this._isPushed;\n    }\n    /** Retrieves the offset of a position along the x or y axis. */\n    _getOffset(position, axis) {\n        if (axis === 'x') {\n            // We don't do something like `position['offset' + axis]` in\n            // order to avoid breaking minifiers that rename properties.\n            return position.offsetX == null ? this._offsetX : position.offsetX;\n        }\n        return position.offsetY == null ? this._offsetY : position.offsetY;\n    }\n    /** Validates that the current position match the expected values. */\n    _validatePositions() {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!this._preferredPositions.length) {\n                throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n            }\n            // TODO(crisbeto): remove these once Angular's template type\n            // checking is advanced enough to catch these cases.\n            this._preferredPositions.forEach(pair => {\n                validateHorizontalPosition('originX', pair.originX);\n                validateVerticalPosition('originY', pair.originY);\n                validateHorizontalPosition('overlayX', pair.overlayX);\n                validateVerticalPosition('overlayY', pair.overlayY);\n            });\n        }\n    }\n    /** Adds a single CSS class or an array of classes on the overlay panel. */\n    _addPanelClasses(cssClasses) {\n        if (this._pane) {\n            coerceArray(cssClasses).forEach(cssClass => {\n                if (cssClass !== '' && this._appliedPanelClasses.indexOf(cssClass) === -1) {\n                    this._appliedPanelClasses.push(cssClass);\n                    this._pane.classList.add(cssClass);\n                }\n            });\n        }\n    }\n    /** Clears the classes that the position strategy has applied from the overlay panel. */\n    _clearPanelClasses() {\n        if (this._pane) {\n            this._appliedPanelClasses.forEach(cssClass => {\n                this._pane.classList.remove(cssClass);\n            });\n            this._appliedPanelClasses = [];\n        }\n    }\n    /** Returns the ClientRect of the current origin. */\n    _getOriginRect() {\n        const origin = this._origin;\n        if (origin instanceof ElementRef) {\n            return origin.nativeElement.getBoundingClientRect();\n        }\n        // Check for Element so SVG elements are also supported.\n        if (origin instanceof Element) {\n            return origin.getBoundingClientRect();\n        }\n        const width = origin.width || 0;\n        const height = origin.height || 0;\n        // If the origin is a point, return a client rect as if it was a 0x0 element at the point.\n        return {\n            top: origin.y,\n            bottom: origin.y + height,\n            left: origin.x,\n            right: origin.x + width,\n            height,\n            width,\n        };\n    }\n}\n/** Shallow-extends a stylesheet object with another stylesheet object. */\nfunction extendStyles(destination, source) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            destination[key] = source[key];\n        }\n    }\n    return destination;\n}\n/**\n * Extracts the pixel value as a number from a value, if it's a number\n * or a CSS pixel string (e.g. `1337px`). Otherwise returns null.\n */\nfunction getPixelValue(input) {\n    if (typeof input !== 'number' && input != null) {\n        const [value, units] = input.split(cssUnitPattern);\n        return !units || units === 'px' ? parseFloat(value) : null;\n    }\n    return input || null;\n}\n/**\n * Gets a version of an element's bounding `ClientRect` where all the values are rounded down to\n * the nearest pixel. This allows us to account for the cases where there may be sub-pixel\n * deviations in the `ClientRect` returned by the browser (e.g. when zoomed in with a percentage\n * size, see #21350).\n */\nfunction getRoundedBoundingClientRect(clientRect) {\n    return {\n        top: Math.floor(clientRect.top),\n        right: Math.floor(clientRect.right),\n        bottom: Math.floor(clientRect.bottom),\n        left: Math.floor(clientRect.left),\n        width: Math.floor(clientRect.width),\n        height: Math.floor(clientRect.height),\n    };\n}\nconst STANDARD_DROPDOWN_BELOW_POSITIONS = [\n    { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' },\n    { originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom' },\n    { originX: 'end', originY: 'bottom', overlayX: 'end', overlayY: 'top' },\n    { originX: 'end', originY: 'top', overlayX: 'end', overlayY: 'bottom' },\n];\nconst STANDARD_DROPDOWN_ADJACENT_POSITIONS = [\n    { originX: 'end', originY: 'top', overlayX: 'start', overlayY: 'top' },\n    { originX: 'end', originY: 'bottom', overlayX: 'start', overlayY: 'bottom' },\n    { originX: 'start', originY: 'top', overlayX: 'end', overlayY: 'top' },\n    { originX: 'start', originY: 'bottom', overlayX: 'end', overlayY: 'bottom' },\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Class to be added to the overlay pane wrapper. */\nconst wrapperClass = 'cdk-global-overlay-wrapper';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nclass GlobalPositionStrategy {\n    constructor() {\n        this._cssPosition = 'static';\n        this._topOffset = '';\n        this._bottomOffset = '';\n        this._alignItems = '';\n        this._xPosition = '';\n        this._xOffset = '';\n        this._width = '';\n        this._height = '';\n        this._isDisposed = false;\n    }\n    attach(overlayRef) {\n        const config = overlayRef.getConfig();\n        this._overlayRef = overlayRef;\n        if (this._width && !config.width) {\n            overlayRef.updateSize({ width: this._width });\n        }\n        if (this._height && !config.height) {\n            overlayRef.updateSize({ height: this._height });\n        }\n        overlayRef.hostElement.classList.add(wrapperClass);\n        this._isDisposed = false;\n    }\n    /**\n     * Sets the top position of the overlay. Clears any previously set vertical position.\n     * @param value New top offset.\n     */\n    top(value = '') {\n        this._bottomOffset = '';\n        this._topOffset = value;\n        this._alignItems = 'flex-start';\n        return this;\n    }\n    /**\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\n     * @param value New left offset.\n     */\n    left(value = '') {\n        this._xOffset = value;\n        this._xPosition = 'left';\n        return this;\n    }\n    /**\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\n     * @param value New bottom offset.\n     */\n    bottom(value = '') {\n        this._topOffset = '';\n        this._bottomOffset = value;\n        this._alignItems = 'flex-end';\n        return this;\n    }\n    /**\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\n     * @param value New right offset.\n     */\n    right(value = '') {\n        this._xOffset = value;\n        this._xPosition = 'right';\n        return this;\n    }\n    /**\n     * Sets the overlay to the start of the viewport, depending on the overlay direction.\n     * This will be to the left in LTR layouts and to the right in RTL.\n     * @param offset Offset from the edge of the screen.\n     */\n    start(value = '') {\n        this._xOffset = value;\n        this._xPosition = 'start';\n        return this;\n    }\n    /**\n     * Sets the overlay to the end of the viewport, depending on the overlay direction.\n     * This will be to the right in LTR layouts and to the left in RTL.\n     * @param offset Offset from the edge of the screen.\n     */\n    end(value = '') {\n        this._xOffset = value;\n        this._xPosition = 'end';\n        return this;\n    }\n    /**\n     * Sets the overlay width and clears any previously set width.\n     * @param value New width for the overlay\n     * @deprecated Pass the `width` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    width(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ width: value });\n        }\n        else {\n            this._width = value;\n        }\n        return this;\n    }\n    /**\n     * Sets the overlay height and clears any previously set height.\n     * @param value New height for the overlay\n     * @deprecated Pass the `height` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    height(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ height: value });\n        }\n        else {\n            this._height = value;\n        }\n        return this;\n    }\n    /**\n     * Centers the overlay horizontally with an optional offset.\n     * Clears any previously set horizontal position.\n     *\n     * @param offset Overlay offset from the horizontal center.\n     */\n    centerHorizontally(offset = '') {\n        this.left(offset);\n        this._xPosition = 'center';\n        return this;\n    }\n    /**\n     * Centers the overlay vertically with an optional offset.\n     * Clears any previously set vertical position.\n     *\n     * @param offset Overlay offset from the vertical center.\n     */\n    centerVertically(offset = '') {\n        this.top(offset);\n        this._alignItems = 'center';\n        return this;\n    }\n    /**\n     * Apply the position to the element.\n     * @docs-private\n     */\n    apply() {\n        // Since the overlay ref applies the strategy asynchronously, it could\n        // have been disposed before it ends up being applied. If that is the\n        // case, we shouldn't do anything.\n        if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n            return;\n        }\n        const styles = this._overlayRef.overlayElement.style;\n        const parentStyles = this._overlayRef.hostElement.style;\n        const config = this._overlayRef.getConfig();\n        const { width, height, maxWidth, maxHeight } = config;\n        const shouldBeFlushHorizontally = (width === '100%' || width === '100vw') &&\n            (!maxWidth || maxWidth === '100%' || maxWidth === '100vw');\n        const shouldBeFlushVertically = (height === '100%' || height === '100vh') &&\n            (!maxHeight || maxHeight === '100%' || maxHeight === '100vh');\n        const xPosition = this._xPosition;\n        const xOffset = this._xOffset;\n        const isRtl = this._overlayRef.getConfig().direction === 'rtl';\n        let marginLeft = '';\n        let marginRight = '';\n        let justifyContent = '';\n        if (shouldBeFlushHorizontally) {\n            justifyContent = 'flex-start';\n        }\n        else if (xPosition === 'center') {\n            justifyContent = 'center';\n            if (isRtl) {\n                marginRight = xOffset;\n            }\n            else {\n                marginLeft = xOffset;\n            }\n        }\n        else if (isRtl) {\n            if (xPosition === 'left' || xPosition === 'end') {\n                justifyContent = 'flex-end';\n                marginLeft = xOffset;\n            }\n            else if (xPosition === 'right' || xPosition === 'start') {\n                justifyContent = 'flex-start';\n                marginRight = xOffset;\n            }\n        }\n        else if (xPosition === 'left' || xPosition === 'start') {\n            justifyContent = 'flex-start';\n            marginLeft = xOffset;\n        }\n        else if (xPosition === 'right' || xPosition === 'end') {\n            justifyContent = 'flex-end';\n            marginRight = xOffset;\n        }\n        styles.position = this._cssPosition;\n        styles.marginLeft = shouldBeFlushHorizontally ? '0' : marginLeft;\n        styles.marginTop = shouldBeFlushVertically ? '0' : this._topOffset;\n        styles.marginBottom = this._bottomOffset;\n        styles.marginRight = shouldBeFlushHorizontally ? '0' : marginRight;\n        parentStyles.justifyContent = justifyContent;\n        parentStyles.alignItems = shouldBeFlushVertically ? 'flex-start' : this._alignItems;\n    }\n    /**\n     * Cleans up the DOM changes from the position strategy.\n     * @docs-private\n     */\n    dispose() {\n        if (this._isDisposed || !this._overlayRef) {\n            return;\n        }\n        const styles = this._overlayRef.overlayElement.style;\n        const parent = this._overlayRef.hostElement;\n        const parentStyles = parent.style;\n        parent.classList.remove(wrapperClass);\n        parentStyles.justifyContent =\n            parentStyles.alignItems =\n                styles.marginTop =\n                    styles.marginBottom =\n                        styles.marginLeft =\n                            styles.marginRight =\n                                styles.position =\n                                    '';\n        this._overlayRef = null;\n        this._isDisposed = true;\n    }\n}\n\n/** Builder for overlay position strategy. */\nclass OverlayPositionBuilder {\n    constructor(_viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n    }\n    /**\n     * Creates a global position strategy.\n     */\n    global() {\n        return new GlobalPositionStrategy();\n    }\n    /**\n     * Creates a flexible position strategy.\n     * @param origin Origin relative to which to position the overlay.\n     */\n    flexibleConnectedTo(origin) {\n        return new FlexibleConnectedPositionStrategy(origin, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    }\n}\nOverlayPositionBuilder.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: OverlayPositionBuilder, deps: [{ token: i1.ViewportRuler }, { token: DOCUMENT }, { token: i1$1.Platform }, { token: OverlayContainer }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayPositionBuilder.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: OverlayPositionBuilder, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: OverlayPositionBuilder, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: i1.ViewportRuler }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i1$1.Platform }, { type: OverlayContainer }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass BaseOverlayDispatcher {\n    constructor(document) {\n        /** Currently attached overlays in the order they were attached. */\n        this._attachedOverlays = [];\n        this._document = document;\n    }\n    ngOnDestroy() {\n        this.detach();\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        // Ensure that we don't get the same overlay multiple times.\n        this.remove(overlayRef);\n        this._attachedOverlays.push(overlayRef);\n    }\n    /** Remove an overlay from the list of attached overlay refs. */\n    remove(overlayRef) {\n        const index = this._attachedOverlays.indexOf(overlayRef);\n        if (index > -1) {\n            this._attachedOverlays.splice(index, 1);\n        }\n        // Remove the global listener once there are no more overlays.\n        if (this._attachedOverlays.length === 0) {\n            this.detach();\n        }\n    }\n}\nBaseOverlayDispatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: BaseOverlayDispatcher, deps: [{ token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nBaseOverlayDispatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: BaseOverlayDispatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: BaseOverlayDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayKeyboardDispatcher extends BaseOverlayDispatcher {\n    constructor(document, \n    /** @breaking-change 14.0.0 _ngZone will be required. */\n    _ngZone) {\n        super(document);\n        this._ngZone = _ngZone;\n        /** Keyboard event listener that will be attached to the body. */\n        this._keydownListener = (event) => {\n            const overlays = this._attachedOverlays;\n            for (let i = overlays.length - 1; i > -1; i--) {\n                // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n                // We want to target the most recent overlay, rather than trying to match where the event came\n                // from, because some components might open an overlay, but keep focus on a trigger element\n                // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n                // because we don't want overlays that don't handle keyboard events to block the ones below\n                // them that do.\n                if (overlays[i]._keydownEvents.observers.length > 0) {\n                    const keydownEvents = overlays[i]._keydownEvents;\n                    /** @breaking-change 14.0.0 _ngZone will be required. */\n                    if (this._ngZone) {\n                        this._ngZone.run(() => keydownEvents.next(event));\n                    }\n                    else {\n                        keydownEvents.next(event);\n                    }\n                    break;\n                }\n            }\n        };\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        super.add(overlayRef);\n        // Lazily start dispatcher once first overlay is added\n        if (!this._isAttached) {\n            /** @breaking-change 14.0.0 _ngZone will be required. */\n            if (this._ngZone) {\n                this._ngZone.runOutsideAngular(() => this._document.body.addEventListener('keydown', this._keydownListener));\n            }\n            else {\n                this._document.body.addEventListener('keydown', this._keydownListener);\n            }\n            this._isAttached = true;\n        }\n    }\n    /** Detaches the global keyboard event listener. */\n    detach() {\n        if (this._isAttached) {\n            this._document.body.removeEventListener('keydown', this._keydownListener);\n            this._isAttached = false;\n        }\n    }\n}\nOverlayKeyboardDispatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: OverlayKeyboardDispatcher, deps: [{ token: DOCUMENT }, { token: i0.NgZone, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayKeyboardDispatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: OverlayKeyboardDispatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: OverlayKeyboardDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i0.NgZone, decorators: [{\n                        type: Optional\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching mouse click events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayOutsideClickDispatcher extends BaseOverlayDispatcher {\n    constructor(document, _platform, \n    /** @breaking-change 14.0.0 _ngZone will be required. */\n    _ngZone) {\n        super(document);\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._cursorStyleIsSet = false;\n        /** Store pointerdown event target to track origin of click. */\n        this._pointerDownListener = (event) => {\n            this._pointerDownEventTarget = _getEventTarget(event);\n        };\n        /** Click event listener that will be attached to the body propagate phase. */\n        this._clickListener = (event) => {\n            const target = _getEventTarget(event);\n            // In case of a click event, we want to check the origin of the click\n            // (e.g. in case where a user starts a click inside the overlay and\n            // releases the click outside of it).\n            // This is done by using the event target of the preceding pointerdown event.\n            // Every click event caused by a pointer device has a preceding pointerdown\n            // event, unless the click was programmatically triggered (e.g. in a unit test).\n            const origin = event.type === 'click' && this._pointerDownEventTarget\n                ? this._pointerDownEventTarget\n                : target;\n            // Reset the stored pointerdown event target, to avoid having it interfere\n            // in subsequent events.\n            this._pointerDownEventTarget = null;\n            // We copy the array because the original may be modified asynchronously if the\n            // outsidePointerEvents listener decides to detach overlays resulting in index errors inside\n            // the for loop.\n            const overlays = this._attachedOverlays.slice();\n            // Dispatch the mouse event to the top overlay which has subscribers to its mouse events.\n            // We want to target all overlays for which the click could be considered as outside click.\n            // As soon as we reach an overlay for which the click is not outside click we break off\n            // the loop.\n            for (let i = overlays.length - 1; i > -1; i--) {\n                const overlayRef = overlays[i];\n                if (overlayRef._outsidePointerEvents.observers.length < 1 || !overlayRef.hasAttached()) {\n                    continue;\n                }\n                // If it's a click inside the overlay, just break - we should do nothing\n                // If it's an outside click (both origin and target of the click) dispatch the mouse event,\n                // and proceed with the next overlay\n                if (overlayRef.overlayElement.contains(target) ||\n                    overlayRef.overlayElement.contains(origin)) {\n                    break;\n                }\n                const outsidePointerEvents = overlayRef._outsidePointerEvents;\n                /** @breaking-change 14.0.0 _ngZone will be required. */\n                if (this._ngZone) {\n                    this._ngZone.run(() => outsidePointerEvents.next(event));\n                }\n                else {\n                    outsidePointerEvents.next(event);\n                }\n            }\n        };\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        super.add(overlayRef);\n        // Safari on iOS does not generate click events for non-interactive\n        // elements. However, we want to receive a click for any element outside\n        // the overlay. We can force a \"clickable\" state by setting\n        // `cursor: pointer` on the document body. See:\n        // https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event#Safari_Mobile\n        // https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html\n        if (!this._isAttached) {\n            const body = this._document.body;\n            /** @breaking-change 14.0.0 _ngZone will be required. */\n            if (this._ngZone) {\n                this._ngZone.runOutsideAngular(() => this._addEventListeners(body));\n            }\n            else {\n                this._addEventListeners(body);\n            }\n            // click event is not fired on iOS. To make element \"clickable\" we are\n            // setting the cursor to pointer\n            if (this._platform.IOS && !this._cursorStyleIsSet) {\n                this._cursorOriginalValue = body.style.cursor;\n                body.style.cursor = 'pointer';\n                this._cursorStyleIsSet = true;\n            }\n            this._isAttached = true;\n        }\n    }\n    /** Detaches the global keyboard event listener. */\n    detach() {\n        if (this._isAttached) {\n            const body = this._document.body;\n            body.removeEventListener('pointerdown', this._pointerDownListener, true);\n            body.removeEventListener('click', this._clickListener, true);\n            body.removeEventListener('auxclick', this._clickListener, true);\n            body.removeEventListener('contextmenu', this._clickListener, true);\n            if (this._platform.IOS && this._cursorStyleIsSet) {\n                body.style.cursor = this._cursorOriginalValue;\n                this._cursorStyleIsSet = false;\n            }\n            this._isAttached = false;\n        }\n    }\n    _addEventListeners(body) {\n        body.addEventListener('pointerdown', this._pointerDownListener, true);\n        body.addEventListener('click', this._clickListener, true);\n        body.addEventListener('auxclick', this._clickListener, true);\n        body.addEventListener('contextmenu', this._clickListener, true);\n    }\n}\nOverlayOutsideClickDispatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: OverlayOutsideClickDispatcher, deps: [{ token: DOCUMENT }, { token: i1$1.Platform }, { token: i0.NgZone, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayOutsideClickDispatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: OverlayOutsideClickDispatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: OverlayOutsideClickDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i1$1.Platform }, { type: i0.NgZone, decorators: [{\n                        type: Optional\n                    }] }];\n    } });\n\n/** Next overlay unique ID. */\nlet nextUniqueId = 0;\n// Note that Overlay is *not* scoped to the app root because of the ComponentFactoryResolver\n// which needs to be different depending on where OverlayModule is imported.\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\nclass Overlay {\n    constructor(\n    /** Scrolling strategies that can be used when creating an overlay. */\n    scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality, _location, _outsideClickDispatcher, _animationsModuleType) {\n        this.scrollStrategies = scrollStrategies;\n        this._overlayContainer = _overlayContainer;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._positionBuilder = _positionBuilder;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._injector = _injector;\n        this._ngZone = _ngZone;\n        this._document = _document;\n        this._directionality = _directionality;\n        this._location = _location;\n        this._outsideClickDispatcher = _outsideClickDispatcher;\n        this._animationsModuleType = _animationsModuleType;\n    }\n    /**\n     * Creates an overlay.\n     * @param config Configuration applied to the overlay.\n     * @returns Reference to the created overlay.\n     */\n    create(config) {\n        const host = this._createHostElement();\n        const pane = this._createPaneElement(host);\n        const portalOutlet = this._createPortalOutlet(pane);\n        const overlayConfig = new OverlayConfig(config);\n        overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n        return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document, this._location, this._outsideClickDispatcher, this._animationsModuleType === 'NoopAnimations');\n    }\n    /**\n     * Gets a position builder that can be used, via fluent API,\n     * to construct and configure a position strategy.\n     * @returns An overlay position builder.\n     */\n    position() {\n        return this._positionBuilder;\n    }\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @returns Newly-created pane element\n     */\n    _createPaneElement(host) {\n        const pane = this._document.createElement('div');\n        pane.id = `cdk-overlay-${nextUniqueId++}`;\n        pane.classList.add('cdk-overlay-pane');\n        host.appendChild(pane);\n        return pane;\n    }\n    /**\n     * Creates the host element that wraps around an overlay\n     * and can be used for advanced positioning.\n     * @returns Newly-create host element.\n     */\n    _createHostElement() {\n        const host = this._document.createElement('div');\n        this._overlayContainer.getContainerElement().appendChild(host);\n        return host;\n    }\n    /**\n     * Create a DomPortalOutlet into which the overlay content can be loaded.\n     * @param pane The DOM element to turn into a portal outlet.\n     * @returns A portal outlet for the given DOM element.\n     */\n    _createPortalOutlet(pane) {\n        // We have to resolve the ApplicationRef later in order to allow people\n        // to use overlay-based providers during app initialization.\n        if (!this._appRef) {\n            this._appRef = this._injector.get(ApplicationRef);\n        }\n        return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector, this._document);\n    }\n}\nOverlay.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: Overlay, deps: [{ token: ScrollStrategyOptions }, { token: OverlayContainer }, { token: i0.ComponentFactoryResolver }, { token: OverlayPositionBuilder }, { token: OverlayKeyboardDispatcher }, { token: i0.Injector }, { token: i0.NgZone }, { token: DOCUMENT }, { token: i5.Directionality }, { token: i6.Location }, { token: OverlayOutsideClickDispatcher }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlay.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: Overlay });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: Overlay, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () {\n        return [{ type: ScrollStrategyOptions }, { type: OverlayContainer }, { type: i0.ComponentFactoryResolver }, { type: OverlayPositionBuilder }, { type: OverlayKeyboardDispatcher }, { type: i0.Injector }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i5.Directionality }, { type: i6.Location }, { type: OverlayOutsideClickDispatcher }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [ANIMATION_MODULE_TYPE]\n                    }, {\n                        type: Optional\n                    }] }];\n    } });\n\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\nconst defaultPositionList = [\n    {\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'top',\n    },\n    {\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'bottom',\n    },\n    {\n        originX: 'end',\n        originY: 'top',\n        overlayX: 'end',\n        overlayY: 'bottom',\n    },\n    {\n        originX: 'end',\n        originY: 'bottom',\n        overlayX: 'end',\n        overlayY: 'top',\n    },\n];\n/** Injection token that determines the scroll handling while the connected overlay is open. */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new InjectionToken('cdk-connected-overlay-scroll-strategy');\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\nclass CdkOverlayOrigin {\n    constructor(\n    /** Reference to the element on which the directive is applied. */\n    elementRef) {\n        this.elementRef = elementRef;\n    }\n}\nCdkOverlayOrigin.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: CdkOverlayOrigin, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkOverlayOrigin.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.0.1\", type: CdkOverlayOrigin, selector: \"[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]\", exportAs: [\"cdkOverlayOrigin\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: CdkOverlayOrigin, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n                    exportAs: 'cdkOverlayOrigin',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; } });\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\nclass CdkConnectedOverlay {\n    // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n    constructor(_overlay, templateRef, viewContainerRef, scrollStrategyFactory, _dir) {\n        this._overlay = _overlay;\n        this._dir = _dir;\n        this._hasBackdrop = false;\n        this._lockPosition = false;\n        this._growAfterOpen = false;\n        this._flexibleDimensions = false;\n        this._push = false;\n        this._backdropSubscription = Subscription.EMPTY;\n        this._attachSubscription = Subscription.EMPTY;\n        this._detachSubscription = Subscription.EMPTY;\n        this._positionSubscription = Subscription.EMPTY;\n        /** Margin between the overlay and the viewport edges. */\n        this.viewportMargin = 0;\n        /** Whether the overlay is open. */\n        this.open = false;\n        /** Whether the overlay can be closed by user interaction. */\n        this.disableClose = false;\n        /** Event emitted when the backdrop is clicked. */\n        this.backdropClick = new EventEmitter();\n        /** Event emitted when the position has changed. */\n        this.positionChange = new EventEmitter();\n        /** Event emitted when the overlay has been attached. */\n        this.attach = new EventEmitter();\n        /** Event emitted when the overlay has been detached. */\n        this.detach = new EventEmitter();\n        /** Emits when there are keyboard events that are targeted at the overlay. */\n        this.overlayKeydown = new EventEmitter();\n        /** Emits when there are mouse outside click events that are targeted at the overlay. */\n        this.overlayOutsideClick = new EventEmitter();\n        this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this.scrollStrategy = this._scrollStrategyFactory();\n    }\n    /** The offset in pixels for the overlay connection point on the x-axis */\n    get offsetX() {\n        return this._offsetX;\n    }\n    set offsetX(offsetX) {\n        this._offsetX = offsetX;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /** The offset in pixels for the overlay connection point on the y-axis */\n    get offsetY() {\n        return this._offsetY;\n    }\n    set offsetY(offsetY) {\n        this._offsetY = offsetY;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /** Whether or not the overlay should attach a backdrop. */\n    get hasBackdrop() {\n        return this._hasBackdrop;\n    }\n    set hasBackdrop(value) {\n        this._hasBackdrop = coerceBooleanProperty(value);\n    }\n    /** Whether or not the overlay should be locked when scrolling. */\n    get lockPosition() {\n        return this._lockPosition;\n    }\n    set lockPosition(value) {\n        this._lockPosition = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n    get flexibleDimensions() {\n        return this._flexibleDimensions;\n    }\n    set flexibleDimensions(value) {\n        this._flexibleDimensions = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\n    get growAfterOpen() {\n        return this._growAfterOpen;\n    }\n    set growAfterOpen(value) {\n        this._growAfterOpen = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    get push() {\n        return this._push;\n    }\n    set push(value) {\n        this._push = coerceBooleanProperty(value);\n    }\n    /** The associated overlay reference. */\n    get overlayRef() {\n        return this._overlayRef;\n    }\n    /** The element's layout direction. */\n    get dir() {\n        return this._dir ? this._dir.value : 'ltr';\n    }\n    ngOnDestroy() {\n        this._attachSubscription.unsubscribe();\n        this._detachSubscription.unsubscribe();\n        this._backdropSubscription.unsubscribe();\n        this._positionSubscription.unsubscribe();\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n        }\n    }\n    ngOnChanges(changes) {\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n            this._overlayRef.updateSize({\n                width: this.width,\n                minWidth: this.minWidth,\n                height: this.height,\n                minHeight: this.minHeight,\n            });\n            if (changes['origin'] && this.open) {\n                this._position.apply();\n            }\n        }\n        if (changes['open']) {\n            this.open ? this._attachOverlay() : this._detachOverlay();\n        }\n    }\n    /** Creates an overlay */\n    _createOverlay() {\n        if (!this.positions || !this.positions.length) {\n            this.positions = defaultPositionList;\n        }\n        const overlayRef = (this._overlayRef = this._overlay.create(this._buildConfig()));\n        this._attachSubscription = overlayRef.attachments().subscribe(() => this.attach.emit());\n        this._detachSubscription = overlayRef.detachments().subscribe(() => this.detach.emit());\n        overlayRef.keydownEvents().subscribe((event) => {\n            this.overlayKeydown.next(event);\n            if (event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)) {\n                event.preventDefault();\n                this._detachOverlay();\n            }\n        });\n        this._overlayRef.outsidePointerEvents().subscribe((event) => {\n            this.overlayOutsideClick.next(event);\n        });\n    }\n    /** Builds the overlay config based on the directive's inputs */\n    _buildConfig() {\n        const positionStrategy = (this._position =\n            this.positionStrategy || this._createPositionStrategy());\n        const overlayConfig = new OverlayConfig({\n            direction: this._dir,\n            positionStrategy,\n            scrollStrategy: this.scrollStrategy,\n            hasBackdrop: this.hasBackdrop,\n        });\n        if (this.width || this.width === 0) {\n            overlayConfig.width = this.width;\n        }\n        if (this.height || this.height === 0) {\n            overlayConfig.height = this.height;\n        }\n        if (this.minWidth || this.minWidth === 0) {\n            overlayConfig.minWidth = this.minWidth;\n        }\n        if (this.minHeight || this.minHeight === 0) {\n            overlayConfig.minHeight = this.minHeight;\n        }\n        if (this.backdropClass) {\n            overlayConfig.backdropClass = this.backdropClass;\n        }\n        if (this.panelClass) {\n            overlayConfig.panelClass = this.panelClass;\n        }\n        return overlayConfig;\n    }\n    /** Updates the state of a position strategy, based on the values of the directive inputs. */\n    _updatePositionStrategy(positionStrategy) {\n        const positions = this.positions.map(currentPosition => ({\n            originX: currentPosition.originX,\n            originY: currentPosition.originY,\n            overlayX: currentPosition.overlayX,\n            overlayY: currentPosition.overlayY,\n            offsetX: currentPosition.offsetX || this.offsetX,\n            offsetY: currentPosition.offsetY || this.offsetY,\n            panelClass: currentPosition.panelClass || undefined,\n        }));\n        return positionStrategy\n            .setOrigin(this._getFlexibleConnectedPositionStrategyOrigin())\n            .withPositions(positions)\n            .withFlexibleDimensions(this.flexibleDimensions)\n            .withPush(this.push)\n            .withGrowAfterOpen(this.growAfterOpen)\n            .withViewportMargin(this.viewportMargin)\n            .withLockedPosition(this.lockPosition)\n            .withTransformOriginOn(this.transformOriginSelector);\n    }\n    /** Returns the position strategy of the overlay to be set on the overlay config */\n    _createPositionStrategy() {\n        const strategy = this._overlay\n            .position()\n            .flexibleConnectedTo(this._getFlexibleConnectedPositionStrategyOrigin());\n        this._updatePositionStrategy(strategy);\n        return strategy;\n    }\n    _getFlexibleConnectedPositionStrategyOrigin() {\n        if (this.origin instanceof CdkOverlayOrigin) {\n            return this.origin.elementRef;\n        }\n        else {\n            return this.origin;\n        }\n    }\n    /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\n    _attachOverlay() {\n        if (!this._overlayRef) {\n            this._createOverlay();\n        }\n        else {\n            // Update the overlay size, in case the directive's inputs have changed\n            this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;\n        }\n        if (!this._overlayRef.hasAttached()) {\n            this._overlayRef.attach(this._templatePortal);\n        }\n        if (this.hasBackdrop) {\n            this._backdropSubscription = this._overlayRef.backdropClick().subscribe(event => {\n                this.backdropClick.emit(event);\n            });\n        }\n        else {\n            this._backdropSubscription.unsubscribe();\n        }\n        this._positionSubscription.unsubscribe();\n        // Only subscribe to `positionChanges` if requested, because putting\n        // together all the information for it can be expensive.\n        if (this.positionChange.observers.length > 0) {\n            this._positionSubscription = this._position.positionChanges\n                .pipe(takeWhile(() => this.positionChange.observers.length > 0))\n                .subscribe(position => {\n                this.positionChange.emit(position);\n                if (this.positionChange.observers.length === 0) {\n                    this._positionSubscription.unsubscribe();\n                }\n            });\n        }\n    }\n    /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\n    _detachOverlay() {\n        if (this._overlayRef) {\n            this._overlayRef.detach();\n        }\n        this._backdropSubscription.unsubscribe();\n        this._positionSubscription.unsubscribe();\n    }\n}\nCdkConnectedOverlay.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: CdkConnectedOverlay, deps: [{ token: Overlay }, { token: i0.TemplateRef }, { token: i0.ViewContainerRef }, { token: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY }, { token: i5.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkConnectedOverlay.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.0.1\", type: CdkConnectedOverlay, selector: \"[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]\", inputs: { origin: [\"cdkConnectedOverlayOrigin\", \"origin\"], positions: [\"cdkConnectedOverlayPositions\", \"positions\"], positionStrategy: [\"cdkConnectedOverlayPositionStrategy\", \"positionStrategy\"], offsetX: [\"cdkConnectedOverlayOffsetX\", \"offsetX\"], offsetY: [\"cdkConnectedOverlayOffsetY\", \"offsetY\"], width: [\"cdkConnectedOverlayWidth\", \"width\"], height: [\"cdkConnectedOverlayHeight\", \"height\"], minWidth: [\"cdkConnectedOverlayMinWidth\", \"minWidth\"], minHeight: [\"cdkConnectedOverlayMinHeight\", \"minHeight\"], backdropClass: [\"cdkConnectedOverlayBackdropClass\", \"backdropClass\"], panelClass: [\"cdkConnectedOverlayPanelClass\", \"panelClass\"], viewportMargin: [\"cdkConnectedOverlayViewportMargin\", \"viewportMargin\"], scrollStrategy: [\"cdkConnectedOverlayScrollStrategy\", \"scrollStrategy\"], open: [\"cdkConnectedOverlayOpen\", \"open\"], disableClose: [\"cdkConnectedOverlayDisableClose\", \"disableClose\"], transformOriginSelector: [\"cdkConnectedOverlayTransformOriginOn\", \"transformOriginSelector\"], hasBackdrop: [\"cdkConnectedOverlayHasBackdrop\", \"hasBackdrop\"], lockPosition: [\"cdkConnectedOverlayLockPosition\", \"lockPosition\"], flexibleDimensions: [\"cdkConnectedOverlayFlexibleDimensions\", \"flexibleDimensions\"], growAfterOpen: [\"cdkConnectedOverlayGrowAfterOpen\", \"growAfterOpen\"], push: [\"cdkConnectedOverlayPush\", \"push\"] }, outputs: { backdropClick: \"backdropClick\", positionChange: \"positionChange\", attach: \"attach\", detach: \"detach\", overlayKeydown: \"overlayKeydown\", overlayOutsideClick: \"overlayOutsideClick\" }, exportAs: [\"cdkConnectedOverlay\"], usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: CdkConnectedOverlay, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n                    exportAs: 'cdkConnectedOverlay',\n                }]\n        }], ctorParameters: function () {\n        return [{ type: Overlay }, { type: i0.TemplateRef }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY]\n                    }] }, { type: i5.Directionality, decorators: [{\n                        type: Optional\n                    }] }];\n    }, propDecorators: { origin: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOrigin']\n            }], positions: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPositions']\n            }], positionStrategy: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPositionStrategy']\n            }], offsetX: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOffsetX']\n            }], offsetY: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOffsetY']\n            }], width: [{\n                type: Input,\n                args: ['cdkConnectedOverlayWidth']\n            }], height: [{\n                type: Input,\n                args: ['cdkConnectedOverlayHeight']\n            }], minWidth: [{\n                type: Input,\n                args: ['cdkConnectedOverlayMinWidth']\n            }], minHeight: [{\n                type: Input,\n                args: ['cdkConnectedOverlayMinHeight']\n            }], backdropClass: [{\n                type: Input,\n                args: ['cdkConnectedOverlayBackdropClass']\n            }], panelClass: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPanelClass']\n            }], viewportMargin: [{\n                type: Input,\n                args: ['cdkConnectedOverlayViewportMargin']\n            }], scrollStrategy: [{\n                type: Input,\n                args: ['cdkConnectedOverlayScrollStrategy']\n            }], open: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOpen']\n            }], disableClose: [{\n                type: Input,\n                args: ['cdkConnectedOverlayDisableClose']\n            }], transformOriginSelector: [{\n                type: Input,\n                args: ['cdkConnectedOverlayTransformOriginOn']\n            }], hasBackdrop: [{\n                type: Input,\n                args: ['cdkConnectedOverlayHasBackdrop']\n            }], lockPosition: [{\n                type: Input,\n                args: ['cdkConnectedOverlayLockPosition']\n            }], flexibleDimensions: [{\n                type: Input,\n                args: ['cdkConnectedOverlayFlexibleDimensions']\n            }], growAfterOpen: [{\n                type: Input,\n                args: ['cdkConnectedOverlayGrowAfterOpen']\n            }], push: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPush']\n            }], backdropClick: [{\n                type: Output\n            }], positionChange: [{\n                type: Output\n            }], attach: [{\n                type: Output\n            }], detach: [{\n                type: Output\n            }], overlayKeydown: [{\n                type: Output\n            }], overlayOutsideClick: [{\n                type: Output\n            }] } });\n/** @docs-private */\nfunction CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n    provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass OverlayModule {\n}\nOverlayModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: OverlayModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nOverlayModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.0.1\", ngImport: i0, type: OverlayModule, declarations: [CdkConnectedOverlay, CdkOverlayOrigin], imports: [BidiModule, PortalModule, ScrollingModule], exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule] });\nOverlayModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: OverlayModule, providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER], imports: [BidiModule, PortalModule, ScrollingModule, ScrollingModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: OverlayModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [BidiModule, PortalModule, ScrollingModule],\n                    exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\n                    declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\n                    providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\nclass FullscreenOverlayContainer extends OverlayContainer {\n    constructor(_document, platform) {\n        super(_document, platform);\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        if (this._fullScreenEventName && this._fullScreenListener) {\n            this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n        }\n    }\n    _createContainer() {\n        super._createContainer();\n        this._adjustParentForFullscreenChange();\n        this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n    }\n    _adjustParentForFullscreenChange() {\n        if (!this._containerElement) {\n            return;\n        }\n        const fullscreenElement = this.getFullscreenElement();\n        const parent = fullscreenElement || this._document.body;\n        parent.appendChild(this._containerElement);\n    }\n    _addFullscreenChangeListener(fn) {\n        const eventName = this._getEventName();\n        if (eventName) {\n            if (this._fullScreenListener) {\n                this._document.removeEventListener(eventName, this._fullScreenListener);\n            }\n            this._document.addEventListener(eventName, fn);\n            this._fullScreenListener = fn;\n        }\n    }\n    _getEventName() {\n        if (!this._fullScreenEventName) {\n            const _document = this._document;\n            if (_document.fullscreenEnabled) {\n                this._fullScreenEventName = 'fullscreenchange';\n            }\n            else if (_document.webkitFullscreenEnabled) {\n                this._fullScreenEventName = 'webkitfullscreenchange';\n            }\n            else if (_document.mozFullScreenEnabled) {\n                this._fullScreenEventName = 'mozfullscreenchange';\n            }\n            else if (_document.msFullscreenEnabled) {\n                this._fullScreenEventName = 'MSFullscreenChange';\n            }\n        }\n        return this._fullScreenEventName;\n    }\n    /**\n     * When the page is put into fullscreen mode, a specific element is specified.\n     * Only that element and its children are visible when in fullscreen mode.\n     */\n    getFullscreenElement() {\n        const _document = this._document;\n        return (_document.fullscreenElement ||\n            _document.webkitFullscreenElement ||\n            _document.mozFullScreenElement ||\n            _document.msFullscreenElement ||\n            null);\n    }\n}\nFullscreenOverlayContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: FullscreenOverlayContainer, deps: [{ token: DOCUMENT }, { token: i1$1.Platform }], target: i0.ɵɵFactoryTarget.Injectable });\nFullscreenOverlayContainer.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: FullscreenOverlayContainer, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: FullscreenOverlayContainer, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i1$1.Platform }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BlockScrollStrategy, CdkConnectedOverlay, CdkOverlayOrigin, CloseScrollStrategy, ConnectedOverlayPositionChange, ConnectionPositionPair, FlexibleConnectedPositionStrategy, FullscreenOverlayContainer, GlobalPositionStrategy, NoopScrollStrategy, Overlay, OverlayConfig, OverlayContainer, OverlayKeyboardDispatcher, OverlayModule, OverlayOutsideClickDispatcher, OverlayPositionBuilder, OverlayRef, RepositionScrollStrategy, STANDARD_DROPDOWN_ADJACENT_POSITIONS, STANDARD_DROPDOWN_BELOW_POSITIONS, ScrollStrategyOptions, ScrollingVisibility, validateHorizontalPosition, validateVerticalPosition };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}